webpackJsonp([0],{

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar React = __webpack_require__(1);\nvar ReactDOM = __webpack_require__(32);\n\nvar App = __webpack_require__(166);\n\nReactDOM.render(React.createElement(App, null), document.getElementById('root'));\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXguanM/OTU1MiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLElBQU0sUUFBUSxvQkFBUSxDQUFSLENBQVI7QUFDTixJQUFNLFdBQVcsb0JBQVEsRUFBUixDQUFYOztBQUVOLElBQU0sTUFBTSxvQkFBUSxHQUFSLENBQU47O0FBRU4sU0FBUyxNQUFULENBQWdCLG9CQUFDLEdBQUQsT0FBaEIsRUFBeUIsU0FBUyxjQUFULENBQXdCLE1BQXhCLENBQXpCIiwiZmlsZSI6IjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5jb25zdCBSZWFjdERPTSA9IHJlcXVpcmUoJ3JlYWN0LWRvbScpO1xuXG5jb25zdCBBcHAgPSByZXF1aXJlKCcuL2FwcCcpO1xuXG5SZWFjdERPTS5yZW5kZXIoPEFwcCAvPiwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jvb3QnKSk7XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy9pbmRleC5qc1xuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },

/***/ 166:
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar React = __webpack_require__(1);\n\nvar _require = __webpack_require__(167);\n\nvar Provider = _require.Provider;\n\nvar _require2 = __webpack_require__(211);\n\nvar View = _require2.View;\n\n\nvar MathInput = __webpack_require__(189);\nvar MathKeypad = __webpack_require__(218);\nvar store = __webpack_require__(216);\n\nvar App = React.createClass({\n    displayName: 'App',\n    render: function render() {\n        return React.createElement(\n            View,\n            null,\n            React.createElement(MathInput, { currentValue: 'foo' }),\n            React.createElement(\n                Provider,\n                { store: store },\n                React.createElement(MathKeypad, null)\n            )\n        );\n    }\n});\n\nmodule.exports = App;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYXBwLmpzPzdhYzkiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFNLFFBQVEsb0JBQVEsQ0FBUixDQUFSOztlQUNlLG9CQUFRLEdBQVI7O0lBQWI7O2dCQUVTLG9CQUFRLEdBQVI7O0lBQVQ7OztBQUVSLElBQU0sWUFBWSxvQkFBUSxHQUFSLENBQVo7QUFDTixJQUFNLGFBQWEsb0JBQVEsR0FBUixDQUFiO0FBQ04sSUFBTSxRQUFRLG9CQUFRLEdBQVIsQ0FBUjs7QUFFTixJQUFNLE1BQU0sTUFBTSxXQUFOLENBQWtCOztBQUMxQiw4QkFBUztBQUNMLGVBQU87QUFBQyxnQkFBRDs7WUFDSCxvQkFBQyxTQUFELElBQVcsY0FBYSxLQUFiLEVBQVgsQ0FERztZQUVIO0FBQUMsd0JBQUQ7a0JBQVUsT0FBTyxLQUFQLEVBQVY7Z0JBQ0ksb0JBQUMsVUFBRCxPQURKO2FBRkc7U0FBUCxDQURLO0tBRGlCO0NBQWxCLENBQU47O0FBV04sT0FBTyxPQUFQLEdBQWlCLEdBQWpCIiwiZmlsZSI6IjE2Ni5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbmNvbnN0IHsgUHJvdmlkZXIgfSA9IHJlcXVpcmUoJ3JlYWN0LXJlZHV4Jyk7XG5cbmNvbnN0IHsgVmlldyB9ID0gcmVxdWlyZSgnLi9yZWFjdC1uYXRpdmUnKTtcblxuY29uc3QgTWF0aElucHV0ID0gcmVxdWlyZSgnLi9tYXRoLWlucHV0Jyk7XG5jb25zdCBNYXRoS2V5cGFkID0gcmVxdWlyZSgnLi9tYXRoLWtleXBhZCcpO1xuY29uc3Qgc3RvcmUgPSByZXF1aXJlKCcuL3N0b3JlJyk7XG5cbmNvbnN0IEFwcCA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiA8Vmlldz5cbiAgICAgICAgICAgIDxNYXRoSW5wdXQgY3VycmVudFZhbHVlPVwiZm9vXCIgLz5cbiAgICAgICAgICAgIDxQcm92aWRlciBzdG9yZT17c3RvcmV9PlxuICAgICAgICAgICAgICAgIDxNYXRoS2V5cGFkIC8+XG4gICAgICAgICAgICA8L1Byb3ZpZGVyPlxuICAgICAgICA8L1ZpZXc+O1xuICAgIH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFwcDtcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL2FwcC5qc1xuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },

/***/ 189:
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar React = __webpack_require__(1);\nvar ReactDOM = __webpack_require__(32);\n\nvar _require = __webpack_require__(190);\n\nvar StyleSheet = _require.StyleSheet;\n\nvar MathQuill = __webpack_require__(214);\n\nvar _require2 = __webpack_require__(211);\n\nvar View = _require2.View;\n\n\nvar actions = __webpack_require__(215);\nvar Keys = __webpack_require__(217);\n\nvar MathInput = React.createClass({\n    displayName: 'MathInput',\n\n    propTypes: {\n        currentValue: React.PropTypes.string.isRequired\n    },\n\n    // cursor: React.PropTypes.number,\n    // onChange: React.PropTypes.func,\n    componentDidMount: function componentDidMount() {\n        var _this = this;\n\n        var container = ReactDOM.findDOMNode(this);\n        var span = document.createElement('span');\n        container.appendChild(span);\n\n        var MQ = MathQuill.getInterface(2);\n        this.mathField = MQ.MathField(span, {\n            handlers: {\n                edit: function edit() {\n                    console.log(_this.mathField.latex());\n                }\n            }\n        });\n\n        // pass this component's handleKey method to the store so it can call\n        // it whenever the store gets an KeyPress action from the keypad\n        actions.registerKeyHandler(this.handleKey);\n    },\n    handleKey: function handleKey(key, cmd) {\n        if (Object.values(Keys).includes(key)) {\n            this.mathField.keystroke(key);\n        } else if (cmd) {\n            this.mathField.cmd(key).focus();\n        } else {\n            this.mathField.write(key).focus();\n        }\n    },\n    render: function render() {\n        return React.createElement(View, { style: styles.input });\n    }\n});\n\nvar styles = StyleSheet.create({\n    input: {\n        margin: 10,\n        width: 300,\n        fontSize: 48\n    }\n});\n\nmodule.exports = MathInput;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWF0aC1pbnB1dC5qcz8wN2ZiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBTSxRQUFRLG9CQUFRLENBQVIsQ0FBUjtBQUNOLElBQU0sV0FBVyxvQkFBUSxFQUFSLENBQVg7O2VBQ2lCLG9CQUFRLEdBQVI7O0lBQWY7O0FBQ1IsSUFBTSxZQUFZLG9CQUFRLEdBQVIsQ0FBWjs7Z0JBRVcsb0JBQVEsR0FBUjs7SUFBVDs7O0FBRVIsSUFBTSxVQUFVLG9CQUFRLEdBQVIsQ0FBVjtBQUNOLElBQU0sT0FBTyxvQkFBUSxHQUFSLENBQVA7O0FBRU4sSUFBTSxZQUFZLE1BQU0sV0FBTixDQUFrQjs7O0FBQ2hDLGVBQVc7QUFDUCxzQkFBYyxNQUFNLFNBQU4sQ0FBZ0IsTUFBaEIsQ0FBdUIsVUFBdkI7S0FEbEI7Ozs7QUFNQSxvREFBb0I7OztBQUNoQixZQUFNLFlBQVksU0FBUyxXQUFULENBQXFCLElBQXJCLENBQVosQ0FEVTtBQUVoQixZQUFNLE9BQU8sU0FBUyxhQUFULENBQXVCLE1BQXZCLENBQVAsQ0FGVTtBQUdoQixrQkFBVSxXQUFWLENBQXNCLElBQXRCLEVBSGdCOztBQUtoQixZQUFJLEtBQUssVUFBVSxZQUFWLENBQXVCLENBQXZCLENBQUwsQ0FMWTtBQU1oQixhQUFLLFNBQUwsR0FBaUIsR0FBRyxTQUFILENBQWEsSUFBYixFQUFtQjtBQUNoQyxzQkFBVTtBQUNOLHNCQUFNLGdCQUFNO0FBQ1IsNEJBQVEsR0FBUixDQUFZLE1BQUssU0FBTCxDQUFlLEtBQWYsRUFBWixFQURRO2lCQUFOO2FBRFY7U0FEYSxDQUFqQjs7OztBQU5nQixlQWdCaEIsQ0FBUSxrQkFBUixDQUEyQixLQUFLLFNBQUwsQ0FBM0IsQ0FoQmdCO0tBUFk7QUEwQmhDLGtDQUFVLEtBQUssS0FBSztBQUNoQixZQUFJLE9BQU8sTUFBUCxDQUFjLElBQWQsRUFBb0IsUUFBcEIsQ0FBNkIsR0FBN0IsQ0FBSixFQUF1QztBQUNuQyxpQkFBSyxTQUFMLENBQWUsU0FBZixDQUF5QixHQUF6QixFQURtQztTQUF2QyxNQUVPLElBQUksR0FBSixFQUFTO0FBQ1osaUJBQUssU0FBTCxDQUFlLEdBQWYsQ0FBbUIsR0FBbkIsRUFBd0IsS0FBeEIsR0FEWTtTQUFULE1BRUE7QUFDSCxpQkFBSyxTQUFMLENBQWUsS0FBZixDQUFxQixHQUFyQixFQUEwQixLQUExQixHQURHO1NBRkE7S0E3QnFCO0FBb0NoQyw4QkFBUztBQUNMLGVBQU8sb0JBQUMsSUFBRCxJQUFNLE9BQU8sT0FBTyxLQUFQLEVBQWIsQ0FBUCxDQURLO0tBcEN1QjtDQUFsQixDQUFaOztBQXlDTixJQUFNLFNBQVMsV0FBVyxNQUFYLENBQWtCO0FBQzdCLFdBQU87QUFDSCxnQkFBUSxFQUFSO0FBQ0EsZUFBTyxHQUFQO0FBQ0Esa0JBQVUsRUFBVjtLQUhKO0NBRFcsQ0FBVDs7QUFRTixPQUFPLE9BQVAsR0FBaUIsU0FBakIiLCJmaWxlIjoiMTg5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuY29uc3QgUmVhY3RET00gPSByZXF1aXJlKCdyZWFjdC1kb20nKTtcbmNvbnN0IHsgU3R5bGVTaGVldCB9ID0gcmVxdWlyZShcImFwaHJvZGl0ZVwiKTtcbmNvbnN0IE1hdGhRdWlsbCA9IHJlcXVpcmUoJ21hdGhxdWlsbCcpO1xuXG5jb25zdCB7IFZpZXcgfSA9IHJlcXVpcmUoJy4vcmVhY3QtbmF0aXZlJyk7XG5cbmNvbnN0IGFjdGlvbnMgPSByZXF1aXJlKCcuL2FjdGlvbnMnKTtcbmNvbnN0IEtleXMgPSByZXF1aXJlKCcuL2tleXMnKTtcblxuY29uc3QgTWF0aElucHV0ID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICAgIHByb3BUeXBlczoge1xuICAgICAgICBjdXJyZW50VmFsdWU6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICAgICAgLy8gY3Vyc29yOiBSZWFjdC5Qcm9wVHlwZXMubnVtYmVyLFxuICAgICAgICAvLyBvbkNoYW5nZTogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgfSxcblxuICAgIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgICBjb25zdCBjb250YWluZXIgPSBSZWFjdERPTS5maW5kRE9NTm9kZSh0aGlzKTtcbiAgICAgICAgY29uc3Qgc3BhbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKHNwYW4pO1xuXG4gICAgICAgIHZhciBNUSA9IE1hdGhRdWlsbC5nZXRJbnRlcmZhY2UoMik7XG4gICAgICAgIHRoaXMubWF0aEZpZWxkID0gTVEuTWF0aEZpZWxkKHNwYW4sIHtcbiAgICAgICAgICAgIGhhbmRsZXJzOiB7XG4gICAgICAgICAgICAgICAgZWRpdDogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyh0aGlzLm1hdGhGaWVsZC5sYXRleCgpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIHBhc3MgdGhpcyBjb21wb25lbnQncyBoYW5kbGVLZXkgbWV0aG9kIHRvIHRoZSBzdG9yZSBzbyBpdCBjYW4gY2FsbFxuICAgICAgICAvLyBpdCB3aGVuZXZlciB0aGUgc3RvcmUgZ2V0cyBhbiBLZXlQcmVzcyBhY3Rpb24gZnJvbSB0aGUga2V5cGFkXG4gICAgICAgIGFjdGlvbnMucmVnaXN0ZXJLZXlIYW5kbGVyKHRoaXMuaGFuZGxlS2V5KTtcbiAgICB9LFxuXG4gICAgaGFuZGxlS2V5KGtleSwgY21kKSB7XG4gICAgICAgIGlmIChPYmplY3QudmFsdWVzKEtleXMpLmluY2x1ZGVzKGtleSkpIHtcbiAgICAgICAgICAgIHRoaXMubWF0aEZpZWxkLmtleXN0cm9rZShrZXkpO1xuICAgICAgICB9IGVsc2UgaWYgKGNtZCkge1xuICAgICAgICAgICAgdGhpcy5tYXRoRmllbGQuY21kKGtleSkuZm9jdXMoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubWF0aEZpZWxkLndyaXRlKGtleSkuZm9jdXMoKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiA8VmlldyBzdHlsZT17c3R5bGVzLmlucHV0fSAvPjtcbiAgICB9LFxufSk7XG5cbmNvbnN0IHN0eWxlcyA9IFN0eWxlU2hlZXQuY3JlYXRlKHtcbiAgICBpbnB1dDoge1xuICAgICAgICBtYXJnaW46IDEwLFxuICAgICAgICB3aWR0aDogMzAwLFxuICAgICAgICBmb250U2l6ZTogNDhcbiAgICB9LFxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gTWF0aElucHV0O1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvbWF0aC1pbnB1dC5qc1xuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },

/***/ 211:
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\n// pale imitation of https://github.com/necolas/react-native-web\n// components' style prop accept aphrodite StyleSheets\n\nmodule.exports = {\n    View: __webpack_require__(212),\n    Text: __webpack_require__(213)\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvcmVhY3QtbmF0aXZlLmpzPzU2YWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFHQSxPQUFPLE9BQVAsR0FBaUI7QUFDYixVQUFNLG9CQUFRLEdBQVIsQ0FBTjtBQUNBLFVBQU0sb0JBQVEsR0FBUixDQUFOO0NBRkoiLCJmaWxlIjoiMjExLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gcGFsZSBpbWl0YXRpb24gb2YgaHR0cHM6Ly9naXRodWIuY29tL25lY29sYXMvcmVhY3QtbmF0aXZlLXdlYlxuLy8gY29tcG9uZW50cycgc3R5bGUgcHJvcCBhY2NlcHQgYXBocm9kaXRlIFN0eWxlU2hlZXRzXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIFZpZXc6IHJlcXVpcmUoJy4vdmlldycpLFxuICAgIFRleHQ6IHJlcXVpcmUoJy4vdGV4dCcpLFxufTtcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL3JlYWN0LW5hdGl2ZS5qc1xuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },

/***/ 212:
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nvar React = __webpack_require__(1);\n\nvar _require = __webpack_require__(190);\n\nvar StyleSheet = _require.StyleSheet;\nvar css = _require.css;\n\n\nvar View = function View(props) {\n    var className = Array.isArray(props.style) ? css.apply(undefined, [styles.initial].concat(_toConsumableArray(props.style))) : css(styles.initial, props.style);\n\n    return React.createElement(\n        'div',\n        { onClick: props.onClick, className: className },\n        props.children\n    );\n};\n\n// https://github.com/necolas/react-native-web/blob/master/src/components/View/index.js\nvar styles = StyleSheet.create({\n    initial: {\n        alignItems: 'stretch',\n        borderWidth: 0,\n        borderStyle: 'solid',\n        boxSizing: 'border-box',\n        display: 'flex',\n        flexBasis: 'auto',\n        flexDirection: 'column',\n        margin: 0,\n        padding: 0,\n        position: 'relative',\n        // button and anchor reset\n        backgroundColor: 'transparent',\n        color: 'inherit',\n        font: 'inherit',\n        textAlign: 'inherit',\n        textDecorationLine: 'none',\n        // list reset\n        listStyle: 'none',\n        // fix flexbox bugs\n        maxWidth: '100%',\n        minHeight: 0,\n        minWidth: 0\n    }\n});\n\nmodule.exports = View;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdmlldy5qcz8zMjBhIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxJQUFNLFFBQVEsb0JBQVEsQ0FBUixDQUFSOztlQUNzQixvQkFBUSxHQUFSOztJQUFwQjtJQUFZOzs7QUFFcEIsSUFBTSxPQUFPLFNBQVAsSUFBTyxDQUFDLEtBQUQsRUFBVztBQUNwQixRQUFNLFlBQVksTUFBTSxPQUFOLENBQWMsTUFBTSxLQUFOLENBQWQsR0FDWixzQkFBSSxPQUFPLE9BQVAsNEJBQW1CLE1BQU0sS0FBTixFQUF2QixDQURZLEdBRVosSUFBSSxPQUFPLE9BQVAsRUFBZ0IsTUFBTSxLQUFOLENBRlIsQ0FERTs7QUFLcEIsV0FBTzs7VUFBSyxTQUFTLE1BQU0sT0FBTixFQUFlLFdBQVcsU0FBWCxFQUE3QjtRQUNGLE1BQU0sUUFBTjtLQURMLENBTG9CO0NBQVg7OztBQVdiLElBQU0sU0FBUyxXQUFXLE1BQVgsQ0FBa0I7QUFDN0IsYUFBUztBQUNMLG9CQUFZLFNBQVo7QUFDQSxxQkFBYSxDQUFiO0FBQ0EscUJBQWEsT0FBYjtBQUNBLG1CQUFXLFlBQVg7QUFDQSxpQkFBUyxNQUFUO0FBQ0EsbUJBQVcsTUFBWDtBQUNBLHVCQUFlLFFBQWY7QUFDQSxnQkFBUSxDQUFSO0FBQ0EsaUJBQVMsQ0FBVDtBQUNBLGtCQUFVLFVBQVY7O0FBRUEseUJBQWlCLGFBQWpCO0FBQ0EsZUFBTyxTQUFQO0FBQ0EsY0FBTSxTQUFOO0FBQ0EsbUJBQVcsU0FBWDtBQUNBLDRCQUFvQixNQUFwQjs7QUFFQSxtQkFBVyxNQUFYOztBQUVBLGtCQUFVLE1BQVY7QUFDQSxtQkFBVyxDQUFYO0FBQ0Esa0JBQVUsQ0FBVjtLQXRCSjtDQURXLENBQVQ7O0FBMkJOLE9BQU8sT0FBUCxHQUFpQixJQUFqQiIsImZpbGUiOiIyMTIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5jb25zdCB7IFN0eWxlU2hlZXQsIGNzcyB9ID0gcmVxdWlyZSgnYXBocm9kaXRlJyk7XG5cbmNvbnN0IFZpZXcgPSAocHJvcHMpID0+IHtcbiAgICBjb25zdCBjbGFzc05hbWUgPSBBcnJheS5pc0FycmF5KHByb3BzLnN0eWxlKVxuICAgICAgICA/IGNzcyhzdHlsZXMuaW5pdGlhbCwgLi4ucHJvcHMuc3R5bGUpXG4gICAgICAgIDogY3NzKHN0eWxlcy5pbml0aWFsLCBwcm9wcy5zdHlsZSk7XG5cbiAgICByZXR1cm4gPGRpdiBvbkNsaWNrPXtwcm9wcy5vbkNsaWNrfSBjbGFzc05hbWU9e2NsYXNzTmFtZX0+XG4gICAgICAgIHtwcm9wcy5jaGlsZHJlbn1cbiAgICA8L2Rpdj47XG59O1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vbmVjb2xhcy9yZWFjdC1uYXRpdmUtd2ViL2Jsb2IvbWFzdGVyL3NyYy9jb21wb25lbnRzL1ZpZXcvaW5kZXguanNcbmNvbnN0IHN0eWxlcyA9IFN0eWxlU2hlZXQuY3JlYXRlKHtcbiAgICBpbml0aWFsOiB7XG4gICAgICAgIGFsaWduSXRlbXM6ICdzdHJldGNoJyxcbiAgICAgICAgYm9yZGVyV2lkdGg6IDAsXG4gICAgICAgIGJvcmRlclN0eWxlOiAnc29saWQnLFxuICAgICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICBmbGV4QmFzaXM6ICdhdXRvJyxcbiAgICAgICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gICAgICAgIG1hcmdpbjogMCxcbiAgICAgICAgcGFkZGluZzogMCxcbiAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICAgIC8vIGJ1dHRvbiBhbmQgYW5jaG9yIHJlc2V0XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgICAgICAgY29sb3I6ICdpbmhlcml0JyxcbiAgICAgICAgZm9udDogJ2luaGVyaXQnLFxuICAgICAgICB0ZXh0QWxpZ246ICdpbmhlcml0JyxcbiAgICAgICAgdGV4dERlY29yYXRpb25MaW5lOiAnbm9uZScsXG4gICAgICAgIC8vIGxpc3QgcmVzZXRcbiAgICAgICAgbGlzdFN0eWxlOiAnbm9uZScsXG4gICAgICAgIC8vIGZpeCBmbGV4Ym94IGJ1Z3NcbiAgICAgICAgbWF4V2lkdGg6ICcxMDAlJyxcbiAgICAgICAgbWluSGVpZ2h0OiAwLFxuICAgICAgICBtaW5XaWR0aDogMFxuICAgIH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFZpZXc7XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy92aWV3LmpzXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },

/***/ 213:
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar React = __webpack_require__(1);\n\nvar _require = __webpack_require__(190);\n\nvar StyleSheet = _require.StyleSheet;\nvar css = _require.css;\n\n\nvar Text = React.createClass({\n    displayName: 'Text',\n    render: function render() {\n        var _props = this.props;\n        var numberOfLines = _props.numberOfLines;\n        var style = _props.style;\n\n\n        var className = css(styles.initial, style, numberOfLines === 1 && styles.singleLineStyle);\n\n        return React.createElement(\n            'span',\n            { className: className },\n            this.props.children\n        );\n    }\n});\n\n// https://github.com/necolas/react-native-web/blob/master/src/components/Text/index.js\nvar styles = StyleSheet.create({\n    initial: {\n        color: 'inherit',\n        display: 'inline',\n        font: 'inherit',\n        margin: 0,\n        padding: 0,\n        textDecorationLine: 'none',\n        wordWrap: 'break-word'\n    },\n    singleLineStyle: {\n        maxWidth: '100%',\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        whiteSpace: 'nowrap'\n    }\n});\n\nmodule.exports = Text;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdGV4dC5qcz83N2JjIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBTSxRQUFRLG9CQUFRLENBQVIsQ0FBUjs7ZUFDc0Isb0JBQVEsR0FBUjs7SUFBcEI7SUFBWTs7O0FBRXBCLElBQU0sT0FBTyxNQUFNLFdBQU4sQ0FBa0I7O0FBQzNCLDhCQUFTO3FCQUMwQixLQUFLLEtBQUwsQ0FEMUI7WUFDRSxxQ0FERjtZQUNpQixxQkFEakI7OztBQUdMLFlBQU0sWUFBWSxJQUNkLE9BQU8sT0FBUCxFQUNBLEtBRmMsRUFHZCxrQkFBa0IsQ0FBbEIsSUFBdUIsT0FBTyxlQUFQLENBSHJCLENBSEQ7O0FBU0wsZUFBTzs7Y0FBTSxXQUFXLFNBQVgsRUFBTjtZQUNGLEtBQUssS0FBTCxDQUFXLFFBQVg7U0FETCxDQVRLO0tBRGtCO0NBQWxCLENBQVA7OztBQWlCTixJQUFNLFNBQVMsV0FBVyxNQUFYLENBQWtCO0FBQzdCLGFBQVM7QUFDTCxlQUFPLFNBQVA7QUFDQSxpQkFBUyxRQUFUO0FBQ0EsY0FBTSxTQUFOO0FBQ0EsZ0JBQVEsQ0FBUjtBQUNBLGlCQUFTLENBQVQ7QUFDQSw0QkFBb0IsTUFBcEI7QUFDQSxrQkFBVSxZQUFWO0tBUEo7QUFTQSxxQkFBaUI7QUFDYixrQkFBVSxNQUFWO0FBQ0Esa0JBQVUsUUFBVjtBQUNBLHNCQUFjLFVBQWQ7QUFDQSxvQkFBWSxRQUFaO0tBSko7Q0FWVyxDQUFUOztBQWtCTixPQUFPLE9BQVAsR0FBaUIsSUFBakIiLCJmaWxlIjoiMjEzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuY29uc3QgeyBTdHlsZVNoZWV0LCBjc3MgfSA9IHJlcXVpcmUoJ2FwaHJvZGl0ZScpO1xuXG5jb25zdCBUZXh0ID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICAgIHJlbmRlcigpIHtcbiAgICAgICAgY29uc3Qge251bWJlck9mTGluZXMsIHN0eWxlfSA9IHRoaXMucHJvcHM7XG5cbiAgICAgICAgY29uc3QgY2xhc3NOYW1lID0gY3NzKFxuICAgICAgICAgICAgc3R5bGVzLmluaXRpYWwsXG4gICAgICAgICAgICBzdHlsZSxcbiAgICAgICAgICAgIG51bWJlck9mTGluZXMgPT09IDEgJiYgc3R5bGVzLnNpbmdsZUxpbmVTdHlsZVxuICAgICAgICApO1xuXG4gICAgICAgIHJldHVybiA8c3BhbiBjbGFzc05hbWU9e2NsYXNzTmFtZX0+XG4gICAgICAgICAgICB7dGhpcy5wcm9wcy5jaGlsZHJlbn1cbiAgICAgICAgPC9zcGFuPjtcbiAgICB9XG59KTtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL25lY29sYXMvcmVhY3QtbmF0aXZlLXdlYi9ibG9iL21hc3Rlci9zcmMvY29tcG9uZW50cy9UZXh0L2luZGV4LmpzXG5jb25zdCBzdHlsZXMgPSBTdHlsZVNoZWV0LmNyZWF0ZSh7XG4gICAgaW5pdGlhbDoge1xuICAgICAgICBjb2xvcjogJ2luaGVyaXQnLFxuICAgICAgICBkaXNwbGF5OiAnaW5saW5lJyxcbiAgICAgICAgZm9udDogJ2luaGVyaXQnLFxuICAgICAgICBtYXJnaW46IDAsXG4gICAgICAgIHBhZGRpbmc6IDAsXG4gICAgICAgIHRleHREZWNvcmF0aW9uTGluZTogJ25vbmUnLFxuICAgICAgICB3b3JkV3JhcDogJ2JyZWFrLXdvcmQnXG4gICAgfSxcbiAgICBzaW5nbGVMaW5lU3R5bGU6IHtcbiAgICAgICAgbWF4V2lkdGg6ICcxMDAlJyxcbiAgICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgICB0ZXh0T3ZlcmZsb3c6ICdlbGxpcHNpcycsXG4gICAgICAgIHdoaXRlU3BhY2U6ICdub3dyYXAnXG4gICAgfVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gVGV4dDtcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL3RleHQuanNcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9");

/***/ },

/***/ 214:
/***/ function(module, exports) {

	eval("/**\n * MathQuill v0.10.1               http://mathquill.com\n * by Han, Jeanine, and Mary  maintainers@mathquill.com\n *\n * This Source Code Form is subject to the terms of the\n * Mozilla Public License, v. 2.0. If a copy of the MPL\n * was not distributed with this file, You can obtain\n * one at http://mozilla.org/MPL/2.0/.\n */\n\n(function() {\n\nvar jQuery = window.jQuery,\n  undefined,\n  mqCmdId = 'mathquill-command-id',\n  mqBlockId = 'mathquill-block-id',\n  min = Math.min,\n  max = Math.max;\n\nfunction noop() {}\n\n/**\n * A utility higher-order function that makes defining variadic\n * functions more convenient by letting you essentially define functions\n * with the last argument as a splat, i.e. the last argument \"gathers up\"\n * remaining arguments to the function:\n *   var doStuff = variadic(function(first, rest) { return rest; });\n *   doStuff(1, 2, 3); // => [2, 3]\n */\nvar __slice = [].slice;\nfunction variadic(fn) {\n  var numFixedArgs = fn.length - 1;\n  return function() {\n    var args = __slice.call(arguments, 0, numFixedArgs);\n    var varArg = __slice.call(arguments, numFixedArgs);\n    return fn.apply(this, args.concat([ varArg ]));\n  };\n}\n\n/**\n * A utility higher-order function that makes combining object-oriented\n * programming and functional programming techniques more convenient:\n * given a method name and any number of arguments to be bound, returns\n * a function that calls it's first argument's method of that name (if\n * it exists) with the bound arguments and any additional arguments that\n * are passed:\n *   var sendMethod = send('method', 1, 2);\n *   var obj = { method: function() { return Array.apply(this, arguments); } };\n *   sendMethod(obj, 3, 4); // => [1, 2, 3, 4]\n *   // or more specifically,\n *   var obj2 = { method: function(one, two, three) { return one*two + three; } };\n *   sendMethod(obj2, 3); // => 5\n *   sendMethod(obj2, 4); // => 6\n */\nvar send = variadic(function(method, args) {\n  return variadic(function(obj, moreArgs) {\n    if (method in obj) return obj[method].apply(obj, args.concat(moreArgs));\n  });\n});\n\n/**\n * A utility higher-order function that creates \"implicit iterators\"\n * from \"generators\": given a function that takes in a sole argument,\n * a \"yield_\" function, that calls \"yield_\" repeatedly with an object as\n * a sole argument (presumably objects being iterated over), returns\n * a function that calls it's first argument on each of those objects\n * (if the first argument is a function, it is called repeatedly with\n * each object as the first argument, otherwise it is stringified and\n * the method of that name is called on each object (if such a method\n * exists)), passing along all additional arguments:\n *   var a = [\n *     { method: function(list) { list.push(1); } },\n *     { method: function(list) { list.push(2); } },\n *     { method: function(list) { list.push(3); } }\n *   ];\n *   a.each = iterator(function(yield_) {\n *     for (var i in this) yield_(this[i]);\n *   });\n *   var list = [];\n *   a.each('method', list);\n *   list; // => [1, 2, 3]\n *   // Note that the for-in loop will yield 'each', but 'each' maps to\n *   // the function object created by iterator() which does not have a\n *   // .method() method, so that just fails silently.\n */\nfunction iterator(generator) {\n  return variadic(function(fn, args) {\n    if (typeof fn !== 'function') fn = send(fn);\n    var yield_ = function(obj) { return fn.apply(obj, [ obj ].concat(args)); };\n    return generator.call(this, yield_);\n  });\n}\n\n/**\n * sugar to make defining lots of commands easier.\n * TODO: rethink this.\n */\nfunction bind(cons /*, args... */) {\n  var args = __slice.call(arguments, 1);\n  return function() {\n    return cons.apply(this, args);\n  };\n}\n\n/**\n * a development-only debug method.  This definition and all\n * calls to `pray` will be stripped from the minified\n * build of mathquill.\n *\n * This function must be called by name to be removed\n * at compile time.  Do not define another function\n * with the same name, and only call this function by\n * name.\n */\nfunction pray(message, cond) {\n  if (!cond) throw new Error('prayer failed: '+message);\n}\nvar P = (function(prototype, ownProperty, undefined) {\n  // helper functions that also help minification\n  function isObject(o) { return typeof o === 'object'; }\n  function isFunction(f) { return typeof f === 'function'; }\n\n  // used to extend the prototypes of superclasses (which might not\n  // have `.Bare`s)\n  function SuperclassBare() {}\n\n  return function P(_superclass /* = Object */, definition) {\n    // handle the case where no superclass is given\n    if (definition === undefined) {\n      definition = _superclass;\n      _superclass = Object;\n    }\n\n    // C is the class to be returned.\n    //\n    // It delegates to instantiating an instance of `Bare`, so that it\n    // will always return a new instance regardless of the calling\n    // context.\n    //\n    //  TODO: the Chrome inspector shows all created objects as `C`\n    //        rather than `Object`.  Setting the .name property seems to\n    //        have no effect.  Is there a way to override this behavior?\n    function C() {\n      var self = new Bare;\n      if (isFunction(self.init)) self.init.apply(self, arguments);\n      return self;\n    }\n\n    // C.Bare is a class with a noop constructor.  Its prototype is the\n    // same as C, so that instances of C.Bare are also instances of C.\n    // New objects can be allocated without initialization by calling\n    // `new MyClass.Bare`.\n    function Bare() {}\n    C.Bare = Bare;\n\n    // Set up the prototype of the new class.\n    var _super = SuperclassBare[prototype] = _superclass[prototype];\n    var proto = Bare[prototype] = C[prototype] = C.p = new SuperclassBare;\n\n    // other variables, as a minifier optimization\n    var extensions;\n\n\n    // set the constructor property on the prototype, for convenience\n    proto.constructor = C;\n\n    C.mixin = function(def) {\n      Bare[prototype] = C[prototype] = P(C, def)[prototype];\n      return C;\n    }\n\n    return (C.open = function(def) {\n      extensions = {};\n\n      if (isFunction(def)) {\n        // call the defining function with all the arguments you need\n        // extensions captures the return value.\n        extensions = def.call(C, proto, _super, C, _superclass);\n      }\n      else if (isObject(def)) {\n        // if you passed an object instead, we'll take it\n        extensions = def;\n      }\n\n      // ...and extend it\n      if (isObject(extensions)) {\n        for (var ext in extensions) {\n          if (ownProperty.call(extensions, ext)) {\n            proto[ext] = extensions[ext];\n          }\n        }\n      }\n\n      // if there's no init, we assume we're inheriting a non-pjs class, so\n      // we default to applying the superclass's constructor.\n      if (!isFunction(proto.init)) {\n        proto.init = _superclass;\n      }\n\n      return C;\n    })(definition);\n  }\n\n  // as a minifier optimization, we've closured in a few helper functions\n  // and the string 'prototype' (C[p] is much shorter than C.prototype)\n})('prototype', ({}).hasOwnProperty);\n/*************************************************\n * Base classes of edit tree-related objects\n *\n * Only doing tree node manipulation via these\n * adopt/ disown methods guarantees well-formedness\n * of the tree.\n ************************************************/\n\n// L = 'left'\n// R = 'right'\n//\n// the contract is that they can be used as object properties\n// and (-L) === R, and (-R) === L.\nvar L = -1;\nvar R = 1;\n\nfunction prayDirection(dir) {\n  pray('a direction was passed', dir === L || dir === R);\n}\n\n/**\n * Tiny extension of jQuery adding directionalized DOM manipulation methods.\n *\n * Funny how Pjs v3 almost just works with `jQuery.fn.init`.\n *\n * jQuery features that don't work on $:\n *   - jQuery.*, like jQuery.ajax, obviously (Pjs doesn't and shouldn't\n *                                            copy constructor properties)\n *\n *   - jQuery(function), the shortcut for `jQuery(document).ready(function)`,\n *     because `jQuery.fn.init` is idiosyncratic and Pjs doing, essentially,\n *     `jQuery.fn.init.apply(this, arguments)` isn't quite right, you need:\n *\n *       _.init = function(s, c) { jQuery.fn.init.call(this, s, c, $(document)); };\n *\n *     if you actually give a shit (really, don't bother),\n *     see https://github.com/jquery/jquery/blob/1.7.2/src/core.js#L889\n *\n *   - jQuery(selector), because jQuery translates that to\n *     `jQuery(document).find(selector)`, but Pjs doesn't (should it?) let\n *     you override the result of a constructor call\n *       + note that because of the jQuery(document) shortcut-ness, there's also\n *         the 3rd-argument-needs-to-be-`$(document)` thing above, but the fix\n *         for that (as can be seen above) is really easy. This problem requires\n *         a way more intrusive fix\n *\n * And that's it! Everything else just magically works because jQuery internally\n * uses `this.constructor()` everywhere (hence calling `$`), but never ever does\n * `this.constructor.find` or anything like that, always doing `jQuery.find`.\n */\nvar $ = P(jQuery, function(_) {\n  _.insDirOf = function(dir, el) {\n    return dir === L ?\n      this.insertBefore(el.first()) : this.insertAfter(el.last());\n  };\n  _.insAtDirEnd = function(dir, el) {\n    return dir === L ? this.prependTo(el) : this.appendTo(el);\n  };\n});\n\nvar Point = P(function(_) {\n  _.parent = 0;\n  _[L] = 0;\n  _[R] = 0;\n\n  _.init = function(parent, leftward, rightward) {\n    this.parent = parent;\n    this[L] = leftward;\n    this[R] = rightward;\n  };\n\n  this.copy = function(pt) {\n    return Point(pt.parent, pt[L], pt[R]);\n  };\n});\n\n/**\n * MathQuill virtual-DOM tree-node abstract base class\n */\nvar Node = P(function(_) {\n  _[L] = 0;\n  _[R] = 0\n  _.parent = 0;\n\n  var id = 0;\n  function uniqueNodeId() { return id += 1; }\n  this.byId = {};\n\n  _.init = function() {\n    this.id = uniqueNodeId();\n    Node.byId[this.id] = this;\n\n    this.ends = {};\n    this.ends[L] = 0;\n    this.ends[R] = 0;\n  };\n\n  _.dispose = function() { delete Node.byId[this.id]; };\n\n  _.toString = function() { return '{{ MathQuill Node #'+this.id+' }}'; };\n\n  _.jQ = $();\n  _.jQadd = function(jQ) { return this.jQ = this.jQ.add(jQ); };\n  _.jQize = function(jQ) {\n    // jQuery-ifies this.html() and links up the .jQ of all corresponding Nodes\n    var jQ = $(jQ || this.html());\n\n    function jQadd(el) {\n      if (el.getAttribute) {\n        var cmdId = el.getAttribute('mathquill-command-id');\n        var blockId = el.getAttribute('mathquill-block-id');\n        if (cmdId) Node.byId[cmdId].jQadd(el);\n        if (blockId) Node.byId[blockId].jQadd(el);\n      }\n      for (el = el.firstChild; el; el = el.nextSibling) {\n        jQadd(el);\n      }\n    }\n\n    for (var i = 0; i < jQ.length; i += 1) jQadd(jQ[i]);\n    return jQ;\n  };\n\n  _.createDir = function(dir, cursor) {\n    prayDirection(dir);\n    var node = this;\n    node.jQize();\n    node.jQ.insDirOf(dir, cursor.jQ);\n    cursor[dir] = node.adopt(cursor.parent, cursor[L], cursor[R]);\n    return node;\n  };\n  _.createLeftOf = function(el) { return this.createDir(L, el); };\n\n  _.selectChildren = function(leftEnd, rightEnd) {\n    return Selection(leftEnd, rightEnd);\n  };\n\n  _.bubble = iterator(function(yield_) {\n    for (var ancestor = this; ancestor; ancestor = ancestor.parent) {\n      var result = yield_(ancestor);\n      if (result === false) break;\n    }\n\n    return this;\n  });\n\n  _.postOrder = iterator(function(yield_) {\n    (function recurse(descendant) {\n      descendant.eachChild(recurse);\n      yield_(descendant);\n    })(this);\n\n    return this;\n  });\n\n  _.isEmpty = function() {\n    return this.ends[L] === 0 && this.ends[R] === 0;\n  };\n\n  _.children = function() {\n    return Fragment(this.ends[L], this.ends[R]);\n  };\n\n  _.eachChild = function() {\n    var children = this.children();\n    children.each.apply(children, arguments);\n    return this;\n  };\n\n  _.foldChildren = function(fold, fn) {\n    return this.children().fold(fold, fn);\n  };\n\n  _.withDirAdopt = function(dir, parent, withDir, oppDir) {\n    Fragment(this, this).withDirAdopt(dir, parent, withDir, oppDir);\n    return this;\n  };\n\n  _.adopt = function(parent, leftward, rightward) {\n    Fragment(this, this).adopt(parent, leftward, rightward);\n    return this;\n  };\n\n  _.disown = function() {\n    Fragment(this, this).disown();\n    return this;\n  };\n\n  _.remove = function() {\n    this.jQ.remove();\n    this.postOrder('dispose');\n    return this.disown();\n  };\n});\n\nfunction prayWellFormed(parent, leftward, rightward) {\n  pray('a parent is always present', parent);\n  pray('leftward is properly set up', (function() {\n    // either it's empty and `rightward` is the left end child (possibly empty)\n    if (!leftward) return parent.ends[L] === rightward;\n\n    // or it's there and its [R] and .parent are properly set up\n    return leftward[R] === rightward && leftward.parent === parent;\n  })());\n\n  pray('rightward is properly set up', (function() {\n    // either it's empty and `leftward` is the right end child (possibly empty)\n    if (!rightward) return parent.ends[R] === leftward;\n\n    // or it's there and its [L] and .parent are properly set up\n    return rightward[L] === leftward && rightward.parent === parent;\n  })());\n}\n\n\n/**\n * An entity outside the virtual tree with one-way pointers (so it's only a\n * \"view\" of part of the tree, not an actual node/entity in the tree) that\n * delimits a doubly-linked list of sibling nodes.\n * It's like a fanfic love-child between HTML DOM DocumentFragment and the Range\n * classes: like DocumentFragment, its contents must be sibling nodes\n * (unlike Range, whose contents are arbitrary contiguous pieces of subtrees),\n * but like Range, it has only one-way pointers to its contents, its contents\n * have no reference to it and in fact may still be in the visible tree (unlike\n * DocumentFragment, whose contents must be detached from the visible tree\n * and have their 'parent' pointers set to the DocumentFragment).\n */\nvar Fragment = P(function(_) {\n  _.init = function(withDir, oppDir, dir) {\n    if (dir === undefined) dir = L;\n    prayDirection(dir);\n\n    pray('no half-empty fragments', !withDir === !oppDir);\n\n    this.ends = {};\n\n    if (!withDir) return;\n\n    pray('withDir is passed to Fragment', withDir instanceof Node);\n    pray('oppDir is passed to Fragment', oppDir instanceof Node);\n    pray('withDir and oppDir have the same parent',\n         withDir.parent === oppDir.parent);\n\n    this.ends[dir] = withDir;\n    this.ends[-dir] = oppDir;\n\n    // To build the jquery collection for a fragment, accumulate elements\n    // into an array and then call jQ.add once on the result. jQ.add sorts the\n    // collection according to document order each time it is called, so\n    // building a collection by folding jQ.add directly takes more than\n    // quadratic time in the number of elements.\n    //\n    // https://github.com/jquery/jquery/blob/2.1.4/src/traversing.js#L112\n    var accum = this.fold([], function (accum, el) {\n      accum.push.apply(accum, el.jQ.get());\n      return accum;\n    });\n\n    this.jQ = this.jQ.add(accum);\n  };\n  _.jQ = $();\n\n  // like Cursor::withDirInsertAt(dir, parent, withDir, oppDir)\n  _.withDirAdopt = function(dir, parent, withDir, oppDir) {\n    return (dir === L ? this.adopt(parent, withDir, oppDir)\n                      : this.adopt(parent, oppDir, withDir));\n  };\n  _.adopt = function(parent, leftward, rightward) {\n    prayWellFormed(parent, leftward, rightward);\n\n    var self = this;\n    self.disowned = false;\n\n    var leftEnd = self.ends[L];\n    if (!leftEnd) return this;\n\n    var rightEnd = self.ends[R];\n\n    if (leftward) {\n      // NB: this is handled in the ::each() block\n      // leftward[R] = leftEnd\n    } else {\n      parent.ends[L] = leftEnd;\n    }\n\n    if (rightward) {\n      rightward[L] = rightEnd;\n    } else {\n      parent.ends[R] = rightEnd;\n    }\n\n    self.ends[R][R] = rightward;\n\n    self.each(function(el) {\n      el[L] = leftward;\n      el.parent = parent;\n      if (leftward) leftward[R] = el;\n\n      leftward = el;\n    });\n\n    return self;\n  };\n\n  _.disown = function() {\n    var self = this;\n    var leftEnd = self.ends[L];\n\n    // guard for empty and already-disowned fragments\n    if (!leftEnd || self.disowned) return self;\n\n    self.disowned = true;\n\n    var rightEnd = self.ends[R]\n    var parent = leftEnd.parent;\n\n    prayWellFormed(parent, leftEnd[L], leftEnd);\n    prayWellFormed(parent, rightEnd, rightEnd[R]);\n\n    if (leftEnd[L]) {\n      leftEnd[L][R] = rightEnd[R];\n    } else {\n      parent.ends[L] = rightEnd[R];\n    }\n\n    if (rightEnd[R]) {\n      rightEnd[R][L] = leftEnd[L];\n    } else {\n      parent.ends[R] = leftEnd[L];\n    }\n\n    return self;\n  };\n\n  _.remove = function() {\n    this.jQ.remove();\n    this.each('postOrder', 'dispose');\n    return this.disown();\n  };\n\n  _.each = iterator(function(yield_) {\n    var self = this;\n    var el = self.ends[L];\n    if (!el) return self;\n\n    for (; el !== self.ends[R][R]; el = el[R]) {\n      var result = yield_(el);\n      if (result === false) break;\n    }\n\n    return self;\n  });\n\n  _.fold = function(fold, fn) {\n    this.each(function(el) {\n      fold = fn.call(this, fold, el);\n    });\n\n    return fold;\n  };\n});\n\n\n/**\n * Registry of LaTeX commands and commands created when typing\n * a single character.\n *\n * (Commands are all subclasses of Node.)\n */\nvar LatexCmds = {}, CharCmds = {};\n/********************************************\n * Cursor and Selection \"singleton\" classes\n *******************************************/\n\n/* The main thing that manipulates the Math DOM. Makes sure to manipulate the\nHTML DOM to match. */\n\n/* Sort of singletons, since there should only be one per editable math\ntextbox, but any one HTML document can contain many such textboxes, so any one\nJS environment could actually contain many instances. */\n\n//A fake cursor in the fake textbox that the math is rendered in.\nvar Cursor = P(Point, function(_) {\n  _.init = function(initParent, options) {\n    this.parent = initParent;\n    this.options = options;\n\n    var jQ = this.jQ = this._jQ = $('<span class=\"mq-cursor\">&#8203;</span>');\n    //closured for setInterval\n    this.blink = function(){ jQ.toggleClass('mq-blink'); };\n\n    this.upDownCache = {};\n  };\n\n  _.show = function() {\n    this.jQ = this._jQ.removeClass('mq-blink');\n    if ('intervalId' in this) //already was shown, just restart interval\n      clearInterval(this.intervalId);\n    else { //was hidden and detached, insert this.jQ back into HTML DOM\n      if (this[R]) {\n        if (this.selection && this.selection.ends[L][L] === this[L])\n          this.jQ.insertBefore(this.selection.jQ);\n        else\n          this.jQ.insertBefore(this[R].jQ.first());\n      }\n      else\n        this.jQ.appendTo(this.parent.jQ);\n      this.parent.focus();\n    }\n    this.intervalId = setInterval(this.blink, 500);\n    return this;\n  };\n  _.hide = function() {\n    if ('intervalId' in this)\n      clearInterval(this.intervalId);\n    delete this.intervalId;\n    this.jQ.detach();\n    this.jQ = $();\n    return this;\n  };\n\n  _.withDirInsertAt = function(dir, parent, withDir, oppDir) {\n    var oldParent = this.parent;\n    this.parent = parent;\n    this[dir] = withDir;\n    this[-dir] = oppDir;\n    // by contract, .blur() is called after all has been said and done\n    // and the cursor has actually been moved\n    if (oldParent !== parent && oldParent.blur) oldParent.blur();\n  };\n  _.insDirOf = function(dir, el) {\n    prayDirection(dir);\n    this.jQ.insDirOf(dir, el.jQ);\n    this.withDirInsertAt(dir, el.parent, el[dir], el);\n    this.parent.jQ.addClass('mq-hasCursor');\n    return this;\n  };\n  _.insLeftOf = function(el) { return this.insDirOf(L, el); };\n  _.insRightOf = function(el) { return this.insDirOf(R, el); };\n\n  _.insAtDirEnd = function(dir, el) {\n    prayDirection(dir);\n    this.jQ.insAtDirEnd(dir, el.jQ);\n    this.withDirInsertAt(dir, el, 0, el.ends[dir]);\n    el.focus();\n    return this;\n  };\n  _.insAtLeftEnd = function(el) { return this.insAtDirEnd(L, el); };\n  _.insAtRightEnd = function(el) { return this.insAtDirEnd(R, el); };\n\n  /**\n   * jump up or down from one block Node to another:\n   * - cache the current Point in the node we're jumping from\n   * - check if there's a Point in it cached for the node we're jumping to\n   *   + if so put the cursor there,\n   *   + if not seek a position in the node that is horizontally closest to\n   *     the cursor's current position\n   */\n  _.jumpUpDown = function(from, to) {\n    var self = this;\n    self.upDownCache[from.id] = Point.copy(self);\n    var cached = self.upDownCache[to.id];\n    if (cached) {\n      cached[R] ? self.insLeftOf(cached[R]) : self.insAtRightEnd(cached.parent);\n    }\n    else {\n      var pageX = self.offset().left;\n      to.seek(pageX, self);\n    }\n  };\n  _.offset = function() {\n    //in Opera 11.62, .getBoundingClientRect() and hence jQuery::offset()\n    //returns all 0's on inline elements with negative margin-right (like\n    //the cursor) at the end of their parent, so temporarily remove the\n    //negative margin-right when calling jQuery::offset()\n    //Opera bug DSK-360043\n    //http://bugs.jquery.com/ticket/11523\n    //https://github.com/jquery/jquery/pull/717\n    var self = this, offset = self.jQ.removeClass('mq-cursor').offset();\n    self.jQ.addClass('mq-cursor');\n    return offset;\n  }\n  _.unwrapGramp = function() {\n    var gramp = this.parent.parent;\n    var greatgramp = gramp.parent;\n    var rightward = gramp[R];\n    var cursor = this;\n\n    var leftward = gramp[L];\n    gramp.disown().eachChild(function(uncle) {\n      if (uncle.isEmpty()) return;\n\n      uncle.children()\n        .adopt(greatgramp, leftward, rightward)\n        .each(function(cousin) {\n          cousin.jQ.insertBefore(gramp.jQ.first());\n        })\n      ;\n\n      leftward = uncle.ends[R];\n    });\n\n    if (!this[R]) { //then find something to be rightward to insLeftOf\n      if (this[L])\n        this[R] = this[L][R];\n      else {\n        while (!this[R]) {\n          this.parent = this.parent[R];\n          if (this.parent)\n            this[R] = this.parent.ends[L];\n          else {\n            this[R] = gramp[R];\n            this.parent = greatgramp;\n            break;\n          }\n        }\n      }\n    }\n    if (this[R])\n      this.insLeftOf(this[R]);\n    else\n      this.insAtRightEnd(greatgramp);\n\n    gramp.jQ.remove();\n\n    if (gramp[L].siblingDeleted) gramp[L].siblingDeleted(cursor.options, R);\n    if (gramp[R].siblingDeleted) gramp[R].siblingDeleted(cursor.options, L);\n  };\n  _.startSelection = function() {\n    var anticursor = this.anticursor = Point.copy(this);\n    var ancestors = anticursor.ancestors = {}; // a map from each ancestor of\n      // the anticursor, to its child that is also an ancestor; in other words,\n      // the anticursor's ancestor chain in reverse order\n    for (var ancestor = anticursor; ancestor.parent; ancestor = ancestor.parent) {\n      ancestors[ancestor.parent.id] = ancestor;\n    }\n  };\n  _.endSelection = function() {\n    delete this.anticursor;\n  };\n  _.select = function() {\n    var anticursor = this.anticursor;\n    if (this[L] === anticursor[L] && this.parent === anticursor.parent) return false;\n\n    // Find the lowest common ancestor (`lca`), and the ancestor of the cursor\n    // whose parent is the LCA (which'll be an end of the selection fragment).\n    for (var ancestor = this; ancestor.parent; ancestor = ancestor.parent) {\n      if (ancestor.parent.id in anticursor.ancestors) {\n        var lca = ancestor.parent;\n        break;\n      }\n    }\n    pray('cursor and anticursor in the same tree', lca);\n    // The cursor and the anticursor should be in the same tree, because the\n    // mousemove handler attached to the document, unlike the one attached to\n    // the root HTML DOM element, doesn't try to get the math tree node of the\n    // mousemove target, and Cursor::seek() based solely on coordinates stays\n    // within the tree of `this` cursor's root.\n\n    // The other end of the selection fragment, the ancestor of the anticursor\n    // whose parent is the LCA.\n    var antiAncestor = anticursor.ancestors[lca.id];\n\n    // Now we have two either Nodes or Points, guaranteed to have a common\n    // parent and guaranteed that if both are Points, they are not the same,\n    // and we have to figure out which is the left end and which the right end\n    // of the selection.\n    var leftEnd, rightEnd, dir = R;\n\n    // This is an extremely subtle algorithm.\n    // As a special case, `ancestor` could be a Point and `antiAncestor` a Node\n    // immediately to `ancestor`'s left.\n    // In all other cases,\n    // - both Nodes\n    // - `ancestor` a Point and `antiAncestor` a Node\n    // - `ancestor` a Node and `antiAncestor` a Point\n    // `antiAncestor[R] === rightward[R]` for some `rightward` that is\n    // `ancestor` or to its right, if and only if `antiAncestor` is to\n    // the right of `ancestor`.\n    if (ancestor[L] !== antiAncestor) {\n      for (var rightward = ancestor; rightward; rightward = rightward[R]) {\n        if (rightward[R] === antiAncestor[R]) {\n          dir = L;\n          leftEnd = ancestor;\n          rightEnd = antiAncestor;\n          break;\n        }\n      }\n    }\n    if (dir === R) {\n      leftEnd = antiAncestor;\n      rightEnd = ancestor;\n    }\n\n    // only want to select Nodes up to Points, can't select Points themselves\n    if (leftEnd instanceof Point) leftEnd = leftEnd[R];\n    if (rightEnd instanceof Point) rightEnd = rightEnd[L];\n\n    this.hide().selection = lca.selectChildren(leftEnd, rightEnd);\n    this.insDirOf(dir, this.selection.ends[dir]);\n    this.selectionChanged();\n    console.log(this);\n    return true;\n  };\n\n  _.clearSelection = function() {\n    if (this.selection) {\n      this.selection.clear();\n      delete this.selection;\n      this.selectionChanged();\n    }\n    return this;\n  };\n  _.deleteSelection = function() {\n    if (!this.selection) return;\n\n    this[L] = this.selection.ends[L][L];\n    this[R] = this.selection.ends[R][R];\n    this.selection.remove();\n    this.selectionChanged();\n    delete this.selection;\n  };\n  _.replaceSelection = function() {\n    var seln = this.selection;\n    if (seln) {\n      this[L] = seln.ends[L][L];\n      this[R] = seln.ends[R][R];\n      delete this.selection;\n    }\n    return seln;\n  };\n});\n\nvar Selection = P(Fragment, function(_, super_) {\n  _.init = function() {\n    super_.init.apply(this, arguments);\n    this.jQ = this.jQ.wrapAll('<span class=\"mq-selection\"></span>').parent();\n      //can't do wrapAll(this.jQ = $(...)) because wrapAll will clone it\n  };\n  _.adopt = function() {\n    this.jQ.replaceWith(this.jQ = this.jQ.children());\n    return super_.adopt.apply(this, arguments);\n  };\n  _.clear = function() {\n    // using the browser's native .childNodes property so that we\n    // don't discard text nodes.\n    this.jQ.replaceWith(this.jQ[0].childNodes);\n    return this;\n  };\n  _.join = function(methodName) {\n    return this.fold('', function(fold, child) {\n      return fold + child[methodName]();\n    });\n  };\n});\n/*********************************************\n * Controller for a MathQuill instance,\n * on which services are registered with\n *\n *   Controller.open(function(_) { ... });\n *\n ********************************************/\n\nvar Controller = P(function(_) {\n  _.init = function(root, container, options) {\n    this.id = root.id;\n    this.data = {};\n\n    this.root = root;\n    this.container = container;\n    this.options = options;\n\n    root.controller = this;\n\n    this.cursor = root.cursor = Cursor(root, options);\n    // TODO: stop depending on root.cursor, and rm it\n  };\n\n  _.handle = function(name, dir) {\n    var handlers = this.options.handlers;\n    if (handlers && handlers.fns[name]) {\n      var mq = handlers.APIClasses[this.KIND_OF_MQ](this);\n      if (dir === L || dir === R) handlers.fns[name](dir, mq);\n      else handlers.fns[name](mq);\n    }\n  };\n\n  var notifyees = [];\n  this.onNotify = function(f) { notifyees.push(f); };\n  _.notify = function() {\n    for (var i = 0; i < notifyees.length; i += 1) {\n      notifyees[i].apply(this.cursor, arguments);\n    }\n    return this;\n  };\n});\n/*********************************************************\n * The publicly exposed MathQuill API.\n ********************************************************/\n\nvar API = {}, Options = P(), optionProcessors = {}, Progenote = P(), EMBEDS = {};\n\n/**\n * Interface Versioning (#459, #495) to allow us to virtually guarantee\n * backcompat. v0.10.x introduces it, so for now, don't completely break the\n * API for people who don't know about it, just complain with console.warn().\n *\n * The methods are shimmed in outro.js so that MQ.MathField.prototype etc can\n * be accessed.\n */\nfunction insistOnInterVer() {\n  if (window.console) console.warn(\n    'You are using the MathQuill API without specifying an interface version, ' +\n    'which will fail in v1.0.0. You can fix this easily by doing this before ' +\n    'doing anything else:\\n' +\n    '\\n' +\n    '    MathQuill = MathQuill.getInterface(1);\\n' +\n    '    // now MathQuill.MathField() works like it used to\\n' +\n    '\\n' +\n    'See also the \"`dev` branch (2014\\u20132015) \\u2192 v0.10.0 Migration Guide\" at\\n' +\n    '  https://github.com/mathquill/mathquill/wiki/%60dev%60-branch-(2014%E2%80%932015)-%E2%86%92-v0.10.0-Migration-Guide'\n  );\n}\n// globally exported API object\nfunction MathQuill(el) {\n  insistOnInterVer();\n  return MQ1(el);\n};\nMathQuill.prototype = Progenote.p;\nMathQuill.interfaceVersion = function(v) {\n  // shim for #459-era interface versioning (ended with #495)\n  if (v !== 1) throw 'Only interface version 1 supported. You specified: ' + v;\n  insistOnInterVer = function() {\n    if (window.console) console.warn(\n      'You called MathQuill.interfaceVersion(1); to specify the interface ' +\n      'version, which will fail in v1.0.0. You can fix this easily by doing ' +\n      'this before doing anything else:\\n' +\n      '\\n' +\n      '    MathQuill = MathQuill.getInterface(1);\\n' +\n      '    // now MathQuill.MathField() works like it used to\\n' +\n      '\\n' +\n      'See also the \"`dev` branch (2014\\u20132015) \\u2192 v0.10.0 Migration Guide\" at\\n' +\n      '  https://github.com/mathquill/mathquill/wiki/%60dev%60-branch-(2014%E2%80%932015)-%E2%86%92-v0.10.0-Migration-Guide'\n    );\n  };\n  insistOnInterVer();\n  return MathQuill;\n};\nMathQuill.getInterface = getInterface;\n\nvar MIN = getInterface.MIN = 1, MAX = getInterface.MAX = 2;\nfunction getInterface(v) {\n  if (!(MIN <= v && v <= MAX)) throw 'Only interface versions between ' +\n    MIN + ' and ' + MAX + ' supported. You specified: ' + v;\n\n  /**\n   * Function that takes an HTML element and, if it's the root HTML element of a\n   * static math or math or text field, returns an API object for it (else, null).\n   *\n   *   var mathfield = MQ.MathField(mathFieldSpan);\n   *   assert(MQ(mathFieldSpan).id === mathfield.id);\n   *   assert(MQ(mathFieldSpan).id === MQ(mathFieldSpan).id);\n   *\n   */\n  function MQ(el) {\n    if (!el || !el.nodeType) return null; // check that `el` is a HTML element, using the\n      // same technique as jQuery: https://github.com/jquery/jquery/blob/679536ee4b7a92ae64a5f58d90e9cc38c001e807/src/core/init.js#L92\n    var blockId = $(el).children('.mq-root-block').attr(mqBlockId);\n    var ctrlr = blockId && Node.byId[blockId].controller;\n    return ctrlr ? APIClasses[ctrlr.KIND_OF_MQ](ctrlr) : null;\n  };\n  var APIClasses = {};\n\n  MQ.L = L;\n  MQ.R = R;\n\n  function config(currentOptions, newOptions) {\n    if (newOptions && newOptions.handlers) {\n      newOptions.handlers = { fns: newOptions.handlers, APIClasses: APIClasses };\n    }\n    for (var name in newOptions) if (newOptions.hasOwnProperty(name)) {\n      var value = newOptions[name], processor = optionProcessors[name];\n      currentOptions[name] = (processor ? processor(value) : value);\n    }\n  }\n  MQ.config = function(opts) { config(Options.p, opts); return this; };\n  MQ.registerEmbed = function(name, options) {\n    if (!/^[a-z][a-z0-9]*$/i.test(name)) {\n      throw 'Embed name must start with letter and be only letters and digits';\n    }\n    EMBEDS[name] = options;\n  };\n\n  var AbstractMathQuill = APIClasses.AbstractMathQuill = P(Progenote, function(_) {\n    _.init = function(ctrlr) {\n      this.__controller = ctrlr;\n      this.__options = ctrlr.options;\n      this.id = ctrlr.id;\n      this.data = ctrlr.data;\n    };\n    _.__mathquillify = function(classNames) {\n      var ctrlr = this.__controller, root = ctrlr.root, el = ctrlr.container;\n      ctrlr.createTextarea();\n\n      var contents = el.addClass(classNames).contents().detach();\n      root.jQ =\n        $('<span class=\"mq-root-block\"/>').attr(mqBlockId, root.id).appendTo(el);\n      this.latex(contents.text());\n\n      this.revert = function() {\n        return el.empty().unbind('.mathquill')\n        .removeClass('mq-editable-field mq-math-mode mq-text-mode')\n        .append(contents);\n      };\n    };\n    _.config = function(opts) { config(this.__options, opts); return this; };\n    _.el = function() { return this.__controller.container[0]; };\n    _.text = function() { return this.__controller.exportText(); };\n    _.latex = function(latex) {\n      if (arguments.length > 0) {\n        this.__controller.renderLatexMath(latex);\n        if (this.__controller.blurred) this.__controller.cursor.hide().parent.blur();\n        return this;\n      }\n      return this.__controller.exportLatex();\n    };\n    _.html = function() {\n      return this.__controller.root.jQ.html()\n        .replace(/ mathquill-(?:command|block)-id=\"?\\d+\"?/g, '')\n        .replace(/<span class=\"?mq-cursor( mq-blink)?\"?>.?<\\/span>/i, '')\n        .replace(/ mq-hasCursor|mq-hasCursor ?/, '')\n        .replace(/ class=(\"\"|(?= |>))/g, '');\n    };\n    _.reflow = function() {\n      this.__controller.root.postOrder('reflow');\n      return this;\n    };\n  });\n  MQ.prototype = AbstractMathQuill.prototype;\n\n  APIClasses.EditableField = P(AbstractMathQuill, function(_, super_) {\n    _.__mathquillify = function() {\n      super_.__mathquillify.apply(this, arguments);\n      this.__controller.editable = true;\n      this.__controller.delegateMouseEvents();\n      this.__controller.editablesTextareaEvents();\n      return this;\n    };\n    _.focus = function() { this.__controller.textarea.focus(); return this; };\n    _.blur = function() { this.__controller.textarea.blur(); return this; };\n    _.write = function(latex) {\n      this.__controller.writeLatex(latex);\n      this.__controller.scrollHoriz();\n      if (this.__controller.blurred) this.__controller.cursor.hide().parent.blur();\n      return this;\n    };\n    _.cmd = function(cmd) {\n      var ctrlr = this.__controller.notify(), cursor = ctrlr.cursor;\n      if (/^\\\\[a-z]+$/i.test(cmd)) {\n        cmd = cmd.slice(1);\n        var klass = LatexCmds[cmd];\n        if (klass) {\n          cmd = klass(cmd);\n          if (cursor.selection) cmd.replaces(cursor.replaceSelection());\n          cmd.createLeftOf(cursor.show());\n          this.__controller.scrollHoriz();\n        }\n        else /* TODO: API needs better error reporting */;\n      }\n      else cursor.parent.write(cursor, cmd);\n      if (ctrlr.blurred) cursor.hide().parent.blur();\n      return this;\n    };\n    _.select = function() {\n      var ctrlr = this.__controller;\n      ctrlr.notify('move').cursor.insAtRightEnd(ctrlr.root);\n      while (ctrlr.cursor[L]) ctrlr.selectLeft();\n      return this;\n    };\n    _.clearSelection = function() {\n      this.__controller.cursor.clearSelection();\n      return this;\n    };\n\n    _.moveToDirEnd = function(dir) {\n      this.__controller.notify('move').cursor.insAtDirEnd(dir, this.__controller.root);\n      return this;\n    };\n    _.moveToLeftEnd = function() { return this.moveToDirEnd(L); };\n    _.moveToRightEnd = function() { return this.moveToDirEnd(R); };\n\n    _.keystroke = function(keys) {\n      var keys = keys.replace(/^\\s+|\\s+$/g, '').split(/\\s+/);\n      for (var i = 0; i < keys.length; i += 1) {\n        this.__controller.keystroke(keys[i], { preventDefault: noop });\n      }\n      return this;\n    };\n    _.typedText = function(text) {\n      for (var i = 0; i < text.length; i += 1) this.__controller.typedText(text.charAt(i));\n      return this;\n    };\n    _.dropEmbedded = function(pageX, pageY, options) {\n      var clientX = pageX - $(window).scrollLeft();\n      var clientY = pageY - $(window).scrollTop();\n\n      var el = document.elementFromPoint(clientX, clientY);\n      this.__controller.seek($(el), pageX, pageY);\n      var cmd = Embed().setOptions(options);\n      cmd.createLeftOf(this.__controller.cursor);\n    };\n  });\n  MQ.EditableField = function() { throw \"wtf don't call me, I'm 'abstract'\"; };\n  MQ.EditableField.prototype = APIClasses.EditableField.prototype;\n\n  /**\n   * Export the API functions that MathQuill-ify an HTML element into API objects\n   * of each class. If the element had already been MathQuill-ified but into a\n   * different kind (or it's not an HTML element), return null.\n   */\n  for (var kind in API) (function(kind, defAPIClass) {\n    var APIClass = APIClasses[kind] = defAPIClass(APIClasses);\n    MQ[kind] = function(el, opts) {\n      var mq = MQ(el);\n      if (mq instanceof APIClass || !el || !el.nodeType) return mq;\n      var ctrlr = Controller(APIClass.RootBlock(), $(el), Options());\n      ctrlr.KIND_OF_MQ = kind;\n      return APIClass(ctrlr).__mathquillify(opts, v);\n    };\n    MQ[kind].prototype = APIClass.prototype;\n  }(kind, API[kind]));\n\n  return MQ;\n}\n\nMathQuill.noConflict = function() {\n  window.MathQuill = origMathQuill;\n  return MathQuill;\n};\nvar origMathQuill = window.MathQuill;\nwindow.MathQuill = MathQuill;\n\nfunction RootBlockMixin(_) {\n  var names = 'moveOutOf deleteOutOf selectOutOf upOutOf downOutOf'.split(' ');\n  for (var i = 0; i < names.length; i += 1) (function(name) {\n    _[name] = function(dir) { this.controller.handle(name, dir); };\n  }(names[i]));\n  _.reflow = function() {\n    this.controller.handle('reflow');\n    this.controller.handle('edited');\n    this.controller.handle('edit');\n  };\n}\nvar Parser = P(function(_, super_, Parser) {\n  // The Parser object is a wrapper for a parser function.\n  // Externally, you use one to parse a string by calling\n  //   var result = SomeParser.parse('Me Me Me! Parse Me!');\n  // You should never call the constructor, rather you should\n  // construct your Parser from the base parsers and the\n  // parser combinator methods.\n\n  function parseError(stream, message) {\n    if (stream) {\n      stream = \"'\"+stream+\"'\";\n    }\n    else {\n      stream = 'EOF';\n    }\n\n    throw 'Parse Error: '+message+' at '+stream;\n  }\n\n  _.init = function(body) { this._ = body; };\n\n  _.parse = function(stream) {\n    return this.skip(eof)._(''+stream, success, parseError);\n\n    function success(stream, result) { return result; }\n  };\n\n  // -*- primitive combinators -*- //\n  _.or = function(alternative) {\n    pray('or is passed a parser', alternative instanceof Parser);\n\n    var self = this;\n\n    return Parser(function(stream, onSuccess, onFailure) {\n      return self._(stream, onSuccess, failure);\n\n      function failure(newStream) {\n        return alternative._(stream, onSuccess, onFailure);\n      }\n    });\n  };\n\n  _.then = function(next) {\n    var self = this;\n\n    return Parser(function(stream, onSuccess, onFailure) {\n      return self._(stream, success, onFailure);\n\n      function success(newStream, result) {\n        var nextParser = (next instanceof Parser ? next : next(result));\n        pray('a parser is returned', nextParser instanceof Parser);\n        return nextParser._(newStream, onSuccess, onFailure);\n      }\n    });\n  };\n\n  // -*- optimized iterative combinators -*- //\n  _.many = function() {\n    var self = this;\n\n    return Parser(function(stream, onSuccess, onFailure) {\n      var xs = [];\n      while (self._(stream, success, failure));\n      return onSuccess(stream, xs);\n\n      function success(newStream, x) {\n        stream = newStream;\n        xs.push(x);\n        return true;\n      }\n\n      function failure() {\n        return false;\n      }\n    });\n  };\n\n  _.times = function(min, max) {\n    if (arguments.length < 2) max = min;\n    var self = this;\n\n    return Parser(function(stream, onSuccess, onFailure) {\n      var xs = [];\n      var result = true;\n      var failure;\n\n      for (var i = 0; i < min; i += 1) {\n        result = self._(stream, success, firstFailure);\n        if (!result) return onFailure(stream, failure);\n      }\n\n      for (; i < max && result; i += 1) {\n        result = self._(stream, success, secondFailure);\n      }\n\n      return onSuccess(stream, xs);\n\n      function success(newStream, x) {\n        xs.push(x);\n        stream = newStream;\n        return true;\n      }\n\n      function firstFailure(newStream, msg) {\n        failure = msg;\n        stream = newStream;\n        return false;\n      }\n\n      function secondFailure(newStream, msg) {\n        return false;\n      }\n    });\n  };\n\n  // -*- higher-level combinators -*- //\n  _.result = function(res) { return this.then(succeed(res)); };\n  _.atMost = function(n) { return this.times(0, n); };\n  _.atLeast = function(n) {\n    var self = this;\n    return self.times(n).then(function(start) {\n      return self.many().map(function(end) {\n        return start.concat(end);\n      });\n    });\n  };\n\n  _.map = function(fn) {\n    return this.then(function(result) { return succeed(fn(result)); });\n  };\n\n  _.skip = function(two) {\n    return this.then(function(result) { return two.result(result); });\n  };\n\n  // -*- primitive parsers -*- //\n  var string = this.string = function(str) {\n    var len = str.length;\n    var expected = \"expected '\"+str+\"'\";\n\n    return Parser(function(stream, onSuccess, onFailure) {\n      var head = stream.slice(0, len);\n\n      if (head === str) {\n        return onSuccess(stream.slice(len), head);\n      }\n      else {\n        return onFailure(stream, expected);\n      }\n    });\n  };\n\n  var regex = this.regex = function(re) {\n    pray('regexp parser is anchored', re.toString().charAt(1) === '^');\n\n    var expected = 'expected '+re;\n\n    return Parser(function(stream, onSuccess, onFailure) {\n      var match = re.exec(stream);\n\n      if (match) {\n        var result = match[0];\n        return onSuccess(stream.slice(result.length), result);\n      }\n      else {\n        return onFailure(stream, expected);\n      }\n    });\n  };\n\n  var succeed = Parser.succeed = function(result) {\n    return Parser(function(stream, onSuccess) {\n      return onSuccess(stream, result);\n    });\n  };\n\n  var fail = Parser.fail = function(msg) {\n    return Parser(function(stream, _, onFailure) {\n      return onFailure(stream, msg);\n    });\n  };\n\n  var letter = Parser.letter = regex(/^[a-z]/i);\n  var letters = Parser.letters = regex(/^[a-z]*/i);\n  var digit = Parser.digit = regex(/^[0-9]/);\n  var digits = Parser.digits = regex(/^[0-9]*/);\n  var whitespace = Parser.whitespace = regex(/^\\s+/);\n  var optWhitespace = Parser.optWhitespace = regex(/^\\s*/);\n\n  var any = Parser.any = Parser(function(stream, onSuccess, onFailure) {\n    if (!stream) return onFailure(stream, 'expected any character');\n\n    return onSuccess(stream.slice(1), stream.charAt(0));\n  });\n\n  var all = Parser.all = Parser(function(stream, onSuccess, onFailure) {\n    return onSuccess('', stream);\n  });\n\n  var eof = Parser.eof = Parser(function(stream, onSuccess, onFailure) {\n    if (stream) return onFailure(stream, 'expected EOF');\n\n    return onSuccess(stream, stream);\n  });\n});\n/*************************************************\n * Sane Keyboard Events Shim\n *\n * An abstraction layer wrapping the textarea in\n * an object with methods to manipulate and listen\n * to events on, that hides all the nasty cross-\n * browser incompatibilities behind a uniform API.\n *\n * Design goal: This is a *HARD* internal\n * abstraction barrier. Cross-browser\n * inconsistencies are not allowed to leak through\n * and be dealt with by event handlers. All future\n * cross-browser issues that arise must be dealt\n * with here, and if necessary, the API updated.\n *\n * Organization:\n * - key values map and stringify()\n * - saneKeyboardEvents()\n *    + defer() and flush()\n *    + event handler logic\n *    + attach event handlers and export methods\n ************************************************/\n\nvar saneKeyboardEvents = (function() {\n  // The following [key values][1] map was compiled from the\n  // [DOM3 Events appendix section on key codes][2] and\n  // [a widely cited report on cross-browser tests of key codes][3],\n  // except for 10: 'Enter', which I've empirically observed in Safari on iOS\n  // and doesn't appear to conflict with any other known key codes.\n  //\n  // [1]: http://www.w3.org/TR/2012/WD-DOM-Level-3-Events-20120614/#keys-keyvalues\n  // [2]: http://www.w3.org/TR/2012/WD-DOM-Level-3-Events-20120614/#fixed-virtual-key-codes\n  // [3]: http://unixpapa.com/js/key.html\n  var KEY_VALUES = {\n    8: 'Backspace',\n    9: 'Tab',\n\n    10: 'Enter', // for Safari on iOS\n\n    13: 'Enter',\n\n    16: 'Shift',\n    17: 'Control',\n    18: 'Alt',\n    20: 'CapsLock',\n\n    27: 'Esc',\n\n    32: 'Spacebar',\n\n    33: 'PageUp',\n    34: 'PageDown',\n    35: 'End',\n    36: 'Home',\n\n    37: 'Left',\n    38: 'Up',\n    39: 'Right',\n    40: 'Down',\n\n    45: 'Insert',\n\n    46: 'Del',\n\n    144: 'NumLock'\n  };\n\n  // To the extent possible, create a normalized string representation\n  // of the key combo (i.e., key code and modifier keys).\n  function stringify(evt) {\n    var which = evt.which || evt.keyCode;\n    var keyVal = KEY_VALUES[which];\n    var key;\n    var modifiers = [];\n\n    if (evt.ctrlKey) modifiers.push('Ctrl');\n    if (evt.originalEvent && evt.originalEvent.metaKey) modifiers.push('Meta');\n    if (evt.altKey) modifiers.push('Alt');\n    if (evt.shiftKey) modifiers.push('Shift');\n\n    key = keyVal || String.fromCharCode(which);\n\n    if (!modifiers.length && !keyVal) return key;\n\n    modifiers.push(key);\n    return modifiers.join('-');\n  }\n\n  // create a keyboard events shim that calls callbacks at useful times\n  // and exports useful public methods\n  return function saneKeyboardEvents(el, handlers) {\n    var keydown = null;\n    var keypress = null;\n\n    var textarea = jQuery(el);\n    var target = jQuery(handlers.container || textarea);\n\n    // checkTextareaFor() is called after keypress or paste events to\n    // say \"Hey, I think something was just typed\" or \"pasted\" (resp.),\n    // so that at all subsequent opportune times (next event or timeout),\n    // will check for expected typed or pasted text.\n    // Need to check repeatedly because #135: in Safari 5.1 (at least),\n    // after selecting something and then typing, the textarea is\n    // incorrectly reported as selected during the input event (but not\n    // subsequently).\n    var checkTextarea = noop, timeoutId;\n    function checkTextareaFor(checker) {\n      checkTextarea = checker;\n      clearTimeout(timeoutId);\n      timeoutId = setTimeout(checker);\n    }\n    target.bind('keydown keypress input keyup focusout paste', function(e) { checkTextarea(e); });\n\n\n    // -*- public methods -*- //\n    function select(text) {\n      // check textarea at least once/one last time before munging (so\n      // no race condition if selection happens after keypress/paste but\n      // before checkTextarea), then never again ('cos it's been munged)\n      checkTextarea();\n      checkTextarea = noop;\n      clearTimeout(timeoutId);\n\n      textarea.val(text);\n      if (text && textarea[0].select) textarea[0].select();\n      shouldBeSelected = !!text;\n    }\n    var shouldBeSelected = false;\n\n    // -*- helper subroutines -*- //\n\n    // Determine whether there's a selection in the textarea.\n    // This will always return false in IE < 9, which don't support\n    // HTMLTextareaElement::selection{Start,End}.\n    function hasSelection() {\n      var dom = textarea[0];\n\n      if (!('selectionStart' in dom)) return false;\n      return dom.selectionStart !== dom.selectionEnd;\n    }\n\n    function handleKey() {\n      handlers.keystroke(stringify(keydown), keydown);\n    }\n\n    // -*- event handlers -*- //\n    function onKeydown(e) {\n      keydown = e;\n      keypress = null;\n\n      if (shouldBeSelected) checkTextareaFor(function(e) {\n        if (!(e && e.type === 'focusout') && textarea[0].select) {\n          textarea[0].select(); // re-select textarea in case it's an unrecognized\n        }\n        checkTextarea = noop; // key that clears the selection, then never\n        clearTimeout(timeoutId); // again, 'cos next thing might be blur\n      });\n\n      handleKey();\n    }\n\n    function onKeypress(e) {\n      // call the key handler for repeated keypresses.\n      // This excludes keypresses that happen directly\n      // after keydown.  In that case, there will be\n      // no previous keypress, so we skip it here\n      if (keydown && keypress) handleKey();\n\n      keypress = e;\n\n      checkTextareaFor(typedText);\n    }\n    function typedText() {\n      // If there is a selection, the contents of the textarea couldn't\n      // possibly have just been typed in.\n      // This happens in browsers like Firefox and Opera that fire\n      // keypress for keystrokes that are not text entry and leave the\n      // selection in the textarea alone, such as Ctrl-C.\n      // Note: we assume that browsers that don't support hasSelection()\n      // also never fire keypress on keystrokes that are not text entry.\n      // This seems reasonably safe because:\n      // - all modern browsers including IE 9+ support hasSelection(),\n      //   making it extremely unlikely any browser besides IE < 9 won't\n      // - as far as we know IE < 9 never fires keypress on keystrokes\n      //   that aren't text entry, which is only as reliable as our\n      //   tests are comprehensive, but the IE < 9 way to do\n      //   hasSelection() is poorly documented and is also only as\n      //   reliable as our tests are comprehensive\n      // If anything like #40 or #71 is reported in IE < 9, see\n      // b1318e5349160b665003e36d4eedd64101ceacd8\n      if (hasSelection()) return;\n\n      var text = textarea.val();\n      if (text.length === 1) {\n        textarea.val('');\n        handlers.typedText(text);\n      } // in Firefox, keys that don't type text, just clear seln, fire keypress\n      // https://github.com/mathquill/mathquill/issues/293#issuecomment-40997668\n      else if (text && textarea[0].select) textarea[0].select(); // re-select if that's why we're here\n    }\n\n    function onBlur() { keydown = keypress = null; }\n\n    function onPaste(e) {\n      // browsers are dumb.\n      //\n      // In Linux, middle-click pasting causes onPaste to be called,\n      // when the textarea is not necessarily focused.  We focus it\n      // here to ensure that the pasted text actually ends up in the\n      // textarea.\n      //\n      // It's pretty nifty that by changing focus in this handler,\n      // we can change the target of the default action.  (This works\n      // on keydown too, FWIW).\n      //\n      // And by nifty, we mean dumb (but useful sometimes).\n      textarea.focus();\n\n      checkTextareaFor(pastedText);\n    }\n    function pastedText() {\n      var text = textarea.val();\n      textarea.val('');\n      if (text) handlers.paste(text);\n    }\n\n    // -*- attach event handlers -*- //\n    target.bind({\n      keydown: onKeydown,\n      keypress: onKeypress,\n      focusout: onBlur,\n      paste: onPaste\n    });\n\n    // -*- export public methods -*- //\n    return {\n      select: select\n    };\n  };\n}());\n/***********************************************\n * Export math in a human-readable text format\n * As you can see, only half-baked so far.\n **********************************************/\n\nController.open(function(_, super_) {\n  _.exportText = function() {\n    return this.root.foldChildren('', function(text, child) {\n      return text + child.text();\n    });\n  };\n});\nController.open(function(_) {\n  _.focusBlurEvents = function() {\n    var ctrlr = this, root = ctrlr.root, cursor = ctrlr.cursor;\n    var blurTimeout;\n    ctrlr.textarea.focus(function() {\n      ctrlr.blurred = false;\n      clearTimeout(blurTimeout);\n      ctrlr.container.addClass('mq-focused');\n      if (!cursor.parent)\n        cursor.insAtRightEnd(root);\n      if (cursor.selection) {\n        cursor.selection.jQ.removeClass('mq-blur');\n        ctrlr.selectionChanged(); //re-select textarea contents after tabbing away and back\n      }\n      else\n        cursor.show();\n    }).blur(function() {\n      ctrlr.blurred = true;\n      blurTimeout = setTimeout(function() { // wait for blur on window; if\n        root.postOrder('intentionalBlur'); // none, intentional blur: #264\n        cursor.clearSelection().endSelection();\n        blur();\n      });\n      $(window).on('blur', windowBlur);\n    });\n    function windowBlur() { // blur event also fired on window, just switching\n      clearTimeout(blurTimeout); // tabs/windows, not intentional blur\n      if (cursor.selection) cursor.selection.jQ.addClass('mq-blur');\n      blur();\n    }\n    function blur() { // not directly in the textarea blur handler so as to be\n      cursor.hide().parent.blur(); // synchronous with/in the same frame as\n      ctrlr.container.removeClass('mq-focused'); // clearing/blurring selection\n      $(window).off('blur', windowBlur);\n    }\n    ctrlr.blurred = true;\n    cursor.hide().parent.blur();\n  };\n});\n\n/**\n * TODO: I wanted to move MathBlock::focus and blur here, it would clean\n * up lots of stuff like, TextBlock::focus is set to MathBlock::focus\n * and TextBlock::blur calls MathBlock::blur, when instead they could\n * use inheritance and super_.\n *\n * Problem is, there's lots of calls to .focus()/.blur() on nodes\n * outside Controller::focusBlurEvents(), such as .postOrder('blur') on\n * insertion, which if MathBlock::blur becomes Node::blur, would add the\n * 'blur' CSS class to all Symbol's (because .isEmpty() is true for all\n * of them).\n *\n * I'm not even sure there aren't other troublesome calls to .focus() or\n * .blur(), so this is TODO for now.\n */\n/*****************************************\n * Deals with the browser DOM events from\n * interaction with the typist.\n ****************************************/\n\nController.open(function(_) {\n  _.keystroke = function(key, evt) {\n    this.cursor.parent.keystroke(key, evt, this);\n  };\n});\n\nNode.open(function(_) {\n  _.keystroke = function(key, e, ctrlr) {\n    var cursor = ctrlr.cursor;\n\n    switch (key) {\n    case 'Ctrl-Shift-Backspace':\n    case 'Ctrl-Backspace':\n      ctrlr.ctrlDeleteDir(L);\n      break;\n\n    case 'Shift-Backspace':\n    case 'Backspace':\n      ctrlr.backspace();\n      break;\n\n    // Tab or Esc -> go one block right if it exists, else escape right.\n    case 'Esc':\n    case 'Tab':\n      ctrlr.escapeDir(R, key, e);\n      return;\n\n    // Shift-Tab -> go one block left if it exists, else escape left.\n    case 'Shift-Tab':\n    case 'Shift-Esc':\n      ctrlr.escapeDir(L, key, e);\n      return;\n\n    // End -> move to the end of the current block.\n    case 'End':\n      ctrlr.notify('move').cursor.insAtRightEnd(cursor.parent);\n      break;\n\n    // Ctrl-End -> move all the way to the end of the root block.\n    case 'Ctrl-End':\n      ctrlr.notify('move').cursor.insAtRightEnd(ctrlr.root);\n      break;\n\n    // Shift-End -> select to the end of the current block.\n    case 'Shift-End':\n      while (cursor[R]) {\n        ctrlr.selectRight();\n      }\n      break;\n\n    // Ctrl-Shift-End -> select to the end of the root block.\n    case 'Ctrl-Shift-End':\n      while (cursor[R] || cursor.parent !== ctrlr.root) {\n        ctrlr.selectRight();\n      }\n      break;\n\n    // Home -> move to the start of the root block or the current block.\n    case 'Home':\n      ctrlr.notify('move').cursor.insAtLeftEnd(cursor.parent);\n      break;\n\n    // Ctrl-Home -> move to the start of the current block.\n    case 'Ctrl-Home':\n      ctrlr.notify('move').cursor.insAtLeftEnd(ctrlr.root);\n      break;\n\n    // Shift-Home -> select to the start of the current block.\n    case 'Shift-Home':\n      while (cursor[L]) {\n        ctrlr.selectLeft();\n      }\n      break;\n\n    // Ctrl-Shift-Home -> move to the start of the root block.\n    case 'Ctrl-Shift-Home':\n      while (cursor[L] || cursor.parent !== ctrlr.root) {\n        ctrlr.selectLeft();\n      }\n      break;\n\n    case 'Left': ctrlr.moveLeft(); break;\n    case 'Shift-Left': ctrlr.selectLeft(); break;\n    case 'Ctrl-Left': break;\n\n    case 'Right': ctrlr.moveRight(); break;\n    case 'Shift-Right': ctrlr.selectRight(); break;\n    case 'Ctrl-Right': break;\n\n    case 'Up': ctrlr.moveUp(); break;\n    case 'Down': ctrlr.moveDown(); break;\n\n    case 'Shift-Up':\n      if (cursor[L]) {\n        while (cursor[L]) ctrlr.selectLeft();\n      } else {\n        ctrlr.selectLeft();\n      }\n\n    case 'Shift-Down':\n      if (cursor[R]) {\n        while (cursor[R]) ctrlr.selectRight();\n      }\n      else {\n        ctrlr.selectRight();\n      }\n\n    case 'Ctrl-Up': break;\n    case 'Ctrl-Down': break;\n\n    case 'Ctrl-Shift-Del':\n    case 'Ctrl-Del':\n      ctrlr.ctrlDeleteDir(R);\n      break;\n\n    case 'Shift-Del':\n    case 'Del':\n      ctrlr.deleteForward();\n      break;\n\n    case 'Meta-A':\n    case 'Ctrl-A':\n      ctrlr.notify('move').cursor.insAtRightEnd(ctrlr.root);\n      while (cursor[L]) ctrlr.selectLeft();\n      break;\n\n    default:\n      return;\n    }\n    e.preventDefault();\n    ctrlr.scrollHoriz();\n  };\n\n  _.moveOutOf = // called by Controller::escapeDir, moveDir\n  _.moveTowards = // called by Controller::moveDir\n  _.deleteOutOf = // called by Controller::deleteDir\n  _.deleteTowards = // called by Controller::deleteDir\n  _.unselectInto = // called by Controller::selectDir\n  _.selectOutOf = // called by Controller::selectDir\n  _.selectTowards = // called by Controller::selectDir\n    function() { pray('overridden or never called on this node'); };\n});\n\nController.open(function(_) {\n  this.onNotify(function(e) {\n    if (e === 'move' || e === 'upDown') this.show().clearSelection();\n  });\n  _.escapeDir = function(dir, key, e) {\n    prayDirection(dir);\n    var cursor = this.cursor;\n\n    // only prevent default of Tab if not in the root editable\n    if (cursor.parent !== this.root) e.preventDefault();\n\n    // want to be a noop if in the root editable (in fact, Tab has an unrelated\n    // default browser action if so)\n    if (cursor.parent === this.root) return;\n\n    cursor.parent.moveOutOf(dir, cursor);\n    return this.notify('move');\n  };\n\n  optionProcessors.leftRightIntoCmdGoes = function(updown) {\n    if (updown && updown !== 'up' && updown !== 'down') {\n      throw '\"up\" or \"down\" required for leftRightIntoCmdGoes option, '\n            + 'got \"'+updown+'\"';\n    }\n    return updown;\n  };\n  _.moveDir = function(dir) {\n    prayDirection(dir);\n    var cursor = this.cursor, updown = cursor.options.leftRightIntoCmdGoes;\n\n    if (cursor.selection) {\n      cursor.insDirOf(dir, cursor.selection.ends[dir]);\n    }\n    else if (cursor[dir]) cursor[dir].moveTowards(dir, cursor, updown);\n    else cursor.parent.moveOutOf(dir, cursor, updown);\n\n    return this.notify('move');\n  };\n  _.moveLeft = function() { return this.moveDir(L); };\n  _.moveRight = function() { return this.moveDir(R); };\n\n  /**\n   * moveUp and moveDown have almost identical algorithms:\n   * - first check left and right, if so insAtLeft/RightEnd of them\n   * - else check the parent's 'upOutOf'/'downOutOf' property:\n   *   + if it's a function, call it with the cursor as the sole argument and\n   *     use the return value as if it were the value of the property\n   *   + if it's a Node, jump up or down into it:\n   *     - if there is a cached Point in the block, insert there\n   *     - else, seekHoriz within the block to the current x-coordinate (to be\n   *       as close to directly above/below the current position as possible)\n   *   + unless it's exactly `true`, stop bubbling\n   */\n  _.moveUp = function() { return moveUpDown(this, 'up'); };\n  _.moveDown = function() { return moveUpDown(this, 'down'); };\n  function moveUpDown(self, dir) {\n    var cursor = self.notify('upDown').cursor;\n    var dirInto = dir+'Into', dirOutOf = dir+'OutOf';\n    if (cursor[R][dirInto]) cursor.insAtLeftEnd(cursor[R][dirInto]);\n    else if (cursor[L][dirInto]) cursor.insAtRightEnd(cursor[L][dirInto]);\n    else {\n      cursor.parent.bubble(function(ancestor) {\n        var prop = ancestor[dirOutOf];\n        if (prop) {\n          if (typeof prop === 'function') prop = ancestor[dirOutOf](cursor);\n          if (prop instanceof Node) cursor.jumpUpDown(ancestor, prop);\n          if (prop !== true) return false;\n        }\n      });\n    }\n    return self;\n  }\n  this.onNotify(function(e) { if (e !== 'upDown') this.upDownCache = {}; });\n\n  this.onNotify(function(e) { if (e === 'edit') this.show().deleteSelection(); });\n  _.deleteDir = function(dir) {\n    prayDirection(dir);\n    var cursor = this.cursor;\n\n    var hadSelection = cursor.selection;\n    this.notify('edit'); // deletes selection if present\n    if (!hadSelection) {\n      if (cursor[dir]) cursor[dir].deleteTowards(dir, cursor);\n      else cursor.parent.deleteOutOf(dir, cursor);\n    }\n\n    if (cursor[L].siblingDeleted) cursor[L].siblingDeleted(cursor.options, R);\n    if (cursor[R].siblingDeleted) cursor[R].siblingDeleted(cursor.options, L);\n    cursor.parent.bubble('reflow');\n\n    return this;\n  };\n  _.ctrlDeleteDir = function(dir) {\n    prayDirection(dir);\n    var cursor = this.cursor;\n    if (!cursor[L] || cursor.selection) return ctrlr.deleteDir();\n\n    this.notify('edit');\n    Fragment(cursor.parent.ends[L], cursor[L]).remove();\n    cursor.insAtDirEnd(L, cursor.parent);\n\n    if (cursor[L].siblingDeleted) cursor[L].siblingDeleted(cursor.options, R);\n    if (cursor[R].siblingDeleted) cursor[R].siblingDeleted(cursor.options, L);\n    cursor.parent.bubble('reflow');\n\n    return this;\n  };\n  _.backspace = function() { return this.deleteDir(L); };\n  _.deleteForward = function() { return this.deleteDir(R); };\n\n  this.onNotify(function(e) { if (e !== 'select') this.endSelection(); });\n  _.selectDir = function(dir) {\n    var cursor = this.notify('select').cursor, seln = cursor.selection;\n    prayDirection(dir);\n\n    if (!cursor.anticursor) cursor.startSelection();\n\n    var node = cursor[dir];\n    if (node) {\n      // \"if node we're selecting towards is inside selection (hence retracting)\n      // and is on the *far side* of the selection (hence is only node selected)\n      // and the anticursor is *inside* that node, not just on the other side\"\n      if (seln && seln.ends[dir] === node && cursor.anticursor[-dir] !== node) {\n        node.unselectInto(dir, cursor);\n      }\n      else node.selectTowards(dir, cursor);\n    }\n    else cursor.parent.selectOutOf(dir, cursor);\n\n    cursor.clearSelection();\n    cursor.select() || cursor.show();\n  };\n  _.selectLeft = function() { return this.selectDir(L); };\n  _.selectRight = function() { return this.selectDir(R); };\n});\n// Parser MathCommand\nvar latexMathParser = (function() {\n  function commandToBlock(cmd) {\n    var block = MathBlock();\n    cmd.adopt(block, 0, 0);\n    return block;\n  }\n  function joinBlocks(blocks) {\n    var firstBlock = blocks[0] || MathBlock();\n\n    for (var i = 1; i < blocks.length; i += 1) {\n      blocks[i].children().adopt(firstBlock, firstBlock.ends[R], 0);\n    }\n\n    return firstBlock;\n  }\n\n  var string = Parser.string;\n  var regex = Parser.regex;\n  var letter = Parser.letter;\n  var any = Parser.any;\n  var optWhitespace = Parser.optWhitespace;\n  var succeed = Parser.succeed;\n  var fail = Parser.fail;\n\n  // Parsers yielding either MathCommands, or Fragments of MathCommands\n  //   (either way, something that can be adopted by a MathBlock)\n  var variable = letter.map(function(c) { return Letter(c); });\n  var symbol = regex(/^[^${}\\\\_^]/).map(function(c) { return VanillaSymbol(c); });\n\n  var controlSequence =\n    regex(/^[^\\\\a-eg-zA-Z]/) // hotfix #164; match MathBlock::write\n    .or(string('\\\\').then(\n      regex(/^[a-z]+/i)\n      .or(regex(/^\\s+/).result(' '))\n      .or(any)\n    )).then(function(ctrlSeq) {\n      var cmdKlass = LatexCmds[ctrlSeq];\n\n      if (cmdKlass) {\n        return cmdKlass(ctrlSeq).parser();\n      }\n      else {\n        return fail('unknown command: \\\\'+ctrlSeq);\n      }\n    })\n  ;\n\n  var command =\n    controlSequence\n    .or(variable)\n    .or(symbol)\n  ;\n\n  // Parsers yielding MathBlocks\n  var mathGroup = string('{').then(function() { return mathSequence; }).skip(string('}'));\n  var mathBlock = optWhitespace.then(mathGroup.or(command.map(commandToBlock)));\n  var mathSequence = mathBlock.many().map(joinBlocks).skip(optWhitespace);\n\n  var optMathBlock =\n    string('[').then(\n      mathBlock.then(function(block) {\n        return block.join('latex') !== ']' ? succeed(block) : fail();\n      })\n      .many().map(joinBlocks).skip(optWhitespace)\n    ).skip(string(']'))\n  ;\n\n  var latexMath = mathSequence;\n\n  latexMath.block = mathBlock;\n  latexMath.optBlock = optMathBlock;\n  return latexMath;\n})();\n\nController.open(function(_, super_) {\n  _.exportLatex = function() {\n    return this.root.latex().replace(/(\\\\[a-z]+) (?![a-z])/ig,'$1');\n  };\n  _.writeLatex = function(latex) {\n    var cursor = this.notify('edit').cursor;\n\n    var all = Parser.all;\n    var eof = Parser.eof;\n\n    var block = latexMathParser.skip(eof).or(all.result(false)).parse(latex);\n\n    if (block && !block.isEmpty()) {\n      block.children().adopt(cursor.parent, cursor[L], cursor[R]);\n      var jQ = block.jQize();\n      jQ.insertBefore(cursor.jQ);\n      cursor[L] = block.ends[R];\n      block.finalizeInsert(cursor.options, cursor);\n      if (block.ends[R][R].siblingCreated) block.ends[R][R].siblingCreated(cursor.options, L);\n      if (block.ends[L][L].siblingCreated) block.ends[L][L].siblingCreated(cursor.options, R);\n      cursor.parent.bubble('reflow');\n    }\n\n    return this;\n  };\n  _.renderLatexMath = function(latex) {\n    var root = this.root, cursor = this.cursor;\n\n    var all = Parser.all;\n    var eof = Parser.eof;\n\n    var block = latexMathParser.skip(eof).or(all.result(false)).parse(latex);\n\n    root.eachChild('postOrder', 'dispose');\n    root.ends[L] = root.ends[R] = 0;\n\n    if (block) {\n      block.children().adopt(root, 0, 0);\n    }\n\n    var jQ = root.jQ;\n\n    if (block) {\n      var html = block.join('html');\n      jQ.html(html);\n      root.jQize(jQ.children());\n      root.finalizeInsert(cursor.options);\n    }\n    else {\n      jQ.empty();\n    }\n\n    delete cursor.selection;\n    cursor.insAtRightEnd(root);\n  };\n  _.renderLatexText = function(latex) {\n    var root = this.root, cursor = this.cursor;\n\n    root.jQ.children().slice(1).remove();\n    root.eachChild('postOrder', 'dispose');\n    root.ends[L] = root.ends[R] = 0;\n    delete cursor.selection;\n    cursor.show().insAtRightEnd(root);\n\n    var regex = Parser.regex;\n    var string = Parser.string;\n    var eof = Parser.eof;\n    var all = Parser.all;\n\n    // Parser RootMathCommand\n    var mathMode = string('$').then(latexMathParser)\n      // because TeX is insane, math mode doesn't necessarily\n      // have to end.  So we allow for the case that math mode\n      // continues to the end of the stream.\n      .skip(string('$').or(eof))\n      .map(function(block) {\n        // HACK FIXME: this shouldn't have to have access to cursor\n        var rootMathCommand = RootMathCommand(cursor);\n\n        rootMathCommand.createBlocks();\n        var rootMathBlock = rootMathCommand.ends[L];\n        block.children().adopt(rootMathBlock, 0, 0);\n\n        return rootMathCommand;\n      })\n    ;\n\n    var escapedDollar = string('\\\\$').result('$');\n    var textChar = escapedDollar.or(regex(/^[^$]/)).map(VanillaSymbol);\n    var latexText = mathMode.or(textChar).many();\n    var commands = latexText.skip(eof).or(all.result(false)).parse(latex);\n\n    if (commands) {\n      for (var i = 0; i < commands.length; i += 1) {\n        commands[i].adopt(root, root.ends[R], 0);\n      }\n\n      root.jQize().appendTo(root.jQ);\n\n      root.finalizeInsert(cursor.options);\n    }\n  };\n});\n/********************************************************\n * Deals with mouse events for clicking, drag-to-select\n *******************************************************/\n\nController.open(function(_) {\n  _.delegateMouseEvents = function() {\n    var ultimateRootjQ = this.root.jQ;\n    //drag-to-select event handling\n    this.container.bind('mousedown.mathquill', function(e) {\n      var rootjQ = $(e.target).closest('.mq-root-block');\n      var root = Node.byId[rootjQ.attr(mqBlockId) || ultimateRootjQ.attr(mqBlockId)];\n      var ctrlr = root.controller, cursor = ctrlr.cursor, blink = cursor.blink;\n      var textareaSpan = ctrlr.textareaSpan, textarea = ctrlr.textarea;\n\n      var target;\n      function mousemove(e) { target = $(e.target); }\n      function docmousemove(e) {\n        if (!cursor.anticursor) cursor.startSelection();\n        ctrlr.seek(target, e.pageX, e.pageY).cursor.select();\n        target = undefined;\n      }\n      // outside rootjQ, the MathQuill node corresponding to the target (if any)\n      // won't be inside this root, so don't mislead Controller::seek with it\n\n      function mouseup(e) {\n        cursor.blink = blink;\n        if (!cursor.selection) {\n          if (ctrlr.editable) {\n            cursor.show();\n          }\n          else {\n            textareaSpan.detach();\n          }\n        }\n\n        // delete the mouse handlers now that we're not dragging anymore\n        rootjQ.unbind('mousemove', mousemove);\n        $(e.target.ownerDocument).unbind('mousemove', docmousemove).unbind('mouseup', mouseup);\n      }\n\n      if (ctrlr.blurred) {\n        if (!ctrlr.editable) rootjQ.prepend(textareaSpan);\n        textarea.focus();\n      }\n      e.preventDefault(); // doesn't work in IE\\u22648, but it's a one-line fix:\n      e.target.unselectable = true; // http://jsbin.com/yagekiji/1\n\n      cursor.blink = noop;\n      ctrlr.seek($(e.target), e.pageX, e.pageY).cursor.startSelection();\n\n      rootjQ.mousemove(mousemove);\n      $(e.target.ownerDocument).mousemove(docmousemove).mouseup(mouseup);\n      // listen on document not just body to not only hear about mousemove and\n      // mouseup on page outside field, but even outside page, except iframes: https://github.com/mathquill/mathquill/commit/8c50028afcffcace655d8ae2049f6e02482346c5#commitcomment-6175800\n    });\n  }\n});\n\nController.open(function(_) {\n  _.seek = function(target, pageX, pageY) {\n    var cursor = this.notify('select').cursor;\n\n    if (target) {\n      var nodeId = target.attr(mqBlockId) || target.attr(mqCmdId);\n      if (!nodeId) {\n        var targetParent = target.parent();\n        nodeId = targetParent.attr(mqBlockId) || targetParent.attr(mqCmdId);\n      }\n    }\n    var node = nodeId ? Node.byId[nodeId] : this.root;\n    pray('nodeId is the id of some Node that exists', node);\n\n    // don't clear selection until after getting node from target, in case\n    // target was selection span, otherwise target will have no parent and will\n    // seek from root, which is less accurate (e.g. fraction)\n    cursor.clearSelection().show();\n\n    node.seek(pageX, cursor);\n    this.scrollHoriz(); // before .selectFrom when mouse-selecting, so\n                        // always hits no-selection case in scrollHoriz and scrolls slower\n    return this;\n  };\n});\n/***********************************************\n * Horizontal panning for editable fields that\n * overflow their width\n **********************************************/\n\nController.open(function(_) {\n  _.scrollHoriz = function() {\n    var cursor = this.cursor, seln = cursor.selection;\n    var rootRect = this.root.jQ[0].getBoundingClientRect();\n    if (!seln) {\n      var x = cursor.jQ[0].getBoundingClientRect().left;\n      if (x > rootRect.right - 20) var scrollBy = x - (rootRect.right - 20);\n      else if (x < rootRect.left + 20) var scrollBy = x - (rootRect.left + 20);\n      else return;\n    }\n    else {\n      var rect = seln.jQ[0].getBoundingClientRect();\n      var overLeft = rect.left - (rootRect.left + 20);\n      var overRight = rect.right - (rootRect.right - 20);\n      if (seln.ends[L] === cursor[R]) {\n        if (overLeft < 0) var scrollBy = overLeft;\n        else if (overRight > 0) {\n          if (rect.left - overRight < rootRect.left + 20) var scrollBy = overLeft;\n          else var scrollBy = overRight;\n        }\n        else return;\n      }\n      else {\n        if (overRight > 0) var scrollBy = overRight;\n        else if (overLeft < 0) {\n          if (rect.right - overLeft > rootRect.right - 20) var scrollBy = overRight;\n          else var scrollBy = overLeft;\n        }\n        else return;\n      }\n    }\n    this.root.jQ.stop().animate({ scrollLeft: '+=' + scrollBy}, 100);\n  };\n});\n/*********************************************\n * Manage the MathQuill instance's textarea\n * (as owned by the Controller)\n ********************************************/\n\nController.open(function(_) {\n  Options.p.substituteTextarea = function() {\n    return $('<textarea autocapitalize=off autocomplete=off autocorrect=off ' +\n               'spellcheck=false x-palm-disable-ste-all=true />')[0];\n  };\n  _.createTextarea = function() {\n    var textareaSpan = this.textareaSpan = $('<span class=\"mq-textarea\"></span>'),\n      textarea = this.options.substituteTextarea();\n    if (!textarea.nodeType) {\n      throw 'substituteTextarea() must return a DOM element, got ' + textarea;\n    }\n    textarea = this.textarea = $(textarea).appendTo(textareaSpan);\n\n    var ctrlr = this;\n    ctrlr.cursor.selectionChanged = function() { ctrlr.selectionChanged(); };\n    ctrlr.container.bind('copy', function() { ctrlr.setTextareaSelection(); });\n  };\n  _.selectionChanged = function() {\n    var ctrlr = this;\n    forceIERedraw(ctrlr.container[0]);\n\n    // throttle calls to setTextareaSelection(), because setting textarea.value\n    // and/or calling textarea.select() can have anomalously bad performance:\n    // https://github.com/mathquill/mathquill/issues/43#issuecomment-1399080\n    if (ctrlr.textareaSelectionTimeout === undefined) {\n      ctrlr.textareaSelectionTimeout = setTimeout(function() {\n        ctrlr.setTextareaSelection();\n      });\n    }\n  };\n  _.setTextareaSelection = function() {\n    this.textareaSelectionTimeout = undefined;\n    var latex = '';\n    if (this.cursor.selection) {\n      latex = this.cursor.selection.join('latex');\n      if (this.options.statelessClipboard) {\n        // FIXME: like paste, only this works for math fields; should ask parent\n        latex = '$' + latex + '$';\n      }\n    }\n    this.selectFn(latex);\n  };\n  _.staticMathTextareaEvents = function() {\n    var ctrlr = this, root = ctrlr.root, cursor = ctrlr.cursor,\n      textarea = ctrlr.textarea, textareaSpan = ctrlr.textareaSpan;\n\n    this.container.prepend('<span class=\"mq-selectable\">$'+ctrlr.exportLatex()+'$</span>');\n    ctrlr.blurred = true;\n    textarea.bind('cut paste', false)\n    .focus(function() { ctrlr.blurred = false; }).blur(function() {\n      if (cursor.selection) cursor.selection.clear();\n      setTimeout(detach); //detaching during blur explodes in WebKit\n    });\n    function detach() {\n      textareaSpan.detach();\n      ctrlr.blurred = true;\n    }\n\n    ctrlr.selectFn = function(text) {\n      textarea.val(text);\n      if (text) textarea.select();\n    };\n  };\n  _.editablesTextareaEvents = function() {\n    var ctrlr = this, root = ctrlr.root, cursor = ctrlr.cursor,\n      textarea = ctrlr.textarea, textareaSpan = ctrlr.textareaSpan;\n\n    var keyboardEventsShim = saneKeyboardEvents(textarea, this);\n    this.selectFn = function(text) { keyboardEventsShim.select(text); };\n\n    this.container.prepend(textareaSpan)\n    .on('cut', function(e) {\n      if (cursor.selection) {\n        setTimeout(function() {\n          ctrlr.notify('edit'); // deletes selection if present\n          cursor.parent.bubble('reflow');\n        });\n      }\n    });\n\n    this.focusBlurEvents();\n  };\n  _.typedText = function(ch) {\n    if (ch === '\\n') return this.handle('enter');\n    var cursor = this.notify().cursor;\n    cursor.parent.write(cursor, ch);\n    this.scrollHoriz();\n  };\n  _.paste = function(text) {\n    // TODO: document `statelessClipboard` config option in README, after\n    // making it work like it should, that is, in both text and math mode\n    // (currently only works in math fields, so worse than pointless, it\n    //  only gets in the way by \\text{}-ifying pasted stuff and $-ifying\n    //  cut/copied LaTeX)\n    if (this.options.statelessClipboard) {\n      if (text.slice(0,1) === '$' && text.slice(-1) === '$') {\n        text = text.slice(1, -1);\n      }\n      else {\n        text = '\\\\text{'+text+'}';\n      }\n    }\n    // FIXME: this always inserts math or a TextBlock, even in a RootTextBlock\n    this.writeLatex(text).cursor.show();\n  };\n});\n/*************************************************\n * Abstract classes of math blocks and commands.\n ************************************************/\n\n/**\n * Math tree node base class.\n * Some math-tree-specific extensions to Node.\n * Both MathBlock's and MathCommand's descend from it.\n */\nvar MathElement = P(Node, function(_, super_) {\n  _.finalizeInsert = function(options, cursor) { // `cursor` param is only for\n      // SupSub::contactWeld, and is deliberately only passed in by writeLatex,\n      // see ea7307eb4fac77c149a11ffdf9a831df85247693\n    var self = this;\n    self.postOrder('finalizeTree', options);\n    self.postOrder('contactWeld', cursor);\n\n    // note: this order is important.\n    // empty elements need the empty box provided by blur to\n    // be present in order for their dimensions to be measured\n    // correctly by 'reflow' handlers.\n    self.postOrder('blur');\n\n    self.postOrder('reflow');\n    if (self[R].siblingCreated) self[R].siblingCreated(options, L);\n    if (self[L].siblingCreated) self[L].siblingCreated(options, R);\n    self.bubble('reflow');\n  };\n});\n\n/**\n * Commands and operators, like subscripts, exponents, or fractions.\n * Descendant commands are organized into blocks.\n */\nvar MathCommand = P(MathElement, function(_, super_) {\n  _.init = function(ctrlSeq, htmlTemplate, textTemplate) {\n    var cmd = this;\n    super_.init.call(cmd);\n\n    if (!cmd.ctrlSeq) cmd.ctrlSeq = ctrlSeq;\n    if (htmlTemplate) cmd.htmlTemplate = htmlTemplate;\n    if (textTemplate) cmd.textTemplate = textTemplate;\n  };\n\n  // obvious methods\n  _.replaces = function(replacedFragment) {\n    replacedFragment.disown();\n    this.replacedFragment = replacedFragment;\n  };\n  _.isEmpty = function() {\n    return this.foldChildren(true, function(isEmpty, child) {\n      return isEmpty && child.isEmpty();\n    });\n  };\n\n  _.parser = function() {\n    var block = latexMathParser.block;\n    var self = this;\n\n    return block.times(self.numBlocks()).map(function(blocks) {\n      self.blocks = blocks;\n\n      for (var i = 0; i < blocks.length; i += 1) {\n        blocks[i].adopt(self, self.ends[R], 0);\n      }\n\n      return self;\n    });\n  };\n\n  // createLeftOf(cursor) and the methods it calls\n  _.createLeftOf = function(cursor) {\n    var cmd = this;\n    var replacedFragment = cmd.replacedFragment;\n\n    cmd.createBlocks();\n    super_.createLeftOf.call(cmd, cursor);\n    if (replacedFragment) {\n      replacedFragment.adopt(cmd.ends[L], 0, 0);\n      replacedFragment.jQ.appendTo(cmd.ends[L].jQ);\n    }\n    cmd.finalizeInsert(cursor.options);\n    cmd.placeCursor(cursor);\n  };\n  _.createBlocks = function() {\n    var cmd = this,\n      numBlocks = cmd.numBlocks(),\n      blocks = cmd.blocks = Array(numBlocks);\n\n    for (var i = 0; i < numBlocks; i += 1) {\n      var newBlock = blocks[i] = MathBlock();\n      newBlock.adopt(cmd, cmd.ends[R], 0);\n    }\n  };\n  _.placeCursor = function(cursor) {\n    //insert the cursor at the right end of the first empty child, searching\n    //left-to-right, or if none empty, the right end child\n    cursor.insAtRightEnd(this.foldChildren(this.ends[L], function(leftward, child) {\n      return leftward.isEmpty() ? leftward : child;\n    }));\n  };\n\n  // editability methods: called by the cursor for editing, cursor movements,\n  // and selection of the MathQuill tree, these all take in a direction and\n  // the cursor\n  _.moveTowards = function(dir, cursor, updown) {\n    var updownInto = updown && this[updown+'Into'];\n    cursor.insAtDirEnd(-dir, updownInto || this.ends[-dir]);\n  };\n  _.deleteTowards = function(dir, cursor) {\n    if (this.isEmpty()) cursor[dir] = this.remove()[dir];\n    else this.moveTowards(dir, cursor, null);\n  };\n  _.selectTowards = function(dir, cursor) {\n    cursor[-dir] = this;\n    cursor[dir] = this[dir];\n  };\n  _.selectChildren = function() {\n    return Selection(this, this);\n  };\n  _.unselectInto = function(dir, cursor) {\n    cursor.insAtDirEnd(-dir, cursor.anticursor.ancestors[this.id]);\n  };\n  _.seek = function(pageX, cursor) {\n    function getBounds(node) {\n      var bounds = {}\n      bounds[L] = node.jQ.offset().left;\n      bounds[R] = bounds[L] + node.jQ.outerWidth();\n      return bounds;\n    }\n\n    var cmd = this;\n    var cmdBounds = getBounds(cmd);\n\n    if (pageX < cmdBounds[L]) return cursor.insLeftOf(cmd);\n    if (pageX > cmdBounds[R]) return cursor.insRightOf(cmd);\n\n    var leftLeftBound = cmdBounds[L];\n    cmd.eachChild(function(block) {\n      var blockBounds = getBounds(block);\n      if (pageX < blockBounds[L]) {\n        // closer to this block's left bound, or the bound left of that?\n        if (pageX - leftLeftBound < blockBounds[L] - pageX) {\n          if (block[L]) cursor.insAtRightEnd(block[L]);\n          else cursor.insLeftOf(cmd);\n        }\n        else cursor.insAtLeftEnd(block);\n        return false;\n      }\n      else if (pageX > blockBounds[R]) {\n        if (block[R]) leftLeftBound = blockBounds[R]; // continue to next block\n        else { // last (rightmost) block\n          // closer to this block's right bound, or the cmd's right bound?\n          if (cmdBounds[R] - pageX < pageX - blockBounds[R]) {\n            cursor.insRightOf(cmd);\n          }\n          else cursor.insAtRightEnd(block);\n        }\n      }\n      else {\n        block.seek(pageX, cursor);\n        return false;\n      }\n    });\n  }\n\n  // methods involved in creating and cross-linking with HTML DOM nodes\n  /*\n    They all expect an .htmlTemplate like\n      '<span>&0</span>'\n    or\n      '<span><span>&0</span><span>&1</span></span>'\n\n    See html.test.js for more examples.\n\n    Requirements:\n    - For each block of the command, there must be exactly one \"block content\n      marker\" of the form '&<number>' where <number> is the 0-based index of the\n      block. (Like the LaTeX \\newcommand syntax, but with a 0-based rather than\n      1-based index, because JavaScript because C because Dijkstra.)\n    - The block content marker must be the sole contents of the containing\n      element, there can't even be surrounding whitespace, or else we can't\n      guarantee sticking to within the bounds of the block content marker when\n      mucking with the HTML DOM.\n    - The HTML not only must be well-formed HTML (of course), but also must\n      conform to the XHTML requirements on tags, specifically all tags must\n      either be self-closing (like '<br/>') or come in matching pairs.\n      Close tags are never optional.\n\n    Note that &<number> isn't well-formed HTML; if you wanted a literal '&123',\n    your HTML template would have to have '&amp;123'.\n  */\n  _.numBlocks = function() {\n    var matches = this.htmlTemplate.match(/&\\d+/g);\n    return matches ? matches.length : 0;\n  };\n  _.html = function() {\n    // Render the entire math subtree rooted at this command, as HTML.\n    // Expects .createBlocks() to have been called already, since it uses the\n    // .blocks array of child blocks.\n    //\n    // See html.test.js for example templates and intended outputs.\n    //\n    // Given an .htmlTemplate as described above,\n    // - insert the mathquill-command-id attribute into all top-level tags,\n    //   which will be used to set this.jQ in .jQize().\n    //   This is straightforward:\n    //     * tokenize into tags and non-tags\n    //     * loop through top-level tokens:\n    //         * add #cmdId attribute macro to top-level self-closing tags\n    //         * else add #cmdId attribute macro to top-level open tags\n    //             * skip the matching top-level close tag and all tag pairs\n    //               in between\n    // - for each block content marker,\n    //     + replace it with the contents of the corresponding block,\n    //       rendered as HTML\n    //     + insert the mathquill-block-id attribute into the containing tag\n    //   This is even easier, a quick regex replace, since block tags cannot\n    //   contain anything besides the block content marker.\n    //\n    // Two notes:\n    // - The outermost loop through top-level tokens should never encounter any\n    //   top-level close tags, because we should have first encountered a\n    //   matching top-level open tag, all inner tags should have appeared in\n    //   matching pairs and been skipped, and then we should have skipped the\n    //   close tag in question.\n    // - All open tags should have matching close tags, which means our inner\n    //   loop should always encounter a close tag and drop nesting to 0. If\n    //   a close tag is missing, the loop will continue until i >= tokens.length\n    //   and token becomes undefined. This will not infinite loop, even in\n    //   production without pray(), because it will then TypeError on .slice().\n\n    var cmd = this;\n    var blocks = cmd.blocks;\n    var cmdId = ' mathquill-command-id=' + cmd.id;\n    var tokens = cmd.htmlTemplate.match(/<[^<>]+>|[^<>]+/g);\n\n    pray('no unmatched angle brackets', tokens.join('') === this.htmlTemplate);\n\n    // add cmdId to all top-level tags\n    for (var i = 0, token = tokens[0]; token; i += 1, token = tokens[i]) {\n      // top-level self-closing tags\n      if (token.slice(-2) === '/>') {\n        tokens[i] = token.slice(0,-2) + cmdId + '/>';\n      }\n      // top-level open tags\n      else if (token.charAt(0) === '<') {\n        pray('not an unmatched top-level close tag', token.charAt(1) !== '/');\n\n        tokens[i] = token.slice(0,-1) + cmdId + '>';\n\n        // skip matching top-level close tag and all tag pairs in between\n        var nesting = 1;\n        do {\n          i += 1, token = tokens[i];\n          pray('no missing close tags', token);\n          // close tags\n          if (token.slice(0,2) === '</') {\n            nesting -= 1;\n          }\n          // non-self-closing open tags\n          else if (token.charAt(0) === '<' && token.slice(-2) !== '/>') {\n            nesting += 1;\n          }\n        } while (nesting > 0);\n      }\n    }\n    return tokens.join('').replace(/>&(\\d+)/g, function($0, $1) {\n      return ' mathquill-block-id=' + blocks[$1].id + '>' + blocks[$1].join('html');\n    });\n  };\n\n  // methods to export a string representation of the math tree\n  _.latex = function() {\n    return this.foldChildren(this.ctrlSeq, function(latex, child) {\n      return latex + '{' + (child.latex() || ' ') + '}';\n    });\n  };\n  _.textTemplate = [''];\n  _.text = function() {\n    var cmd = this, i = 0;\n    return cmd.foldChildren(cmd.textTemplate[i], function(text, child) {\n      i += 1;\n      var child_text = child.text();\n      if (text && cmd.textTemplate[i] === '('\n          && child_text[0] === '(' && child_text.slice(-1) === ')')\n        return text + child_text.slice(1, -1) + cmd.textTemplate[i];\n      return text + child.text() + (cmd.textTemplate[i] || '');\n    });\n  };\n});\n\n/**\n * Lightweight command without blocks or children.\n */\nvar Symbol = P(MathCommand, function(_, super_) {\n  _.init = function(ctrlSeq, html, text) {\n    if (!text) text = ctrlSeq && ctrlSeq.length > 1 ? ctrlSeq.slice(1) : ctrlSeq;\n\n    super_.init.call(this, ctrlSeq, html, [ text ]);\n  };\n\n  _.parser = function() { return Parser.succeed(this); };\n  _.numBlocks = function() { return 0; };\n\n  _.replaces = function(replacedFragment) {\n    replacedFragment.remove();\n  };\n  _.createBlocks = noop;\n\n  _.moveTowards = function(dir, cursor) {\n    cursor.jQ.insDirOf(dir, this.jQ);\n    cursor[-dir] = this;\n    cursor[dir] = this[dir];\n  };\n  _.deleteTowards = function(dir, cursor) {\n    cursor[dir] = this.remove()[dir];\n  };\n  _.seek = function(pageX, cursor) {\n    // insert at whichever side the click was closer to\n    if (pageX - this.jQ.offset().left < this.jQ.outerWidth()/2)\n      cursor.insLeftOf(this);\n    else\n      cursor.insRightOf(this);\n  };\n\n  _.latex = function(){ return this.ctrlSeq; };\n  _.text = function(){ return this.textTemplate; };\n  _.placeCursor = noop;\n  _.isEmpty = function(){ return true; };\n});\nvar VanillaSymbol = P(Symbol, function(_, super_) {\n  _.init = function(ch, html) {\n    super_.init.call(this, ch, '<span>'+(html || ch)+'</span>');\n  };\n});\nvar BinaryOperator = P(Symbol, function(_, super_) {\n  _.init = function(ctrlSeq, html, text) {\n    super_.init.call(this,\n      ctrlSeq, '<span class=\"mq-binary-operator\">'+html+'</span>', text\n    );\n  };\n});\n\n/**\n * Children and parent of MathCommand's. Basically partitions all the\n * symbols and operators that descend (in the Math DOM tree) from\n * ancestor operators.\n */\nvar MathBlock = P(MathElement, function(_, super_) {\n  _.join = function(methodName) {\n    return this.foldChildren('', function(fold, child) {\n      return fold + child[methodName]();\n    });\n  };\n  _.html = function() { return this.join('html'); };\n  _.latex = function() { return this.join('latex'); };\n  _.text = function() {\n    return (this.ends[L] === this.ends[R] && this.ends[L] !== 0) ?\n      this.ends[L].text() :\n      this.join('text')\n    ;\n  };\n\n  _.keystroke = function(key, e, ctrlr) {\n    if (ctrlr.options.spaceBehavesLikeTab\n        && (key === 'Spacebar' || key === 'Shift-Spacebar')) {\n      e.preventDefault();\n      ctrlr.escapeDir(key === 'Shift-Spacebar' ? L : R, key, e);\n      return;\n    }\n    return super_.keystroke.apply(this, arguments);\n  };\n\n  // editability methods: called by the cursor for editing, cursor movements,\n  // and selection of the MathQuill tree, these all take in a direction and\n  // the cursor\n  _.moveOutOf = function(dir, cursor, updown) {\n    var updownInto = updown && this.parent[updown+'Into'];\n    if (!updownInto && this[dir]) cursor.insAtDirEnd(-dir, this[dir]);\n    else cursor.insDirOf(dir, this.parent);\n  };\n  _.selectOutOf = function(dir, cursor) {\n    cursor.insDirOf(dir, this.parent);\n  };\n  _.deleteOutOf = function(dir, cursor) {\n    cursor.unwrapGramp();\n  };\n  _.seek = function(pageX, cursor) {\n    var node = this.ends[R];\n    if (!node || node.jQ.offset().left + node.jQ.outerWidth() < pageX) {\n      return cursor.insAtRightEnd(this);\n    }\n    if (pageX < this.ends[L].jQ.offset().left) return cursor.insAtLeftEnd(this);\n    while (pageX < node.jQ.offset().left) node = node[L];\n    return node.seek(pageX, cursor);\n  };\n  _.chToCmd = function(ch) {\n    var cons;\n    // exclude f because it gets a dedicated command with more spacing\n    if (ch.match(/^[a-eg-zA-Z]$/))\n      return Letter(ch);\n    else if (/^\\d$/.test(ch))\n      return Digit(ch);\n    else if (cons = CharCmds[ch] || LatexCmds[ch])\n      return cons(ch);\n    else\n      return VanillaSymbol(ch);\n  };\n  _.write = function(cursor, ch) {\n    var cmd = this.chToCmd(ch);\n    if (cursor.selection) cmd.replaces(cursor.replaceSelection());\n    cmd.createLeftOf(cursor.show());\n  };\n\n  _.focus = function() {\n    this.jQ.addClass('mq-hasCursor');\n    this.jQ.removeClass('mq-empty');\n\n    return this;\n  };\n  _.blur = function() {\n    this.jQ.removeClass('mq-hasCursor');\n    if (this.isEmpty())\n      this.jQ.addClass('mq-empty');\n\n    return this;\n  };\n});\n\nAPI.StaticMath = function(APIClasses) {\n  return P(APIClasses.AbstractMathQuill, function(_, super_) {\n    this.RootBlock = MathBlock;\n    _.__mathquillify = function() {\n      super_.__mathquillify.call(this, 'mq-math-mode');\n      this.__controller.delegateMouseEvents();\n      this.__controller.staticMathTextareaEvents();\n      return this;\n    };\n    _.init = function() {\n      super_.init.apply(this, arguments);\n      this.__controller.root.postOrder(\n        'registerInnerField', this.innerFields = [], APIClasses.MathField);\n    };\n    _.latex = function() {\n      var returned = super_.latex.apply(this, arguments);\n      if (arguments.length > 0) {\n        this.__controller.root.postOrder(\n          'registerInnerField', this.innerFields = [], APIClasses.MathField);\n      }\n      return returned;\n    };\n  });\n};\n\nvar RootMathBlock = P(MathBlock, RootBlockMixin);\nAPI.MathField = function(APIClasses) {\n  return P(APIClasses.EditableField, function(_, super_) {\n    this.RootBlock = RootMathBlock;\n    _.__mathquillify = function(opts, interfaceVersion) {\n      this.config(opts);\n      if (interfaceVersion > 1) this.__controller.root.reflow = noop;\n      super_.__mathquillify.call(this, 'mq-editable-field mq-math-mode');\n      delete this.__controller.root.reflow;\n      return this;\n    };\n  });\n};\n/*************************************************\n * Abstract classes of text blocks\n ************************************************/\n\n/**\n * Blocks of plain text, with one or two TextPiece's as children.\n * Represents flat strings of typically serif-font Roman characters, as\n * opposed to hierchical, nested, tree-structured math.\n * Wraps a single HTMLSpanElement.\n */\nvar TextBlock = P(Node, function(_, super_) {\n  _.ctrlSeq = '\\\\text';\n\n  _.replaces = function(replacedText) {\n    if (replacedText instanceof Fragment)\n      this.replacedText = replacedText.remove().jQ.text();\n    else if (typeof replacedText === 'string')\n      this.replacedText = replacedText;\n  };\n\n  _.jQadd = function(jQ) {\n    super_.jQadd.call(this, jQ);\n    if (this.ends[L]) this.ends[L].jQadd(this.jQ[0].firstChild);\n  };\n\n  _.createLeftOf = function(cursor) {\n    var textBlock = this;\n    super_.createLeftOf.call(this, cursor);\n\n    if (textBlock[R].siblingCreated) textBlock[R].siblingCreated(cursor.options, L);\n    if (textBlock[L].siblingCreated) textBlock[L].siblingCreated(cursor.options, R);\n    textBlock.bubble('reflow');\n\n    cursor.insAtRightEnd(textBlock);\n\n    if (textBlock.replacedText)\n      for (var i = 0; i < textBlock.replacedText.length; i += 1)\n        textBlock.write(cursor, textBlock.replacedText.charAt(i));\n  };\n\n  _.parser = function() {\n    var textBlock = this;\n\n    // TODO: correctly parse text mode\n    var string = Parser.string;\n    var regex = Parser.regex;\n    var optWhitespace = Parser.optWhitespace;\n    return optWhitespace\n      .then(string('{')).then(regex(/^[^}]*/)).skip(string('}'))\n      .map(function(text) {\n        // TODO: is this the correct behavior when parsing\n        // the latex \\text{} ?  This violates the requirement that\n        // the text contents are always nonempty.  Should we just\n        // disown the parent node instead?\n        TextPiece(text).adopt(textBlock, 0, 0);\n        return textBlock;\n      })\n    ;\n  };\n\n  _.textContents = function() {\n    return this.foldChildren('', function(text, child) {\n      return text + child.text;\n    });\n  };\n  _.text = function() { return '\"' + this.textContents() + '\"'; };\n  _.latex = function() { return '\\\\text{' + this.textContents() + '}'; };\n  _.html = function() {\n    return (\n        '<span class=\"mq-text-mode\" mathquill-command-id='+this.id+'>'\n      +   this.textContents()\n      + '</span>'\n    );\n  };\n\n  // editability methods: called by the cursor for editing, cursor movements,\n  // and selection of the MathQuill tree, these all take in a direction and\n  // the cursor\n  _.moveTowards = function(dir, cursor) { cursor.insAtDirEnd(-dir, this); };\n  _.moveOutOf = function(dir, cursor) { cursor.insDirOf(dir, this); };\n  _.unselectInto = _.moveTowards;\n\n  // TODO: make these methods part of a shared mixin or something.\n  _.selectTowards = MathCommand.prototype.selectTowards;\n  _.deleteTowards = MathCommand.prototype.deleteTowards;\n\n  _.selectOutOf = function(dir, cursor) {\n    cursor.insDirOf(dir, this);\n  };\n  _.deleteOutOf = function(dir, cursor) {\n    // backspace and delete at ends of block don't unwrap\n    if (this.isEmpty()) cursor.insRightOf(this);\n  };\n  _.write = function(cursor, ch) {\n    cursor.show().deleteSelection();\n\n    if (ch !== '$') {\n      if (!cursor[L]) TextPiece(ch).createLeftOf(cursor);\n      else cursor[L].appendText(ch);\n    }\n    else if (this.isEmpty()) {\n      cursor.insRightOf(this);\n      VanillaSymbol('\\\\$','$').createLeftOf(cursor);\n    }\n    else if (!cursor[R]) cursor.insRightOf(this);\n    else if (!cursor[L]) cursor.insLeftOf(this);\n    else { // split apart\n      var leftBlock = TextBlock();\n      var leftPc = this.ends[L];\n      leftPc.disown();\n      leftPc.adopt(leftBlock, 0, 0);\n\n      cursor.insLeftOf(this);\n      super_.createLeftOf.call(leftBlock, cursor);\n    }\n  };\n\n  _.seek = function(pageX, cursor) {\n    cursor.hide();\n    var textPc = fuseChildren(this);\n\n    // insert cursor at approx position in DOMTextNode\n    var avgChWidth = this.jQ.width()/this.text.length;\n    var approxPosition = Math.round((pageX - this.jQ.offset().left)/avgChWidth);\n    if (approxPosition <= 0) cursor.insAtLeftEnd(this);\n    else if (approxPosition >= textPc.text.length) cursor.insAtRightEnd(this);\n    else cursor.insLeftOf(textPc.splitRight(approxPosition));\n\n    // move towards mousedown (pageX)\n    var displ = pageX - cursor.show().offset().left; // displacement\n    var dir = displ && displ < 0 ? L : R;\n    var prevDispl = dir;\n    // displ * prevDispl > 0 iff displacement direction === previous direction\n    while (cursor[dir] && displ * prevDispl > 0) {\n      cursor[dir].moveTowards(dir, cursor);\n      prevDispl = displ;\n      displ = pageX - cursor.offset().left;\n    }\n    if (dir*displ < -dir*prevDispl) cursor[-dir].moveTowards(-dir, cursor);\n\n    if (!cursor.anticursor) {\n      // about to start mouse-selecting, the anticursor is gonna get put here\n      this.anticursorPosition = cursor[L] && cursor[L].text.length;\n      // ^ get it? 'cos if there's no cursor[L], it's 0... I'm a terrible person.\n    }\n    else if (cursor.anticursor.parent === this) {\n      // mouse-selecting within this TextBlock, re-insert the anticursor\n      var cursorPosition = cursor[L] && cursor[L].text.length;;\n      if (this.anticursorPosition === cursorPosition) {\n        cursor.anticursor = Point.copy(cursor);\n      }\n      else {\n        if (this.anticursorPosition < cursorPosition) {\n          var newTextPc = cursor[L].splitRight(this.anticursorPosition);\n          cursor[L] = newTextPc;\n        }\n        else {\n          var newTextPc = cursor[R].splitRight(this.anticursorPosition - cursorPosition);\n        }\n        cursor.anticursor = Point(this, newTextPc[L], newTextPc);\n      }\n    }\n  };\n\n  _.blur = function() {\n    MathBlock.prototype.blur.call(this);\n    fuseChildren(this);\n  };\n\n  function fuseChildren(self) {\n    self.jQ[0].normalize();\n\n    var textPcDom = self.jQ[0].firstChild;\n    pray('only node in TextBlock span is Text node', textPcDom.nodeType === 3);\n    // nodeType === 3 has meant a Text node since ancient times:\n    //   http://reference.sitepoint.com/javascript/Node/nodeType\n\n    var textPc = TextPiece(textPcDom.data);\n    textPc.jQadd(textPcDom);\n\n    self.children().disown();\n    return textPc.adopt(self, 0, 0);\n  }\n\n  _.focus = MathBlock.prototype.focus;\n});\n\n/**\n * Piece of plain text, with a TextBlock as a parent and no children.\n * Wraps a single DOMTextNode.\n * For convenience, has a .text property that's just a JavaScript string\n * mirroring the text contents of the DOMTextNode.\n * Text contents must always be nonempty.\n */\nvar TextPiece = P(Node, function(_, super_) {\n  _.init = function(text) {\n    super_.init.call(this);\n    this.text = text;\n  };\n  _.jQadd = function(dom) { this.dom = dom; this.jQ = $(dom); };\n  _.jQize = function() {\n    return this.jQadd(document.createTextNode(this.text));\n  };\n  _.appendText = function(text) {\n    this.text += text;\n    this.dom.appendData(text);\n  };\n  _.prependText = function(text) {\n    this.text = text + this.text;\n    this.dom.insertData(0, text);\n  };\n  _.insTextAtDirEnd = function(text, dir) {\n    prayDirection(dir);\n    if (dir === R) this.appendText(text);\n    else this.prependText(text);\n  };\n  _.splitRight = function(i) {\n    var newPc = TextPiece(this.text.slice(i)).adopt(this.parent, this, this[R]);\n    newPc.jQadd(this.dom.splitText(i));\n    this.text = this.text.slice(0, i);\n    return newPc;\n  };\n\n  function endChar(dir, text) {\n    return text.charAt(dir === L ? 0 : -1 + text.length);\n  }\n\n  _.moveTowards = function(dir, cursor) {\n    prayDirection(dir);\n\n    var ch = endChar(-dir, this.text)\n\n    var from = this[-dir];\n    if (from) from.insTextAtDirEnd(ch, dir);\n    else TextPiece(ch).createDir(-dir, cursor);\n\n    return this.deleteTowards(dir, cursor);\n  };\n\n  _.latex = function() { return this.text; };\n\n  _.deleteTowards = function(dir, cursor) {\n    if (this.text.length > 1) {\n      if (dir === R) {\n        this.dom.deleteData(0, 1);\n        this.text = this.text.slice(1);\n      }\n      else {\n        // note that the order of these 2 lines is annoyingly important\n        // (the second line mutates this.text.length)\n        this.dom.deleteData(-1 + this.text.length, 1);\n        this.text = this.text.slice(0, -1);\n      }\n    }\n    else {\n      this.remove();\n      this.jQ.remove();\n      cursor[dir] = this[dir];\n    }\n  };\n\n  _.selectTowards = function(dir, cursor) {\n    prayDirection(dir);\n    var anticursor = cursor.anticursor;\n\n    var ch = endChar(-dir, this.text)\n\n    if (anticursor[dir] === this) {\n      var newPc = TextPiece(ch).createDir(dir, cursor);\n      anticursor[dir] = newPc;\n      cursor.insDirOf(dir, newPc);\n    }\n    else {\n      var from = this[-dir];\n      if (from) from.insTextAtDirEnd(ch, dir);\n      else {\n        var newPc = TextPiece(ch).createDir(-dir, cursor);\n        newPc.jQ.insDirOf(-dir, cursor.selection.jQ);\n      }\n\n      if (this.text.length === 1 && anticursor[-dir] === this) {\n        anticursor[-dir] = this[-dir]; // `this` will be removed in deleteTowards\n      }\n    }\n\n    return this.deleteTowards(dir, cursor);\n  };\n});\n\nCharCmds.$ =\nLatexCmds.text =\nLatexCmds.textnormal =\nLatexCmds.textrm =\nLatexCmds.textup =\nLatexCmds.textmd = TextBlock;\n\nfunction makeTextBlock(latex, tagName, attrs) {\n  return P(TextBlock, {\n    ctrlSeq: latex,\n    htmlTemplate: '<'+tagName+' '+attrs+'>&0</'+tagName+'>'\n  });\n}\n\nLatexCmds.em = LatexCmds.italic = LatexCmds.italics =\nLatexCmds.emph = LatexCmds.textit = LatexCmds.textsl =\n  makeTextBlock('\\\\textit', 'i', 'class=\"mq-text-mode\"');\nLatexCmds.strong = LatexCmds.bold = LatexCmds.textbf =\n  makeTextBlock('\\\\textbf', 'b', 'class=\"mq-text-mode\"');\nLatexCmds.sf = LatexCmds.textsf =\n  makeTextBlock('\\\\textsf', 'span', 'class=\"mq-sans-serif mq-text-mode\"');\nLatexCmds.tt = LatexCmds.texttt =\n  makeTextBlock('\\\\texttt', 'span', 'class=\"mq-monospace mq-text-mode\"');\nLatexCmds.textsc =\n  makeTextBlock('\\\\textsc', 'span', 'style=\"font-variant:small-caps\" class=\"mq-text-mode\"');\nLatexCmds.uppercase =\n  makeTextBlock('\\\\uppercase', 'span', 'style=\"text-transform:uppercase\" class=\"mq-text-mode\"');\nLatexCmds.lowercase =\n  makeTextBlock('\\\\lowercase', 'span', 'style=\"text-transform:lowercase\" class=\"mq-text-mode\"');\n\n\nvar RootMathCommand = P(MathCommand, function(_, super_) {\n  _.init = function(cursor) {\n    super_.init.call(this, '$');\n    this.cursor = cursor;\n  };\n  _.htmlTemplate = '<span class=\"mq-math-mode\">&0</span>';\n  _.createBlocks = function() {\n    super_.createBlocks.call(this);\n\n    this.ends[L].cursor = this.cursor;\n    this.ends[L].write = function(cursor, ch) {\n      if (ch !== '$')\n        MathBlock.prototype.write.call(this, cursor, ch);\n      else if (this.isEmpty()) {\n        cursor.insRightOf(this.parent);\n        this.parent.deleteTowards(dir, cursor);\n        VanillaSymbol('\\\\$','$').createLeftOf(cursor.show());\n      }\n      else if (!cursor[R])\n        cursor.insRightOf(this.parent);\n      else if (!cursor[L])\n        cursor.insLeftOf(this.parent);\n      else\n        MathBlock.prototype.write.call(this, cursor, ch);\n    };\n  };\n  _.latex = function() {\n    return '$' + this.ends[L].latex() + '$';\n  };\n});\n\nvar RootTextBlock = P(RootMathBlock, function(_, super_) {\n  _.keystroke = function(key) {\n    if (key === 'Spacebar' || key === 'Shift-Spacebar') return;\n    return super_.keystroke.apply(this, arguments);\n  };\n  _.write = function(cursor, ch) {\n    cursor.show().deleteSelection();\n    if (ch === '$')\n      RootMathCommand(cursor).createLeftOf(cursor);\n    else {\n      var html;\n      if (ch === '<') html = '&lt;';\n      else if (ch === '>') html = '&gt;';\n      VanillaSymbol(ch, html).createLeftOf(cursor);\n    }\n  };\n});\nAPI.TextField = function(APIClasses) {\n  return P(APIClasses.EditableField, function(_, super_) {\n    this.RootBlock = RootTextBlock;\n    _.__mathquillify = function() {\n      return super_.__mathquillify.call(this, 'mq-editable-field mq-text-mode');\n    };\n    _.latex = function(latex) {\n      if (arguments.length > 0) {\n        this.__controller.renderLatexText(latex);\n        if (this.__controller.blurred) this.__controller.cursor.hide().parent.blur();\n        return this;\n      }\n      return this.__controller.exportLatex();\n    };\n  });\n};\n/****************************************\n * Input box to type backslash commands\n ***************************************/\n\nvar LatexCommandInput =\nCharCmds['\\\\'] = P(MathCommand, function(_, super_) {\n  _.ctrlSeq = '\\\\';\n  _.replaces = function(replacedFragment) {\n    this._replacedFragment = replacedFragment.disown();\n    this.isEmpty = function() { return false; };\n  };\n  _.htmlTemplate = '<span class=\"mq-latex-command-input mq-non-leaf\">\\\\<span>&0</span></span>';\n  _.textTemplate = ['\\\\'];\n  _.createBlocks = function() {\n    super_.createBlocks.call(this);\n    this.ends[L].focus = function() {\n      this.parent.jQ.addClass('mq-hasCursor');\n      if (this.isEmpty())\n        this.parent.jQ.removeClass('mq-empty');\n\n      return this;\n    };\n    this.ends[L].blur = function() {\n      this.parent.jQ.removeClass('mq-hasCursor');\n      if (this.isEmpty())\n        this.parent.jQ.addClass('mq-empty');\n\n      return this;\n    };\n    this.ends[L].write = function(cursor, ch) {\n      cursor.show().deleteSelection();\n\n      if (ch.match(/[a-z]/i)) VanillaSymbol(ch).createLeftOf(cursor);\n      else {\n        this.parent.renderCommand(cursor);\n        if (ch !== '\\\\' || !this.isEmpty()) this.parent.parent.write(cursor, ch);\n      }\n    };\n    this.ends[L].keystroke = function(key, e, ctrlr) {\n      if (key === 'Tab' || key === 'Enter' || key === 'Spacebar') {\n        this.parent.renderCommand(ctrlr.cursor);\n        e.preventDefault();\n        return;\n      }\n      return super_.keystroke.apply(this, arguments);\n    };\n  };\n  _.createLeftOf = function(cursor) {\n    super_.createLeftOf.call(this, cursor);\n\n    if (this._replacedFragment) {\n      var el = this.jQ[0];\n      this.jQ =\n        this._replacedFragment.jQ.addClass('mq-blur').bind(\n          'mousedown mousemove', //FIXME: is monkey-patching the mousedown and mousemove handlers the right way to do this?\n          function(e) {\n            $(e.target = el).trigger(e);\n            return false;\n          }\n        ).insertBefore(this.jQ).add(this.jQ);\n    }\n  };\n  _.latex = function() {\n    return '\\\\' + this.ends[L].latex() + ' ';\n  };\n  _.renderCommand = function(cursor) {\n    this.jQ = this.jQ.last();\n    this.remove();\n    if (this[R]) {\n      cursor.insLeftOf(this[R]);\n    } else {\n      cursor.insAtRightEnd(this.parent);\n    }\n\n    var latex = this.ends[L].latex();\n    if (!latex) latex = ' ';\n    var cmd = LatexCmds[latex];\n    if (cmd) {\n      cmd = cmd(latex);\n      if (this._replacedFragment) cmd.replaces(this._replacedFragment);\n      cmd.createLeftOf(cursor);\n    }\n    else {\n      cmd = TextBlock();\n      cmd.replaces(latex);\n      cmd.createLeftOf(cursor);\n      cursor.insRightOf(cmd);\n      if (this._replacedFragment)\n        this._replacedFragment.remove();\n    }\n  };\n});\n\n/************************************\n * Symbols for Advanced Mathematics\n ***********************************/\n\nLatexCmds.notin =\nLatexCmds.cong =\nLatexCmds.equiv =\nLatexCmds.oplus =\nLatexCmds.otimes = P(BinaryOperator, function(_, super_) {\n  _.init = function(latex) {\n    super_.init.call(this, '\\\\'+latex+' ', '&'+latex+';');\n  };\n});\n\nLatexCmds['\\u2260'] = LatexCmds.ne = LatexCmds.neq = bind(BinaryOperator,'\\\\ne ','&ne;');\n\nLatexCmds.ast = LatexCmds.star = LatexCmds.loast = LatexCmds.lowast =\n  bind(BinaryOperator,'\\\\ast ','&lowast;');\n  //case 'there4 = // a special exception for this one, perhaps?\nLatexCmds.therefor = LatexCmds.therefore =\n  bind(BinaryOperator,'\\\\therefore ','&there4;');\n\nLatexCmds.cuz = // l33t\nLatexCmds.because = bind(BinaryOperator,'\\\\because ','&#8757;');\n\nLatexCmds.prop = LatexCmds.propto = bind(BinaryOperator,'\\\\propto ','&prop;');\n\nLatexCmds['\\u2248'] = LatexCmds.asymp = LatexCmds.approx = bind(BinaryOperator,'\\\\approx ','&asymp;');\n\nLatexCmds.isin = LatexCmds['in'] = bind(BinaryOperator,'\\\\in ','&isin;');\n\nLatexCmds.ni = LatexCmds.contains = bind(BinaryOperator,'\\\\ni ','&ni;');\n\nLatexCmds.notni = LatexCmds.niton = LatexCmds.notcontains = LatexCmds.doesnotcontain =\n  bind(BinaryOperator,'\\\\not\\\\ni ','&#8716;');\n\nLatexCmds.sub = LatexCmds.subset = bind(BinaryOperator,'\\\\subset ','&sub;');\n\nLatexCmds.sup = LatexCmds.supset = LatexCmds.superset =\n  bind(BinaryOperator,'\\\\supset ','&sup;');\n\nLatexCmds.nsub = LatexCmds.notsub =\nLatexCmds.nsubset = LatexCmds.notsubset =\n  bind(BinaryOperator,'\\\\not\\\\subset ','&#8836;');\n\nLatexCmds.nsup = LatexCmds.notsup =\nLatexCmds.nsupset = LatexCmds.notsupset =\nLatexCmds.nsuperset = LatexCmds.notsuperset =\n  bind(BinaryOperator,'\\\\not\\\\supset ','&#8837;');\n\nLatexCmds.sube = LatexCmds.subeq = LatexCmds.subsete = LatexCmds.subseteq =\n  bind(BinaryOperator,'\\\\subseteq ','&sube;');\n\nLatexCmds.supe = LatexCmds.supeq =\nLatexCmds.supsete = LatexCmds.supseteq =\nLatexCmds.supersete = LatexCmds.superseteq =\n  bind(BinaryOperator,'\\\\supseteq ','&supe;');\n\nLatexCmds.nsube = LatexCmds.nsubeq =\nLatexCmds.notsube = LatexCmds.notsubeq =\nLatexCmds.nsubsete = LatexCmds.nsubseteq =\nLatexCmds.notsubsete = LatexCmds.notsubseteq =\n  bind(BinaryOperator,'\\\\not\\\\subseteq ','&#8840;');\n\nLatexCmds.nsupe = LatexCmds.nsupeq =\nLatexCmds.notsupe = LatexCmds.notsupeq =\nLatexCmds.nsupsete = LatexCmds.nsupseteq =\nLatexCmds.notsupsete = LatexCmds.notsupseteq =\nLatexCmds.nsupersete = LatexCmds.nsuperseteq =\nLatexCmds.notsupersete = LatexCmds.notsuperseteq =\n  bind(BinaryOperator,'\\\\not\\\\supseteq ','&#8841;');\n\n\n//the canonical sets of numbers\nLatexCmds.N = LatexCmds.naturals = LatexCmds.Naturals =\n  bind(VanillaSymbol,'\\\\mathbb{N}','&#8469;');\n\nLatexCmds.P =\nLatexCmds.primes = LatexCmds.Primes =\nLatexCmds.projective = LatexCmds.Projective =\nLatexCmds.probability = LatexCmds.Probability =\n  bind(VanillaSymbol,'\\\\mathbb{P}','&#8473;');\n\nLatexCmds.Z = LatexCmds.integers = LatexCmds.Integers =\n  bind(VanillaSymbol,'\\\\mathbb{Z}','&#8484;');\n\nLatexCmds.Q = LatexCmds.rationals = LatexCmds.Rationals =\n  bind(VanillaSymbol,'\\\\mathbb{Q}','&#8474;');\n\nLatexCmds.R = LatexCmds.reals = LatexCmds.Reals =\n  bind(VanillaSymbol,'\\\\mathbb{R}','&#8477;');\n\nLatexCmds.C =\nLatexCmds.complex = LatexCmds.Complex =\nLatexCmds.complexes = LatexCmds.Complexes =\nLatexCmds.complexplane = LatexCmds.Complexplane = LatexCmds.ComplexPlane =\n  bind(VanillaSymbol,'\\\\mathbb{C}','&#8450;');\n\nLatexCmds.H = LatexCmds.Hamiltonian = LatexCmds.quaternions = LatexCmds.Quaternions =\n  bind(VanillaSymbol,'\\\\mathbb{H}','&#8461;');\n\n//spacing\nLatexCmds.quad = LatexCmds.emsp = bind(VanillaSymbol,'\\\\quad ','    ');\nLatexCmds.qquad = bind(VanillaSymbol,'\\\\qquad ','        ');\n/* spacing special characters, gonna have to implement this in LatexCommandInput::onText somehow\ncase ',':\n  return VanillaSymbol('\\\\, ',' ');\ncase ':':\n  return VanillaSymbol('\\\\: ','  ');\ncase ';':\n  return VanillaSymbol('\\\\; ','   ');\ncase '!':\n  return Symbol('\\\\! ','<span style=\"margin-right:-.2em\"></span>');\n*/\n\n//binary operators\nLatexCmds.diamond = bind(VanillaSymbol, '\\\\diamond ', '&#9671;');\nLatexCmds.bigtriangleup = bind(VanillaSymbol, '\\\\bigtriangleup ', '&#9651;');\nLatexCmds.ominus = bind(VanillaSymbol, '\\\\ominus ', '&#8854;');\nLatexCmds.uplus = bind(VanillaSymbol, '\\\\uplus ', '&#8846;');\nLatexCmds.bigtriangledown = bind(VanillaSymbol, '\\\\bigtriangledown ', '&#9661;');\nLatexCmds.sqcap = bind(VanillaSymbol, '\\\\sqcap ', '&#8851;');\nLatexCmds.triangleleft = bind(VanillaSymbol, '\\\\triangleleft ', '&#8882;');\nLatexCmds.sqcup = bind(VanillaSymbol, '\\\\sqcup ', '&#8852;');\nLatexCmds.triangleright = bind(VanillaSymbol, '\\\\triangleright ', '&#8883;');\n//circledot is not a not real LaTex command see https://github.com/mathquill/mathquill/pull/552 for more details\nLatexCmds.odot = LatexCmds.circledot = bind(VanillaSymbol, '\\\\odot ', '&#8857;');\nLatexCmds.bigcirc = bind(VanillaSymbol, '\\\\bigcirc ', '&#9711;');\nLatexCmds.dagger = bind(VanillaSymbol, '\\\\dagger ', '&#0134;');\nLatexCmds.ddagger = bind(VanillaSymbol, '\\\\ddagger ', '&#135;');\nLatexCmds.wr = bind(VanillaSymbol, '\\\\wr ', '&#8768;');\nLatexCmds.amalg = bind(VanillaSymbol, '\\\\amalg ', '&#8720;');\n\n//relationship symbols\nLatexCmds.models = bind(VanillaSymbol, '\\\\models ', '&#8872;');\nLatexCmds.prec = bind(VanillaSymbol, '\\\\prec ', '&#8826;');\nLatexCmds.succ = bind(VanillaSymbol, '\\\\succ ', '&#8827;');\nLatexCmds.preceq = bind(VanillaSymbol, '\\\\preceq ', '&#8828;');\nLatexCmds.succeq = bind(VanillaSymbol, '\\\\succeq ', '&#8829;');\nLatexCmds.simeq = bind(VanillaSymbol, '\\\\simeq ', '&#8771;');\nLatexCmds.mid = bind(VanillaSymbol, '\\\\mid ', '&#8739;');\nLatexCmds.ll = bind(VanillaSymbol, '\\\\ll ', '&#8810;');\nLatexCmds.gg = bind(VanillaSymbol, '\\\\gg ', '&#8811;');\nLatexCmds.parallel = bind(VanillaSymbol, '\\\\parallel ', '&#8741;');\nLatexCmds.nparallel = bind(VanillaSymbol, '\\\\nparallel ', '&#8742;');\nLatexCmds.bowtie = bind(VanillaSymbol, '\\\\bowtie ', '&#8904;');\nLatexCmds.sqsubset = bind(VanillaSymbol, '\\\\sqsubset ', '&#8847;');\nLatexCmds.sqsupset = bind(VanillaSymbol, '\\\\sqsupset ', '&#8848;');\nLatexCmds.smile = bind(VanillaSymbol, '\\\\smile ', '&#8995;');\nLatexCmds.sqsubseteq = bind(VanillaSymbol, '\\\\sqsubseteq ', '&#8849;');\nLatexCmds.sqsupseteq = bind(VanillaSymbol, '\\\\sqsupseteq ', '&#8850;');\nLatexCmds.doteq = bind(VanillaSymbol, '\\\\doteq ', '&#8784;');\nLatexCmds.frown = bind(VanillaSymbol, '\\\\frown ', '&#8994;');\nLatexCmds.vdash = bind(VanillaSymbol, '\\\\vdash ', '&#8870;');\nLatexCmds.dashv = bind(VanillaSymbol, '\\\\dashv ', '&#8867;');\nLatexCmds.nless = bind(VanillaSymbol, '\\\\nless ', '&#8814;');\nLatexCmds.ngtr = bind(VanillaSymbol, '\\\\ngtr ', '&#8815;');\n\n//arrows\nLatexCmds.longleftarrow = bind(VanillaSymbol, '\\\\longleftarrow ', '&#8592;');\nLatexCmds.longrightarrow = bind(VanillaSymbol, '\\\\longrightarrow ', '&#8594;');\nLatexCmds.Longleftarrow = bind(VanillaSymbol, '\\\\Longleftarrow ', '&#8656;');\nLatexCmds.Longrightarrow = bind(VanillaSymbol, '\\\\Longrightarrow ', '&#8658;');\nLatexCmds.longleftrightarrow = bind(VanillaSymbol, '\\\\longleftrightarrow ', '&#8596;');\nLatexCmds.updownarrow = bind(VanillaSymbol, '\\\\updownarrow ', '&#8597;');\nLatexCmds.Longleftrightarrow = bind(VanillaSymbol, '\\\\Longleftrightarrow ', '&#8660;');\nLatexCmds.Updownarrow = bind(VanillaSymbol, '\\\\Updownarrow ', '&#8661;');\nLatexCmds.mapsto = bind(VanillaSymbol, '\\\\mapsto ', '&#8614;');\nLatexCmds.nearrow = bind(VanillaSymbol, '\\\\nearrow ', '&#8599;');\nLatexCmds.hookleftarrow = bind(VanillaSymbol, '\\\\hookleftarrow ', '&#8617;');\nLatexCmds.hookrightarrow = bind(VanillaSymbol, '\\\\hookrightarrow ', '&#8618;');\nLatexCmds.searrow = bind(VanillaSymbol, '\\\\searrow ', '&#8600;');\nLatexCmds.leftharpoonup = bind(VanillaSymbol, '\\\\leftharpoonup ', '&#8636;');\nLatexCmds.rightharpoonup = bind(VanillaSymbol, '\\\\rightharpoonup ', '&#8640;');\nLatexCmds.swarrow = bind(VanillaSymbol, '\\\\swarrow ', '&#8601;');\nLatexCmds.leftharpoondown = bind(VanillaSymbol, '\\\\leftharpoondown ', '&#8637;');\nLatexCmds.rightharpoondown = bind(VanillaSymbol, '\\\\rightharpoondown ', '&#8641;');\nLatexCmds.nwarrow = bind(VanillaSymbol, '\\\\nwarrow ', '&#8598;');\n\n//Misc\nLatexCmds.ldots = bind(VanillaSymbol, '\\\\ldots ', '&#8230;');\nLatexCmds.cdots = bind(VanillaSymbol, '\\\\cdots ', '&#8943;');\nLatexCmds.vdots = bind(VanillaSymbol, '\\\\vdots ', '&#8942;');\nLatexCmds.ddots = bind(VanillaSymbol, '\\\\ddots ', '&#8945;');\nLatexCmds.surd = bind(VanillaSymbol, '\\\\surd ', '&#8730;');\nLatexCmds.triangle = bind(VanillaSymbol, '\\\\triangle ', '&#9651;');\nLatexCmds.ell = bind(VanillaSymbol, '\\\\ell ', '&#8467;');\nLatexCmds.top = bind(VanillaSymbol, '\\\\top ', '&#8868;');\nLatexCmds.flat = bind(VanillaSymbol, '\\\\flat ', '&#9837;');\nLatexCmds.natural = bind(VanillaSymbol, '\\\\natural ', '&#9838;');\nLatexCmds.sharp = bind(VanillaSymbol, '\\\\sharp ', '&#9839;');\nLatexCmds.wp = bind(VanillaSymbol, '\\\\wp ', '&#8472;');\nLatexCmds.bot = bind(VanillaSymbol, '\\\\bot ', '&#8869;');\nLatexCmds.clubsuit = bind(VanillaSymbol, '\\\\clubsuit ', '&#9827;');\nLatexCmds.diamondsuit = bind(VanillaSymbol, '\\\\diamondsuit ', '&#9826;');\nLatexCmds.heartsuit = bind(VanillaSymbol, '\\\\heartsuit ', '&#9825;');\nLatexCmds.spadesuit = bind(VanillaSymbol, '\\\\spadesuit ', '&#9824;');\n//not real LaTex command see https://github.com/mathquill/mathquill/pull/552 for more details\nLatexCmds.parallelogram = bind(VanillaSymbol, '\\\\parallelogram ', '&#9649;');\nLatexCmds.square = bind(VanillaSymbol, '\\\\square ', '&#11036;');\n\n//variable-sized\nLatexCmds.oint = bind(VanillaSymbol, '\\\\oint ', '&#8750;');\nLatexCmds.bigcap = bind(VanillaSymbol, '\\\\bigcap ', '&#8745;');\nLatexCmds.bigcup = bind(VanillaSymbol, '\\\\bigcup ', '&#8746;');\nLatexCmds.bigsqcup = bind(VanillaSymbol, '\\\\bigsqcup ', '&#8852;');\nLatexCmds.bigvee = bind(VanillaSymbol, '\\\\bigvee ', '&#8744;');\nLatexCmds.bigwedge = bind(VanillaSymbol, '\\\\bigwedge ', '&#8743;');\nLatexCmds.bigodot = bind(VanillaSymbol, '\\\\bigodot ', '&#8857;');\nLatexCmds.bigotimes = bind(VanillaSymbol, '\\\\bigotimes ', '&#8855;');\nLatexCmds.bigoplus = bind(VanillaSymbol, '\\\\bigoplus ', '&#8853;');\nLatexCmds.biguplus = bind(VanillaSymbol, '\\\\biguplus ', '&#8846;');\n\n//delimiters\nLatexCmds.lfloor = bind(VanillaSymbol, '\\\\lfloor ', '&#8970;');\nLatexCmds.rfloor = bind(VanillaSymbol, '\\\\rfloor ', '&#8971;');\nLatexCmds.lceil = bind(VanillaSymbol, '\\\\lceil ', '&#8968;');\nLatexCmds.rceil = bind(VanillaSymbol, '\\\\rceil ', '&#8969;');\nLatexCmds.opencurlybrace = LatexCmds.lbrace = bind(VanillaSymbol, '\\\\lbrace ', '{');\nLatexCmds.closecurlybrace = LatexCmds.rbrace = bind(VanillaSymbol, '\\\\rbrace ', '}');\nLatexCmds.lbrack = bind(VanillaSymbol, '[');\nLatexCmds.rbrack = bind(VanillaSymbol, ']');\n\n//various symbols\nLatexCmds['\\u222b'] =\nLatexCmds['int'] =\nLatexCmds.integral = bind(Symbol,'\\\\int ','<big>&int;</big>');\n\nLatexCmds.slash = bind(VanillaSymbol, '/');\nLatexCmds.vert = bind(VanillaSymbol,'|');\nLatexCmds.perp = LatexCmds.perpendicular = bind(VanillaSymbol,'\\\\perp ','&perp;');\nLatexCmds.nabla = LatexCmds.del = bind(VanillaSymbol,'\\\\nabla ','&nabla;');\nLatexCmds.hbar = bind(VanillaSymbol,'\\\\hbar ','&#8463;');\n\nLatexCmds.AA = LatexCmds.Angstrom = LatexCmds.angstrom =\n  bind(VanillaSymbol,'\\\\text\\\\AA ','&#8491;');\n\nLatexCmds.ring = LatexCmds.circ = LatexCmds.circle =\n  bind(VanillaSymbol,'\\\\circ ','&#8728;');\n\nLatexCmds.bull = LatexCmds.bullet = bind(VanillaSymbol,'\\\\bullet ','&bull;');\n\nLatexCmds.setminus = LatexCmds.smallsetminus =\n  bind(VanillaSymbol,'\\\\setminus ','&#8726;');\n\nLatexCmds.not = //bind(Symbol,'\\\\not ','<span class=\"not\">/</span>');\nLatexCmds['\\u00ac'] = LatexCmds.neg = bind(VanillaSymbol,'\\\\neg ','&not;');\n\nLatexCmds['\\u2026'] = LatexCmds.dots = LatexCmds.ellip = LatexCmds.hellip =\nLatexCmds.ellipsis = LatexCmds.hellipsis =\n  bind(VanillaSymbol,'\\\\dots ','&hellip;');\n\nLatexCmds.converges =\nLatexCmds.darr = LatexCmds.dnarr = LatexCmds.dnarrow = LatexCmds.downarrow =\n  bind(VanillaSymbol,'\\\\downarrow ','&darr;');\n\nLatexCmds.dArr = LatexCmds.dnArr = LatexCmds.dnArrow = LatexCmds.Downarrow =\n  bind(VanillaSymbol,'\\\\Downarrow ','&dArr;');\n\nLatexCmds.diverges = LatexCmds.uarr = LatexCmds.uparrow =\n  bind(VanillaSymbol,'\\\\uparrow ','&uarr;');\n\nLatexCmds.uArr = LatexCmds.Uparrow = bind(VanillaSymbol,'\\\\Uparrow ','&uArr;');\n\nLatexCmds.to = bind(BinaryOperator,'\\\\to ','&rarr;');\n\nLatexCmds.rarr = LatexCmds.rightarrow = bind(VanillaSymbol,'\\\\rightarrow ','&rarr;');\n\nLatexCmds.implies = bind(BinaryOperator,'\\\\Rightarrow ','&rArr;');\n\nLatexCmds.rArr = LatexCmds.Rightarrow = bind(VanillaSymbol,'\\\\Rightarrow ','&rArr;');\n\nLatexCmds.gets = bind(BinaryOperator,'\\\\gets ','&larr;');\n\nLatexCmds.larr = LatexCmds.leftarrow = bind(VanillaSymbol,'\\\\leftarrow ','&larr;');\n\nLatexCmds.impliedby = bind(BinaryOperator,'\\\\Leftarrow ','&lArr;');\n\nLatexCmds.lArr = LatexCmds.Leftarrow = bind(VanillaSymbol,'\\\\Leftarrow ','&lArr;');\n\nLatexCmds.harr = LatexCmds.lrarr = LatexCmds.leftrightarrow =\n  bind(VanillaSymbol,'\\\\leftrightarrow ','&harr;');\n\nLatexCmds.iff = bind(BinaryOperator,'\\\\Leftrightarrow ','&hArr;');\n\nLatexCmds.hArr = LatexCmds.lrArr = LatexCmds.Leftrightarrow =\n  bind(VanillaSymbol,'\\\\Leftrightarrow ','&hArr;');\n\nLatexCmds.Re = LatexCmds.Real = LatexCmds.real = bind(VanillaSymbol,'\\\\Re ','&real;');\n\nLatexCmds.Im = LatexCmds.imag =\nLatexCmds.image = LatexCmds.imagin = LatexCmds.imaginary = LatexCmds.Imaginary =\n  bind(VanillaSymbol,'\\\\Im ','&image;');\n\nLatexCmds.part = LatexCmds.partial = bind(VanillaSymbol,'\\\\partial ','&part;');\n\nLatexCmds.infty = LatexCmds.infin = LatexCmds.infinity =\n  bind(VanillaSymbol,'\\\\infty ','&infin;');\n\nLatexCmds.alef = LatexCmds.alefsym = LatexCmds.aleph = LatexCmds.alephsym =\n  bind(VanillaSymbol,'\\\\aleph ','&alefsym;');\n\nLatexCmds.xist = //LOL\nLatexCmds.xists = LatexCmds.exist = LatexCmds.exists =\n  bind(VanillaSymbol,'\\\\exists ','&exist;');\n\nLatexCmds.and = LatexCmds.land = LatexCmds.wedge =\n  bind(VanillaSymbol,'\\\\wedge ','&and;');\n\nLatexCmds.or = LatexCmds.lor = LatexCmds.vee = bind(VanillaSymbol,'\\\\vee ','&or;');\n\nLatexCmds.o = LatexCmds.O =\nLatexCmds.empty = LatexCmds.emptyset =\nLatexCmds.oslash = LatexCmds.Oslash =\nLatexCmds.nothing = LatexCmds.varnothing =\n  bind(BinaryOperator,'\\\\varnothing ','&empty;');\n\nLatexCmds.cup = LatexCmds.union = bind(BinaryOperator,'\\\\cup ','&cup;');\n\nLatexCmds.cap = LatexCmds.intersect = LatexCmds.intersection =\n  bind(BinaryOperator,'\\\\cap ','&cap;');\n\n// FIXME: the correct LaTeX would be ^\\circ but we can't parse that\nLatexCmds.deg = LatexCmds.degree = bind(VanillaSymbol,'\\\\degree ','&deg;');\n\nLatexCmds.ang = LatexCmds.angle = bind(VanillaSymbol,'\\\\angle ','&ang;');\nLatexCmds.measuredangle = bind(VanillaSymbol,'\\\\measuredangle ','&#8737;');\n/*********************************\n * Symbols for Basic Mathematics\n ********************************/\n\nvar Digit = P(VanillaSymbol, function(_, super_) {\n  _.createLeftOf = function(cursor) {\n    if (cursor.options.autoSubscriptNumerals\n        && cursor.parent !== cursor.parent.parent.sub\n        && ((cursor[L] instanceof Variable && cursor[L].isItalic !== false)\n            || (cursor[L] instanceof SupSub\n                && cursor[L][L] instanceof Variable\n                && cursor[L][L].isItalic !== false))) {\n      LatexCmds._().createLeftOf(cursor);\n      super_.createLeftOf.call(this, cursor);\n      cursor.insRightOf(cursor.parent.parent);\n    }\n    else super_.createLeftOf.call(this, cursor);\n  };\n});\n\nvar Variable = P(Symbol, function(_, super_) {\n  _.init = function(ch, html) {\n    super_.init.call(this, ch, '<var>'+(html || ch)+'</var>');\n  };\n  _.text = function() {\n    var text = this.ctrlSeq;\n    if (this[L] && !(this[L] instanceof Variable)\n        && !(this[L] instanceof BinaryOperator)\n        && this[L].ctrlSeq !== \"\\\\ \")\n      text = '*' + text;\n    if (this[R] && !(this[R] instanceof BinaryOperator)\n        && !(this[R] instanceof SupSub))\n      text += '*';\n    return text;\n  };\n});\n\nOptions.p.autoCommands = { _maxLength: 0 };\noptionProcessors.autoCommands = function(cmds) {\n  if (!/^[a-z]+(?: [a-z]+)*$/i.test(cmds)) {\n    throw '\"'+cmds+'\" not a space-delimited list of only letters';\n  }\n  var list = cmds.split(' '), dict = {}, maxLength = 0;\n  for (var i = 0; i < list.length; i += 1) {\n    var cmd = list[i];\n    if (cmd.length < 2) {\n      throw 'autocommand \"'+cmd+'\" not minimum length of 2';\n    }\n    if (LatexCmds[cmd] === OperatorName) {\n      throw '\"' + cmd + '\" is a built-in operator name';\n    }\n    dict[cmd] = 1;\n    maxLength = max(maxLength, cmd.length);\n  }\n  dict._maxLength = maxLength;\n  return dict;\n};\n\nvar Letter = P(Variable, function(_, super_) {\n  _.init = function(ch) { return super_.init.call(this, this.letter = ch); };\n  _.createLeftOf = function(cursor) {\n    var autoCmds = cursor.options.autoCommands, maxLength = autoCmds._maxLength;\n    if (maxLength > 0) {\n      // want longest possible autocommand, so join together longest\n      // sequence of letters\n      var str = this.letter, l = cursor[L], i = 1;\n      while (l instanceof Letter && i < maxLength) {\n        str = l.letter + str, l = l[L], i += 1;\n      }\n      // check for an autocommand, going thru substrings longest to shortest\n      while (str.length) {\n        if (autoCmds.hasOwnProperty(str)) {\n          for (var i = 2, l = cursor[L]; i < str.length; i += 1, l = l[L]);\n          Fragment(l, cursor[L]).remove();\n          cursor[L] = l[L];\n          return LatexCmds[str](str).createLeftOf(cursor);\n        }\n        str = str.slice(1);\n      }\n    }\n    super_.createLeftOf.apply(this, arguments);\n  };\n  _.italicize = function(bool) {\n    this.isItalic = bool;\n    this.jQ.toggleClass('mq-operator-name', !bool);\n    return this;\n  };\n  _.finalizeTree = _.siblingDeleted = _.siblingCreated = function(opts, dir) {\n    // don't auto-un-italicize if the sibling to my right changed (dir === R or\n    // undefined) and it's now a Letter, it will un-italicize everyone\n    if (dir !== L && this[R] instanceof Letter) return;\n    this.autoUnItalicize(opts);\n  };\n  _.autoUnItalicize = function(opts) {\n    var autoOps = opts.autoOperatorNames;\n    if (autoOps._maxLength === 0) return;\n    // want longest possible operator names, so join together entire contiguous\n    // sequence of letters\n    var str = this.letter;\n    for (var l = this[L]; l instanceof Letter; l = l[L]) str = l.letter + str;\n    for (var r = this[R]; r instanceof Letter; r = r[R]) str += r.letter;\n\n    // removeClass and delete flags from all letters before figuring out\n    // which, if any, are part of an operator name\n    Fragment(l[R] || this.parent.ends[L], r[L] || this.parent.ends[R]).each(function(el) {\n      el.italicize(true).jQ.removeClass('mq-first mq-last');\n      el.ctrlSeq = el.letter;\n    });\n\n    // check for operator names: at each position from left to right, check\n    // substrings from longest to shortest\n    outer: for (var i = 0, first = l[R] || this.parent.ends[L]; i < str.length; i += 1, first = first[R]) {\n      for (var len = min(autoOps._maxLength, str.length - i); len > 0; len -= 1) {\n        var word = str.slice(i, i + len);\n        if (autoOps.hasOwnProperty(word)) {\n          for (var j = 0, letter = first; j < len; j += 1, letter = letter[R]) {\n            letter.italicize(false);\n            var last = letter;\n          }\n\n          var isBuiltIn = BuiltInOpNames.hasOwnProperty(word);\n          first.ctrlSeq = (isBuiltIn ? '\\\\' : '\\\\operatorname{') + first.ctrlSeq;\n          last.ctrlSeq += (isBuiltIn ? ' ' : '}');\n          if (TwoWordOpNames.hasOwnProperty(word)) last[L][L][L].jQ.addClass('mq-last');\n          if (nonOperatorSymbol(first[L])) first.jQ.addClass('mq-first');\n          if (nonOperatorSymbol(last[R])) last.jQ.addClass('mq-last');\n\n          i += len - 1;\n          first = last;\n          continue outer;\n        }\n      }\n    }\n  };\n  function nonOperatorSymbol(node) {\n    return node instanceof Symbol && !(node instanceof BinaryOperator);\n  }\n});\nvar BuiltInOpNames = {}; // the set of operator names like \\sin, \\cos, etc that\n  // are built-into LaTeX: http://latex.wikia.com/wiki/List_of_LaTeX_symbols#Named_operators:_sin.2C_cos.2C_etc.\n  // MathQuill auto-unitalicizes some operator names not in that set, like 'hcf'\n  // and 'arsinh', which must be exported as \\operatorname{hcf} and\n  // \\operatorname{arsinh}. Note: over/under line/arrow \\lim variants like\n  // \\varlimsup are not supported\nvar AutoOpNames = Options.p.autoOperatorNames = { _maxLength: 9 }; // the set\n  // of operator names that MathQuill auto-unitalicizes by default; overridable\nvar TwoWordOpNames = { limsup: 1, liminf: 1, projlim: 1, injlim: 1 };\n(function() {\n  var mostOps = ('arg deg det dim exp gcd hom inf ker lg lim ln log max min sup'\n                 + ' limsup liminf injlim projlim Pr').split(' ');\n  for (var i = 0; i < mostOps.length; i += 1) {\n    BuiltInOpNames[mostOps[i]] = AutoOpNames[mostOps[i]] = 1;\n  }\n\n  var builtInTrigs = // why coth but not sech and csch, LaTeX?\n    'sin cos tan arcsin arccos arctan sinh cosh tanh sec csc cot coth'.split(' ');\n  for (var i = 0; i < builtInTrigs.length; i += 1) {\n    BuiltInOpNames[builtInTrigs[i]] = 1;\n  }\n\n  var autoTrigs = 'sin cos tan sec cosec csc cotan cot ctg'.split(' ');\n  for (var i = 0; i < autoTrigs.length; i += 1) {\n    AutoOpNames[autoTrigs[i]] =\n    AutoOpNames['arc'+autoTrigs[i]] =\n    AutoOpNames[autoTrigs[i]+'h'] =\n    AutoOpNames['ar'+autoTrigs[i]+'h'] =\n    AutoOpNames['arc'+autoTrigs[i]+'h'] = 1;\n  }\n\n  // compat with some of the nonstandard LaTeX exported by MathQuill\n  // before #247. None of these are real LaTeX commands so, seems safe\n  var moreNonstandardOps = 'gcf hcf lcm proj span'.split(' ');\n  for (var i = 0; i < moreNonstandardOps.length; i += 1) {\n    AutoOpNames[moreNonstandardOps[i]] = 1;\n  }\n}());\noptionProcessors.autoOperatorNames = function(cmds) {\n  if (!/^[a-z]+(?: [a-z]+)*$/i.test(cmds)) {\n    throw '\"'+cmds+'\" not a space-delimited list of only letters';\n  }\n  var list = cmds.split(' '), dict = {}, maxLength = 0;\n  for (var i = 0; i < list.length; i += 1) {\n    var cmd = list[i];\n    if (cmd.length < 2) {\n      throw '\"'+cmd+'\" not minimum length of 2';\n    }\n    dict[cmd] = 1;\n    maxLength = max(maxLength, cmd.length);\n  }\n  dict._maxLength = maxLength;\n  return dict;\n};\nvar OperatorName = P(Symbol, function(_, super_) {\n  _.init = function(fn) { this.ctrlSeq = fn; };\n  _.createLeftOf = function(cursor) {\n    var fn = this.ctrlSeq;\n    for (var i = 0; i < fn.length; i += 1) {\n      Letter(fn.charAt(i)).createLeftOf(cursor);\n    }\n  };\n  _.parser = function() {\n    var fn = this.ctrlSeq;\n    var block = MathBlock();\n    for (var i = 0; i < fn.length; i += 1) {\n      Letter(fn.charAt(i)).adopt(block, block.ends[R], 0);\n    }\n    return Parser.succeed(block.children());\n  };\n});\nfor (var fn in AutoOpNames) if (AutoOpNames.hasOwnProperty(fn)) {\n  LatexCmds[fn] = OperatorName;\n}\nLatexCmds.operatorname = P(MathCommand, function(_) {\n  _.createLeftOf = noop;\n  _.numBlocks = function() { return 1; };\n  _.parser = function() {\n    return latexMathParser.block.map(function(b) { return b.children(); });\n  };\n});\n\nLatexCmds.f = P(Letter, function(_, super_) {\n  _.init = function() {\n    Symbol.p.init.call(this, this.letter = 'f', '<var class=\"mq-f\">f</var>');\n  };\n  _.italicize = function(bool) {\n    this.jQ.html('f').toggleClass('mq-f', bool);\n    return super_.italicize.apply(this, arguments);\n  };\n});\n\n// VanillaSymbol's\nLatexCmds[' '] = LatexCmds.space = bind(VanillaSymbol, '\\\\ ', '&nbsp;');\n\nLatexCmds[\"'\"] = LatexCmds.prime = bind(VanillaSymbol, \"'\", '&prime;');\n\nLatexCmds.backslash = bind(VanillaSymbol,'\\\\backslash ','\\\\');\nif (!CharCmds['\\\\']) CharCmds['\\\\'] = LatexCmds.backslash;\n\nLatexCmds.$ = bind(VanillaSymbol, '\\\\$', '$');\n\n// does not use Symbola font\nvar NonSymbolaSymbol = P(Symbol, function(_, super_) {\n  _.init = function(ch, html) {\n    super_.init.call(this, ch, '<span class=\"mq-nonSymbola\">'+(html || ch)+'</span>');\n  };\n});\n\nLatexCmds['@'] = NonSymbolaSymbol;\nLatexCmds['&'] = bind(NonSymbolaSymbol, '\\\\&', '&amp;');\nLatexCmds['%'] = bind(NonSymbolaSymbol, '\\\\%', '%');\n\n//the following are all Greek to me, but this helped a lot: http://www.ams.org/STIX/ion/stixsig03.html\n\n//lowercase Greek letter variables\nLatexCmds.alpha =\nLatexCmds.beta =\nLatexCmds.gamma =\nLatexCmds.delta =\nLatexCmds.zeta =\nLatexCmds.eta =\nLatexCmds.theta =\nLatexCmds.iota =\nLatexCmds.kappa =\nLatexCmds.mu =\nLatexCmds.nu =\nLatexCmds.xi =\nLatexCmds.rho =\nLatexCmds.sigma =\nLatexCmds.tau =\nLatexCmds.chi =\nLatexCmds.psi =\nLatexCmds.omega = P(Variable, function(_, super_) {\n  _.init = function(latex) {\n    super_.init.call(this,'\\\\'+latex+' ','&'+latex+';');\n  };\n});\n\n//why can't anybody FUCKING agree on these\nLatexCmds.phi = //W3C or Unicode?\n  bind(Variable,'\\\\phi ','&#981;');\n\nLatexCmds.phiv = //Elsevier and 9573-13\nLatexCmds.varphi = //AMS and LaTeX\n  bind(Variable,'\\\\varphi ','&phi;');\n\nLatexCmds.epsilon = //W3C or Unicode?\n  bind(Variable,'\\\\epsilon ','&#1013;');\n\nLatexCmds.epsiv = //Elsevier and 9573-13\nLatexCmds.varepsilon = //AMS and LaTeX\n  bind(Variable,'\\\\varepsilon ','&epsilon;');\n\nLatexCmds.piv = //W3C/Unicode and Elsevier and 9573-13\nLatexCmds.varpi = //AMS and LaTeX\n  bind(Variable,'\\\\varpi ','&piv;');\n\nLatexCmds.sigmaf = //W3C/Unicode\nLatexCmds.sigmav = //Elsevier\nLatexCmds.varsigma = //LaTeX\n  bind(Variable,'\\\\varsigma ','&sigmaf;');\n\nLatexCmds.thetav = //Elsevier and 9573-13\nLatexCmds.vartheta = //AMS and LaTeX\nLatexCmds.thetasym = //W3C/Unicode\n  bind(Variable,'\\\\vartheta ','&thetasym;');\n\nLatexCmds.upsilon = //AMS and LaTeX and W3C/Unicode\nLatexCmds.upsi = //Elsevier and 9573-13\n  bind(Variable,'\\\\upsilon ','&upsilon;');\n\n//these aren't even mentioned in the HTML character entity references\nLatexCmds.gammad = //Elsevier\nLatexCmds.Gammad = //9573-13 -- WTF, right? I dunno if this was a typo in the reference (see above)\nLatexCmds.digamma = //LaTeX\n  bind(Variable,'\\\\digamma ','&#989;');\n\nLatexCmds.kappav = //Elsevier\nLatexCmds.varkappa = //AMS and LaTeX\n  bind(Variable,'\\\\varkappa ','&#1008;');\n\nLatexCmds.rhov = //Elsevier and 9573-13\nLatexCmds.varrho = //AMS and LaTeX\n  bind(Variable,'\\\\varrho ','&#1009;');\n\n//Greek constants, look best in non-italicized Times New Roman\nLatexCmds.pi = LatexCmds['\\u03c0'] = bind(NonSymbolaSymbol,'\\\\pi ','&pi;');\nLatexCmds.lambda = bind(NonSymbolaSymbol,'\\\\lambda ','&lambda;');\n\n//uppercase greek letters\n\nLatexCmds.Upsilon = //LaTeX\nLatexCmds.Upsi = //Elsevier and 9573-13\nLatexCmds.upsih = //W3C/Unicode \"upsilon with hook\"\nLatexCmds.Upsih = //'cos it makes sense to me\n  bind(Symbol,'\\\\Upsilon ','<var style=\"font-family: serif\">&upsih;</var>'); //Symbola's 'upsilon with a hook' is a capital Y without hooks :(\n\n//other symbols with the same LaTeX command and HTML character entity reference\nLatexCmds.Gamma =\nLatexCmds.Delta =\nLatexCmds.Theta =\nLatexCmds.Lambda =\nLatexCmds.Xi =\nLatexCmds.Pi =\nLatexCmds.Sigma =\nLatexCmds.Phi =\nLatexCmds.Psi =\nLatexCmds.Omega =\nLatexCmds.forall = P(VanillaSymbol, function(_, super_) {\n  _.init = function(latex) {\n    super_.init.call(this,'\\\\'+latex+' ','&'+latex+';');\n  };\n});\n\n// symbols that aren't a single MathCommand, but are instead a whole\n// Fragment. Creates the Fragment from a LaTeX string\nvar LatexFragment = P(MathCommand, function(_) {\n  _.init = function(latex) { this.latex = latex; };\n  _.createLeftOf = function(cursor) {\n    var block = latexMathParser.parse(this.latex);\n    block.children().adopt(cursor.parent, cursor[L], cursor[R]);\n    cursor[L] = block.ends[R];\n    block.jQize().insertBefore(cursor.jQ);\n    block.finalizeInsert(cursor.options, cursor);\n    if (block.ends[R][R].siblingCreated) block.ends[R][R].siblingCreated(cursor.options, L);\n    if (block.ends[L][L].siblingCreated) block.ends[L][L].siblingCreated(cursor.options, R);\n    cursor.parent.bubble('reflow');\n  };\n  _.parser = function() {\n    var frag = latexMathParser.parse(this.latex).children();\n    return Parser.succeed(frag);\n  };\n});\n\n// for what seems to me like [stupid reasons][1], Unicode provides\n// subscripted and superscripted versions of all ten Arabic numerals,\n// as well as [so-called \"vulgar fractions\"][2].\n// Nobody really cares about most of them, but some of them actually\n// predate Unicode, dating back to [ISO-8859-1][3], apparently also\n// known as \"Latin-1\", which among other things [Windows-1252][4]\n// largely coincides with, so Microsoft Word sometimes inserts them\n// and they get copy-pasted into MathQuill.\n//\n// (Irrelevant but funny story: though not a superset of Latin-1 aka\n// ISO-8859-1, Windows-1252 **is** a strict superset of the \"closely\n// related but distinct\"[3] \"ISO 8859-1\" -- see the lack of a dash\n// after \"ISO\"? Completely different character set, like elephants vs\n// elephant seals, or \"Zombies\" vs \"Zombie Redneck Torture Family\".\n// What kind of idiot would get them confused.\n// People in fact got them confused so much, it was so common to\n// mislabel Windows-1252 text as ISO-8859-1, that most modern web\n// browsers and email clients treat the MIME charset of ISO-8859-1\n// as actually Windows-1252, behavior now standard in the HTML5 spec.)\n//\n// [1]: http://en.wikipedia.org/wiki/Unicode_subscripts_andsuper_scripts\n// [2]: http://en.wikipedia.org/wiki/Number_Forms\n// [3]: http://en.wikipedia.org/wiki/ISO/IEC_8859-1\n// [4]: http://en.wikipedia.org/wiki/Windows-1252\nLatexCmds['\\u00b9'] = bind(LatexFragment, '^1');\nLatexCmds['\\u00b2'] = bind(LatexFragment, '^2');\nLatexCmds['\\u00b3'] = bind(LatexFragment, '^3');\nLatexCmds['\\u00bc'] = bind(LatexFragment, '\\\\frac14');\nLatexCmds['\\u00bd'] = bind(LatexFragment, '\\\\frac12');\nLatexCmds['\\u00be'] = bind(LatexFragment, '\\\\frac34');\n\nvar PlusMinus = P(BinaryOperator, function(_) {\n  _.init = VanillaSymbol.prototype.init;\n\n  _.contactWeld = _.siblingCreated = _.siblingDeleted = function(opts, dir) {\n    if (dir === R) return; // ignore if sibling only changed on the right\n    this.jQ[0].className =\n      (!this[L] || this[L] instanceof BinaryOperator ? '' : 'mq-binary-operator');\n    return this;\n  };\n});\n\nLatexCmds['+'] = bind(PlusMinus, '+', '+');\n//yes, these are different dashes, I think one is an en dash and the other is a hyphen\nLatexCmds['\\u2013'] = LatexCmds['-'] = bind(PlusMinus, '-', '&minus;');\nLatexCmds['\\u00b1'] = LatexCmds.pm = LatexCmds.plusmn = LatexCmds.plusminus =\n  bind(PlusMinus,'\\\\pm ','&plusmn;');\nLatexCmds.mp = LatexCmds.mnplus = LatexCmds.minusplus =\n  bind(PlusMinus,'\\\\mp ','&#8723;');\n\nCharCmds['*'] = LatexCmds.sdot = LatexCmds.cdot =\n  bind(BinaryOperator, '\\\\cdot ', '&middot;', '*');\n//semantically should be &sdot;, but &middot; looks better\n\nvar Inequality = P(BinaryOperator, function(_, super_) {\n  _.init = function(data, strict) {\n    this.data = data;\n    this.strict = strict;\n    var strictness = (strict ? 'Strict' : '');\n    super_.init.call(this, data['ctrlSeq'+strictness], data['html'+strictness],\n                     data['text'+strictness]);\n  };\n  _.swap = function(strict) {\n    this.strict = strict;\n    var strictness = (strict ? 'Strict' : '');\n    this.ctrlSeq = this.data['ctrlSeq'+strictness];\n    this.jQ.html(this.data['html'+strictness]);\n    this.textTemplate = [ this.data['text'+strictness] ];\n  };\n  _.deleteTowards = function(dir, cursor) {\n    if (dir === L && !this.strict) {\n      this.swap(true);\n      this.bubble('reflow');\n      return;\n    }\n    super_.deleteTowards.apply(this, arguments);\n  };\n});\n\nvar less = { ctrlSeq: '\\\\le ', html: '&le;', text: '\\u2264',\n             ctrlSeqStrict: '<', htmlStrict: '&lt;', textStrict: '<' };\nvar greater = { ctrlSeq: '\\\\ge ', html: '&ge;', text: '\\u2265',\n                ctrlSeqStrict: '>', htmlStrict: '&gt;', textStrict: '>' };\n\nLatexCmds['<'] = LatexCmds.lt = bind(Inequality, less, true);\nLatexCmds['>'] = LatexCmds.gt = bind(Inequality, greater, true);\nLatexCmds['\\u2264'] = LatexCmds.le = LatexCmds.leq = bind(Inequality, less, false);\nLatexCmds['\\u2265'] = LatexCmds.ge = LatexCmds.geq = bind(Inequality, greater, false);\n\nvar Equality = P(BinaryOperator, function(_, super_) {\n  _.init = function() {\n    super_.init.call(this, '=', '=');\n  };\n  _.createLeftOf = function(cursor) {\n    if (cursor[L] instanceof Inequality && cursor[L].strict) {\n      cursor[L].swap(false);\n      cursor[L].bubble('reflow');\n      return;\n    }\n    super_.createLeftOf.apply(this, arguments);\n  };\n});\nLatexCmds['='] = Equality;\n\nLatexCmds['\\u00d7'] = LatexCmds.times = bind(BinaryOperator, '\\\\times ', '&times;', '[x]');\n\nLatexCmds['\\u00f7'] = LatexCmds.div = LatexCmds.divide = LatexCmds.divides =\n  bind(BinaryOperator,'\\\\div ','&divide;', '[/]');\n\nCharCmds['~'] = LatexCmds.sim = bind(BinaryOperator, '\\\\sim ', '~', '~');\n/***************************\n * Commands and Operators.\n **************************/\n\nvar scale, // = function(jQ, x, y) { ... }\n//will use a CSS 2D transform to scale the jQuery-wrapped HTML elements,\n//or the filter matrix transform fallback for IE 5.5-8, or gracefully degrade to\n//increasing the fontSize to match the vertical Y scaling factor.\n\n//ideas from http://github.com/louisremi/jquery.transform.js\n//see also http://msdn.microsoft.com/en-us/library/ms533014(v=vs.85).aspx\n\n  forceIERedraw = noop,\n  div = document.createElement('div'),\n  div_style = div.style,\n  transformPropNames = {\n    transform:1,\n    WebkitTransform:1,\n    MozTransform:1,\n    OTransform:1,\n    msTransform:1\n  },\n  transformPropName;\n\nfor (var prop in transformPropNames) {\n  if (prop in div_style) {\n    transformPropName = prop;\n    break;\n  }\n}\n\nif (transformPropName) {\n  scale = function(jQ, x, y) {\n    jQ.css(transformPropName, 'scale('+x+','+y+')');\n  };\n}\nelse if ('filter' in div_style) { //IE 6, 7, & 8 fallback, see https://github.com/laughinghan/mathquill/wiki/Transforms\n  forceIERedraw = function(el){ el.className = el.className; };\n  scale = function(jQ, x, y) { //NOTE: assumes y > x\n    x /= (1+(y-1)/2);\n    jQ.css('fontSize', y + 'em');\n    if (!jQ.hasClass('mq-matrixed-container')) {\n      jQ.addClass('mq-matrixed-container')\n      .wrapInner('<span class=\"mq-matrixed\"></span>');\n    }\n    var innerjQ = jQ.children()\n    .css('filter', 'progid:DXImageTransform.Microsoft'\n        + '.Matrix(M11=' + x + \",SizingMethod='auto expand')\"\n    );\n    function calculateMarginRight() {\n      jQ.css('marginRight', (innerjQ.width()-1)*(x-1)/x + 'px');\n    }\n    calculateMarginRight();\n    var intervalId = setInterval(calculateMarginRight);\n    $(window).load(function() {\n      clearTimeout(intervalId);\n      calculateMarginRight();\n    });\n  };\n}\nelse {\n  scale = function(jQ, x, y) {\n    jQ.css('fontSize', y + 'em');\n  };\n}\n\nvar Style = P(MathCommand, function(_, super_) {\n  _.init = function(ctrlSeq, tagName, attrs) {\n    super_.init.call(this, ctrlSeq, '<'+tagName+' '+attrs+'>&0</'+tagName+'>');\n  };\n});\n\n//fonts\nLatexCmds.mathrm = bind(Style, '\\\\mathrm', 'span', 'class=\"mq-roman mq-font\"');\nLatexCmds.mathit = bind(Style, '\\\\mathit', 'i', 'class=\"mq-font\"');\nLatexCmds.mathbf = bind(Style, '\\\\mathbf', 'b', 'class=\"mq-font\"');\nLatexCmds.mathsf = bind(Style, '\\\\mathsf', 'span', 'class=\"mq-sans-serif mq-font\"');\nLatexCmds.mathtt = bind(Style, '\\\\mathtt', 'span', 'class=\"mq-monospace mq-font\"');\n//text-decoration\nLatexCmds.underline = bind(Style, '\\\\underline', 'span', 'class=\"mq-non-leaf mq-underline\"');\nLatexCmds.overline = LatexCmds.bar = bind(Style, '\\\\overline', 'span', 'class=\"mq-non-leaf mq-overline\"');\nLatexCmds.overrightarrow = bind(Style, '\\\\overrightarrow', 'span', 'class=\"mq-non-leaf mq-overarrow mq-arrow-right\"');\nLatexCmds.overleftarrow = bind(Style, '\\\\overleftarrow', 'span', 'class=\"mq-non-leaf mq-overarrow mq-arrow-left\"');\n\n// `\\textcolor{color}{math}` will apply a color to the given math content, where\n// `color` is any valid CSS Color Value (see [SitePoint docs][] (recommended),\n// [Mozilla docs][], or [W3C spec][]).\n//\n// [SitePoint docs]: http://reference.sitepoint.com/css/colorvalues\n// [Mozilla docs]: https://developer.mozilla.org/en-US/docs/CSS/color_value#Values\n// [W3C spec]: http://dev.w3.org/csswg/css3-color/#colorunits\nvar TextColor = LatexCmds.textcolor = P(MathCommand, function(_, super_) {\n  _.setColor = function(color) {\n    this.color = color;\n    this.htmlTemplate =\n      '<span class=\"mq-textcolor\" style=\"color:' + color + '\">&0</span>';\n  };\n  _.latex = function() {\n    return '\\\\textcolor{' + this.color + '}{' + this.blocks[0].latex() + '}';\n  };\n  _.parser = function() {\n    var self = this;\n    var optWhitespace = Parser.optWhitespace;\n    var string = Parser.string;\n    var regex = Parser.regex;\n\n    return optWhitespace\n      .then(string('{'))\n      .then(regex(/^[#\\w\\s.,()%-]*/))\n      .skip(string('}'))\n      .then(function(color) {\n        self.setColor(color);\n        return super_.parser.call(self);\n      })\n    ;\n  };\n});\n\n// Very similar to the \\textcolor command, but will add the given CSS class.\n// Usage: \\class{classname}{math}\n// Note regex that whitelists valid CSS classname characters:\n// https://github.com/mathquill/mathquill/pull/191#discussion_r4327442\nvar Class = LatexCmds['class'] = P(MathCommand, function(_, super_) {\n  _.parser = function() {\n    var self = this, string = Parser.string, regex = Parser.regex;\n    return Parser.optWhitespace\n      .then(string('{'))\n      .then(regex(/^[-\\w\\s\\\\\\xA0-\\xFF]*/))\n      .skip(string('}'))\n      .then(function(cls) {\n        self.htmlTemplate = '<span class=\"mq-class '+cls+'\">&0</span>';\n        return super_.parser.call(self);\n      })\n    ;\n  };\n});\n\nvar SupSub = P(MathCommand, function(_, super_) {\n  _.ctrlSeq = '_{...}^{...}';\n  _.createLeftOf = function(cursor) {\n    if (!cursor[L] && cursor.options.supSubsRequireOperand) return;\n    return super_.createLeftOf.apply(this, arguments);\n  };\n  _.contactWeld = function(cursor) {\n    // Look on either side for a SupSub, if one is found compare my\n    // .sub, .sup with its .sub, .sup. If I have one that it doesn't,\n    // then call .addBlock() on it with my block; if I have one that\n    // it also has, then insert my block's children into its block,\n    // unless my block has none, in which case insert the cursor into\n    // its block (and not mine, I'm about to remove myself) in the case\n    // I was just typed.\n    // TODO: simplify\n\n    // equiv. to [L, R].forEach(function(dir) { ... });\n    for (var dir = L; dir; dir = (dir === L ? R : false)) {\n      if (this[dir] instanceof SupSub) {\n        // equiv. to 'sub sup'.split(' ').forEach(function(supsub) { ... });\n        for (var supsub = 'sub'; supsub; supsub = (supsub === 'sub' ? 'sup' : false)) {\n          var src = this[supsub], dest = this[dir][supsub];\n          if (!src) continue;\n          if (!dest) this[dir].addBlock(src.disown());\n          else if (!src.isEmpty()) { // ins src children at -dir end of dest\n            src.jQ.children().insAtDirEnd(-dir, dest.jQ);\n            var children = src.children().disown();\n            var pt = Point(dest, children.ends[R], dest.ends[L]);\n            if (dir === L) children.adopt(dest, dest.ends[R], 0);\n            else children.adopt(dest, 0, dest.ends[L]);\n          }\n          else var pt = Point(dest, 0, dest.ends[L]);\n          this.placeCursor = (function(dest, src) { // TODO: don't monkey-patch\n            return function(cursor) { cursor.insAtDirEnd(-dir, dest || src); };\n          }(dest, src));\n        }\n        this.remove();\n        if (cursor && cursor[L] === this) {\n          if (dir === R && pt) {\n            pt[L] ? cursor.insRightOf(pt[L]) : cursor.insAtLeftEnd(pt.parent);\n          }\n          else cursor.insRightOf(this[dir]);\n        }\n        break;\n      }\n    }\n    this.respace();\n  };\n  Options.p.charsThatBreakOutOfSupSub = '';\n  _.finalizeTree = function() {\n    this.ends[L].write = function(cursor, ch) {\n      if (cursor.options.autoSubscriptNumerals && this === this.parent.sub) {\n        if (ch === '_') return;\n        var cmd = this.chToCmd(ch);\n        if (cmd instanceof Symbol) cursor.deleteSelection();\n        else cursor.clearSelection().insRightOf(this.parent);\n        return cmd.createLeftOf(cursor.show());\n      }\n      if (cursor[L] && !cursor[R] && !cursor.selection\n          && cursor.options.charsThatBreakOutOfSupSub.indexOf(ch) > -1) {\n        cursor.insRightOf(this.parent);\n      }\n      MathBlock.p.write.apply(this, arguments);\n    };\n  };\n  _.moveTowards = function(dir, cursor, updown) {\n    if (cursor.options.autoSubscriptNumerals && !this.sup) {\n      cursor.insDirOf(dir, this);\n    }\n    else super_.moveTowards.apply(this, arguments);\n  };\n  _.deleteTowards = function(dir, cursor) {\n    if (cursor.options.autoSubscriptNumerals && this.sub) {\n      var cmd = this.sub.ends[-dir];\n      if (cmd instanceof Symbol) cmd.remove();\n      else if (cmd) cmd.deleteTowards(dir, cursor.insAtDirEnd(-dir, this.sub));\n\n      // TODO: factor out a .removeBlock() or something\n      if (this.sub.isEmpty()) {\n        this.sub.deleteOutOf(L, cursor.insAtLeftEnd(this.sub));\n        if (this.sup) cursor.insDirOf(-dir, this);\n        // Note `-dir` because in e.g. x_1^2| want backspacing (leftward)\n        // to delete the 1 but to end up rightward of x^2; with non-negated\n        // `dir` (try it), the cursor appears to have gone \"through\" the ^2.\n      }\n    }\n    else super_.deleteTowards.apply(this, arguments);\n  };\n  _.latex = function() {\n    function latex(prefix, block) {\n      var l = block && block.latex();\n      return block ? prefix + (l.length === 1 ? l : '{' + (l || ' ') + '}') : '';\n    }\n    return latex('_', this.sub) + latex('^', this.sup);\n  };\n  _.respace = _.siblingCreated = _.siblingDeleted = function(opts, dir) {\n    if (dir === R) return; // ignore if sibling only changed on the right\n    this.jQ.toggleClass('mq-limit', this[L].ctrlSeq === '\\\\int ');\n  };\n  _.addBlock = function(block) {\n    if (this.supsub === 'sub') {\n      this.sup = this.upInto = this.sub.upOutOf = block;\n      block.adopt(this, this.sub, 0).downOutOf = this.sub;\n      block.jQ = $('<span class=\"mq-sup\"/>').append(block.jQ.children())\n        .attr(mqBlockId, block.id).prependTo(this.jQ);\n    }\n    else {\n      this.sub = this.downInto = this.sup.downOutOf = block;\n      block.adopt(this, 0, this.sup).upOutOf = this.sup;\n      block.jQ = $('<span class=\"mq-sub\"></span>').append(block.jQ.children())\n        .attr(mqBlockId, block.id).appendTo(this.jQ.removeClass('mq-sup-only'));\n      this.jQ.append('<span style=\"display:inline-block;width:0\">&#8203;</span>');\n    }\n    // like 'sub sup'.split(' ').forEach(function(supsub) { ... });\n    for (var i = 0; i < 2; i += 1) (function(cmd, supsub, oppositeSupsub, updown) {\n      cmd[supsub].deleteOutOf = function(dir, cursor) {\n        cursor.insDirOf((this[dir] ? -dir : dir), this.parent);\n        if (!this.isEmpty()) {\n          var end = this.ends[dir];\n          this.children().disown()\n            .withDirAdopt(dir, cursor.parent, cursor[dir], cursor[-dir])\n            .jQ.insDirOf(-dir, cursor.jQ);\n          cursor[-dir] = end;\n        }\n        cmd.supsub = oppositeSupsub;\n        delete cmd[supsub];\n        delete cmd[updown+'Into'];\n        cmd[oppositeSupsub][updown+'OutOf'] = insLeftOfMeUnlessAtEnd;\n        delete cmd[oppositeSupsub].deleteOutOf;\n        if (supsub === 'sub') $(cmd.jQ.addClass('mq-sup-only')[0].lastChild).remove();\n        this.remove();\n      };\n    }(this, 'sub sup'.split(' ')[i], 'sup sub'.split(' ')[i], 'down up'.split(' ')[i]));\n  };\n});\n\nfunction insLeftOfMeUnlessAtEnd(cursor) {\n  // cursor.insLeftOf(cmd), unless cursor at the end of block, and every\n  // ancestor cmd is at the end of every ancestor block\n  var cmd = this.parent, ancestorCmd = cursor;\n  do {\n    if (ancestorCmd[R]) return cursor.insLeftOf(cmd);\n    ancestorCmd = ancestorCmd.parent.parent;\n  } while (ancestorCmd !== cmd);\n  cursor.insRightOf(cmd);\n}\n\nLatexCmds.subscript =\nLatexCmds._ = P(SupSub, function(_, super_) {\n  _.supsub = 'sub';\n  _.htmlTemplate =\n      '<span class=\"mq-supsub mq-non-leaf\">'\n    +   '<span class=\"mq-sub\">&0</span>'\n    +   '<span style=\"display:inline-block;width:0\">&#8203;</span>'\n    + '</span>'\n  ;\n  _.textTemplate = [ '_' ];\n  _.finalizeTree = function() {\n    this.downInto = this.sub = this.ends[L];\n    this.sub.upOutOf = insLeftOfMeUnlessAtEnd;\n    super_.finalizeTree.call(this);\n  };\n});\n\nLatexCmds.superscript =\nLatexCmds.supscript =\nLatexCmds['^'] = P(SupSub, function(_, super_) {\n  _.supsub = 'sup';\n  _.htmlTemplate =\n      '<span class=\"mq-supsub mq-non-leaf mq-sup-only\">'\n    +   '<span class=\"mq-sup\">&0</span>'\n    + '</span>'\n  ;\n  _.textTemplate = [ '^' ];\n  _.finalizeTree = function() {\n    this.upInto = this.sup = this.ends[R];\n    this.sup.downOutOf = insLeftOfMeUnlessAtEnd;\n    super_.finalizeTree.call(this);\n  };\n});\n\nvar SummationNotation = P(MathCommand, function(_, super_) {\n  _.init = function(ch, html) {\n    var htmlTemplate =\n      '<span class=\"mq-large-operator mq-non-leaf\">'\n    +   '<span class=\"mq-to\"><span>&1</span></span>'\n    +   '<big>'+html+'</big>'\n    +   '<span class=\"mq-from\"><span>&0</span></span>'\n    + '</span>'\n    ;\n    Symbol.prototype.init.call(this, ch, htmlTemplate);\n  };\n  _.createLeftOf = function(cursor) {\n    super_.createLeftOf.apply(this, arguments);\n    if (cursor.options.sumStartsWithNEquals) {\n      Letter('n').createLeftOf(cursor);\n      Equality().createLeftOf(cursor);\n    }\n  };\n  _.latex = function() {\n    function simplify(latex) {\n      return latex.length === 1 ? latex : '{' + (latex || ' ') + '}';\n    }\n    return this.ctrlSeq + '_' + simplify(this.ends[L].latex()) +\n      '^' + simplify(this.ends[R].latex());\n  };\n  _.parser = function() {\n    var string = Parser.string;\n    var optWhitespace = Parser.optWhitespace;\n    var succeed = Parser.succeed;\n    var block = latexMathParser.block;\n\n    var self = this;\n    var blocks = self.blocks = [ MathBlock(), MathBlock() ];\n    for (var i = 0; i < blocks.length; i += 1) {\n      blocks[i].adopt(self, self.ends[R], 0);\n    }\n\n    return optWhitespace.then(string('_').or(string('^'))).then(function(supOrSub) {\n      var child = blocks[supOrSub === '_' ? 0 : 1];\n      return block.then(function(block) {\n        block.children().adopt(child, child.ends[R], 0);\n        return succeed(self);\n      });\n    }).many().result(self);\n  };\n  _.finalizeTree = function() {\n    this.downInto = this.ends[L];\n    this.upInto = this.ends[R];\n    this.ends[L].upOutOf = this.ends[R];\n    this.ends[R].downOutOf = this.ends[L];\n  };\n});\n\nLatexCmds['\\u2211'] =\nLatexCmds.sum =\nLatexCmds.summation = bind(SummationNotation,'\\\\sum ','&sum;');\n\nLatexCmds['\\u220f'] =\nLatexCmds.prod =\nLatexCmds.product = bind(SummationNotation,'\\\\prod ','&prod;');\n\nLatexCmds.coprod =\nLatexCmds.coproduct = bind(SummationNotation,'\\\\coprod ','&#8720;');\n\nvar Fraction =\nLatexCmds.frac =\nLatexCmds.dfrac =\nLatexCmds.cfrac =\nLatexCmds.fraction = P(MathCommand, function(_, super_) {\n  _.ctrlSeq = '\\\\frac';\n  _.htmlTemplate =\n      '<span class=\"mq-fraction mq-non-leaf\">'\n    +   '<span class=\"mq-numerator\">&0</span>'\n    +   '<span class=\"mq-denominator\">&1</span>'\n    +   '<span style=\"display:inline-block;width:0\">&#8203;</span>'\n    + '</span>'\n  ;\n  _.textTemplate = ['(', ')/(', ')'];\n  _.finalizeTree = function() {\n    this.upInto = this.ends[R].upOutOf = this.ends[L];\n    this.downInto = this.ends[L].downOutOf = this.ends[R];\n  };\n});\n\nvar LiveFraction =\nLatexCmds.over =\nCharCmds['/'] = P(Fraction, function(_, super_) {\n  _.createLeftOf = function(cursor) {\n    if (!this.replacedFragment) {\n      var leftward = cursor[L];\n      while (leftward &&\n        !(\n          leftward instanceof BinaryOperator ||\n          leftward instanceof (LatexCmds.text || noop) ||\n          leftward instanceof SummationNotation ||\n          leftward.ctrlSeq === '\\\\ ' ||\n          /^[,;:]$/.test(leftward.ctrlSeq)\n        ) //lookbehind for operator\n      ) leftward = leftward[L];\n\n      if (leftward instanceof SummationNotation && leftward[R] instanceof SupSub) {\n        leftward = leftward[R];\n        if (leftward[R] instanceof SupSub && leftward[R].ctrlSeq != leftward.ctrlSeq)\n          leftward = leftward[R];\n      }\n\n      if (leftward !== cursor[L]) {\n        this.replaces(Fragment(leftward[R] || cursor.parent.ends[L], cursor[L]));\n        cursor[L] = leftward;\n      }\n    }\n    super_.createLeftOf.call(this, cursor);\n  };\n});\n\nvar SquareRoot =\nLatexCmds.sqrt =\nLatexCmds['\\u221a'] = P(MathCommand, function(_, super_) {\n  _.ctrlSeq = '\\\\sqrt';\n  _.htmlTemplate =\n      '<span class=\"mq-non-leaf\">'\n    +   '<span class=\"mq-scaled mq-sqrt-prefix\">&radic;</span>'\n    +   '<span class=\"mq-non-leaf mq-sqrt-stem\">&0</span>'\n    + '</span>'\n  ;\n  _.textTemplate = ['sqrt(', ')'];\n  _.parser = function() {\n    return latexMathParser.optBlock.then(function(optBlock) {\n      return latexMathParser.block.map(function(block) {\n        var nthroot = NthRoot();\n        nthroot.blocks = [ optBlock, block ];\n        optBlock.adopt(nthroot, 0, 0);\n        block.adopt(nthroot, optBlock, 0);\n        return nthroot;\n      });\n    }).or(super_.parser.call(this));\n  };\n  _.reflow = function() {\n    var block = this.ends[R].jQ;\n    scale(block.prev(), 1, block.innerHeight()/+block.css('fontSize').slice(0,-2) - .1);\n  };\n});\n\nvar Vec = LatexCmds.vec = P(MathCommand, function(_, super_) {\n  _.ctrlSeq = '\\\\vec';\n  _.htmlTemplate =\n      '<span class=\"mq-non-leaf\">'\n    +   '<span class=\"mq-vector-prefix\">&rarr;</span>'\n    +   '<span class=\"mq-vector-stem\">&0</span>'\n    + '</span>'\n  ;\n  _.textTemplate = ['vec(', ')'];\n});\n\nvar NthRoot =\nLatexCmds.nthroot = P(SquareRoot, function(_, super_) {\n  _.htmlTemplate =\n      '<sup class=\"mq-nthroot mq-non-leaf\">&0</sup>'\n    + '<span class=\"mq-scaled\">'\n    +   '<span class=\"mq-sqrt-prefix mq-scaled\">&radic;</span>'\n    +   '<span class=\"mq-sqrt-stem mq-non-leaf\">&1</span>'\n    + '</span>'\n  ;\n  _.textTemplate = ['sqrt[', '](', ')'];\n  _.latex = function() {\n    return '\\\\sqrt['+this.ends[L].latex()+']{'+this.ends[R].latex()+'}';\n  };\n});\n\nfunction DelimsMixin(_, super_) {\n  _.jQadd = function() {\n    super_.jQadd.apply(this, arguments);\n    this.delimjQs = this.jQ.children(':first').add(this.jQ.children(':last'));\n    this.contentjQ = this.jQ.children(':eq(1)');\n  };\n  _.reflow = function() {\n    var height = this.contentjQ.outerHeight()\n                 / parseFloat(this.contentjQ.css('fontSize'));\n    scale(this.delimjQs, min(1 + .2*(height - 1), 1.2), 1.2*height);\n  };\n}\n\n// Round/Square/Curly/Angle Brackets (aka Parens/Brackets/Braces)\n//   first typed as one-sided bracket with matching \"ghost\" bracket at\n//   far end of current block, until you type an opposing one\nvar Bracket = P(P(MathCommand, DelimsMixin), function(_, super_) {\n  _.init = function(side, open, close, ctrlSeq, end) {\n    super_.init.call(this, '\\\\left'+ctrlSeq, undefined, [open, close]);\n    this.side = side;\n    this.sides = {};\n    this.sides[L] = { ch: open, ctrlSeq: ctrlSeq };\n    this.sides[R] = { ch: close, ctrlSeq: end };\n  };\n  _.numBlocks = function() { return 1; };\n  _.html = function() { // wait until now so that .side may\n    this.htmlTemplate = // be set by createLeftOf or parser\n        '<span class=\"mq-non-leaf\">'\n      +   '<span class=\"mq-scaled mq-paren'+(this.side === R ? ' mq-ghost' : '')+'\">'\n      +     this.sides[L].ch\n      +   '</span>'\n      +   '<span class=\"mq-non-leaf\">&0</span>'\n      +   '<span class=\"mq-scaled mq-paren'+(this.side === L ? ' mq-ghost' : '')+'\">'\n      +     this.sides[R].ch\n      +   '</span>'\n      + '</span>'\n    ;\n    return super_.html.call(this);\n  };\n  _.latex = function() {\n    return '\\\\left'+this.sides[L].ctrlSeq+this.ends[L].latex()+'\\\\right'+this.sides[R].ctrlSeq;\n  };\n  _.oppBrack = function(opts, node, expectedSide) {\n    // return node iff it's a 1-sided bracket of expected side (if any, may be\n    // undefined), and of opposite side from me if I'm not a pipe\n    return node instanceof Bracket && node.side && node.side !== -expectedSide\n      && (this.sides[this.side].ch === '|' || node.side === -this.side)\n      && (!opts.restrictMismatchedBrackets\n        || OPP_BRACKS[this.sides[this.side].ch] === node.sides[node.side].ch\n        || { '(': ']', '[': ')' }[this.sides[L].ch] === node.sides[R].ch) && node;\n  };\n  _.closeOpposing = function(brack) {\n    brack.side = 0;\n    brack.sides[this.side] = this.sides[this.side]; // copy over my info (may be\n    brack.delimjQs.eq(this.side === L ? 0 : 1) // mismatched, like [a, b))\n      .removeClass('mq-ghost').html(this.sides[this.side].ch);\n  };\n  _.createLeftOf = function(cursor) {\n    if (!this.replacedFragment) { // unless wrapping seln in brackets,\n        // check if next to or inside an opposing one-sided bracket\n        // (must check both sides 'cos I might be a pipe)\n      var opts = cursor.options;\n      var brack = this.oppBrack(opts, cursor[L], L)\n                  || this.oppBrack(opts, cursor[R], R)\n                  || this.oppBrack(opts, cursor.parent.parent);\n    }\n    if (brack) {\n      var side = this.side = -brack.side; // may be pipe with .side not yet set\n      this.closeOpposing(brack);\n      if (brack === cursor.parent.parent && cursor[side]) { // move the stuff between\n        Fragment(cursor[side], cursor.parent.ends[side], -side) // me and ghost outside\n          .disown().withDirAdopt(-side, brack.parent, brack, brack[side])\n          .jQ.insDirOf(side, brack.jQ);\n        brack.bubble('reflow');\n      }\n    }\n    else {\n      brack = this, side = brack.side;\n      if (brack.replacedFragment) brack.side = 0; // wrapping seln, don't be one-sided\n      else if (cursor[-side]) { // elsewise, auto-expand so ghost is at far end\n        brack.replaces(Fragment(cursor[-side], cursor.parent.ends[-side], side));\n        cursor[-side] = 0;\n      }\n      super_.createLeftOf.call(brack, cursor);\n    }\n    if (side === L) cursor.insAtLeftEnd(brack.ends[L]);\n    else cursor.insRightOf(brack);\n  };\n  _.placeCursor = noop;\n  _.unwrap = function() {\n    this.ends[L].children().disown().adopt(this.parent, this, this[R])\n      .jQ.insertAfter(this.jQ);\n    this.remove();\n  };\n  _.deleteSide = function(side, outward, cursor) {\n    var parent = this.parent, sib = this[side], farEnd = parent.ends[side];\n\n    if (side === this.side) { // deleting non-ghost of one-sided bracket, unwrap\n      this.unwrap();\n      sib ? cursor.insDirOf(-side, sib) : cursor.insAtDirEnd(side, parent);\n      return;\n    }\n\n    var opts = cursor.options, wasSolid = !this.side;\n    this.side = -side;\n    // if deleting like, outer close-brace of [(1+2)+3} where inner open-paren\n    if (this.oppBrack(opts, this.ends[L].ends[this.side], side)) { // is ghost,\n      this.closeOpposing(this.ends[L].ends[this.side]); // then become [1+2)+3\n      var origEnd = this.ends[L].ends[side];\n      this.unwrap();\n      if (origEnd.siblingCreated) origEnd.siblingCreated(cursor.options, side);\n      sib ? cursor.insDirOf(-side, sib) : cursor.insAtDirEnd(side, parent);\n    }\n    else { // if deleting like, inner close-brace of ([1+2}+3) where outer\n      if (this.oppBrack(opts, this.parent.parent, side)) { // open-paren is\n        this.parent.parent.closeOpposing(this); // ghost, then become [1+2+3)\n        this.parent.parent.unwrap();\n      } // else if deleting outward from a solid pair, unwrap\n      else if (outward && wasSolid) {\n        this.unwrap();\n        sib ? cursor.insDirOf(-side, sib) : cursor.insAtDirEnd(side, parent);\n        return;\n      }\n      else { // else deleting just one of a pair of brackets, become one-sided\n        this.sides[side] = { ch: OPP_BRACKS[this.sides[this.side].ch],\n                             ctrlSeq: OPP_BRACKS[this.sides[this.side].ctrlSeq] };\n        this.delimjQs.removeClass('mq-ghost')\n          .eq(side === L ? 0 : 1).addClass('mq-ghost').html(this.sides[side].ch);\n      }\n      if (sib) { // auto-expand so ghost is at far end\n        var origEnd = this.ends[L].ends[side];\n        Fragment(sib, farEnd, -side).disown()\n          .withDirAdopt(-side, this.ends[L], origEnd, 0)\n          .jQ.insAtDirEnd(side, this.ends[L].jQ.removeClass('mq-empty'));\n        if (origEnd.siblingCreated) origEnd.siblingCreated(cursor.options, side);\n        cursor.insDirOf(-side, sib);\n      } // didn't auto-expand, cursor goes just outside or just inside parens\n      else (outward ? cursor.insDirOf(side, this)\n                    : cursor.insAtDirEnd(side, this.ends[L]));\n    }\n  };\n  _.deleteTowards = function(dir, cursor) {\n    this.deleteSide(-dir, false, cursor);\n  };\n  _.finalizeTree = function() {\n    this.ends[L].deleteOutOf = function(dir, cursor) {\n      this.parent.deleteSide(dir, true, cursor);\n    };\n    // FIXME HACK: after initial creation/insertion, finalizeTree would only be\n    // called if the paren is selected and replaced, e.g. by LiveFraction\n    this.finalizeTree = this.intentionalBlur = function() {\n      this.delimjQs.eq(this.side === L ? 1 : 0).removeClass('mq-ghost');\n      this.side = 0;\n    };\n  };\n  _.siblingCreated = function(opts, dir) { // if something typed between ghost and far\n    if (dir === -this.side) this.finalizeTree(); // end of its block, solidify\n  };\n});\n\nvar OPP_BRACKS = {\n  '(': ')',\n  ')': '(',\n  '[': ']',\n  ']': '[',\n  '{': '}',\n  '}': '{',\n  '\\\\{': '\\\\}',\n  '\\\\}': '\\\\{',\n  '&lang;': '&rang;',\n  '&rang;': '&lang;',\n  '\\\\langle ': '\\\\rangle ',\n  '\\\\rangle ': '\\\\langle ',\n  '|': '|'\n};\n\nfunction bindCharBracketPair(open, ctrlSeq) {\n  var ctrlSeq = ctrlSeq || open, close = OPP_BRACKS[open], end = OPP_BRACKS[ctrlSeq];\n  CharCmds[open] = bind(Bracket, L, open, close, ctrlSeq, end);\n  CharCmds[close] = bind(Bracket, R, open, close, ctrlSeq, end);\n}\nbindCharBracketPair('(');\nbindCharBracketPair('[');\nbindCharBracketPair('{', '\\\\{');\nLatexCmds.langle = bind(Bracket, L, '&lang;', '&rang;', '\\\\langle ', '\\\\rangle ');\nLatexCmds.rangle = bind(Bracket, R, '&lang;', '&rang;', '\\\\langle ', '\\\\rangle ');\nCharCmds['|'] = bind(Bracket, L, '|', '|', '|', '|');\n\nLatexCmds.left = P(MathCommand, function(_) {\n  _.parser = function() {\n    var regex = Parser.regex;\n    var string = Parser.string;\n    var succeed = Parser.succeed;\n    var optWhitespace = Parser.optWhitespace;\n\n    return optWhitespace.then(regex(/^(?:[([|]|\\\\\\{)/))\n      .then(function(ctrlSeq) { // TODO: \\langle, \\rangle\n        var open = (ctrlSeq.charAt(0) === '\\\\' ? ctrlSeq.slice(1) : ctrlSeq);\n        return latexMathParser.then(function (block) {\n          return string('\\\\right').skip(optWhitespace)\n            .then(regex(/^(?:[\\])|]|\\\\\\})/)).map(function(end) {\n              var close = (end.charAt(0) === '\\\\' ? end.slice(1) : end);\n              var cmd = Bracket(0, open, close, ctrlSeq, end);\n              cmd.blocks = [ block ];\n              block.adopt(cmd, 0, 0);\n              return cmd;\n            })\n          ;\n        });\n      })\n    ;\n  };\n});\n\nLatexCmds.right = P(MathCommand, function(_) {\n  _.parser = function() {\n    return Parser.fail('unmatched \\\\right');\n  };\n});\n\nvar Binomial =\nLatexCmds.binom =\nLatexCmds.binomial = P(P(MathCommand, DelimsMixin), function(_, super_) {\n  _.ctrlSeq = '\\\\binom';\n  _.htmlTemplate =\n      '<span class=\"mq-non-leaf\">'\n    +   '<span class=\"mq-paren mq-scaled\">(</span>'\n    +   '<span class=\"mq-non-leaf\">'\n    +     '<span class=\"mq-array mq-non-leaf\">'\n    +       '<span>&0</span>'\n    +       '<span>&1</span>'\n    +     '</span>'\n    +   '</span>'\n    +   '<span class=\"mq-paren mq-scaled\">)</span>'\n    + '</span>'\n  ;\n  _.textTemplate = ['choose(',',',')'];\n});\n\nvar Choose =\nLatexCmds.choose = P(Binomial, function(_) {\n  _.createLeftOf = LiveFraction.prototype.createLeftOf;\n});\n\nLatexCmds.editable = // backcompat with before cfd3620 on #233\nLatexCmds.MathQuillMathField = P(MathCommand, function(_, super_) {\n  _.ctrlSeq = '\\\\MathQuillMathField';\n  _.htmlTemplate =\n      '<span class=\"mq-editable-field\">'\n    +   '<span class=\"mq-root-block\">&0</span>'\n    + '</span>'\n  ;\n  _.parser = function() {\n    var self = this,\n      string = Parser.string, regex = Parser.regex, succeed = Parser.succeed;\n    return string('[').then(regex(/^[a-z][a-z0-9]*/i)).skip(string(']'))\n      .map(function(name) { self.name = name; }).or(succeed())\n      .then(super_.parser.call(self));\n  };\n  _.finalizeTree = function() {\n    var ctrlr = Controller(this.ends[L], this.jQ, Options());\n    ctrlr.KIND_OF_MQ = 'MathField';\n    ctrlr.editable = true;\n    ctrlr.createTextarea();\n    ctrlr.editablesTextareaEvents();\n    ctrlr.cursor.insAtRightEnd(ctrlr.root);\n    RootBlockMixin(ctrlr.root);\n  };\n  _.registerInnerField = function(innerFields, MathField) {\n    innerFields.push(innerFields[this.name] = MathField(this.ends[L].controller));\n  };\n  _.latex = function(){ return this.ends[L].latex(); };\n  _.text = function(){ return this.ends[L].text(); };\n});\n\n// Embed arbitrary things\n// Probably the closest DOM analogue would be an iframe?\n// From MathQuill's perspective, it's a Symbol, it can be\n// anywhere and the cursor can go around it but never in it.\n// Create by calling public API method .dropEmbedded(),\n// or by calling the global public API method .registerEmbed()\n// and rendering LaTeX like \\embed{registeredName} (see test).\nvar Embed = LatexCmds.embed = P(Symbol, function(_, super_) {\n  _.setOptions = function(options) {\n    function noop () { return \"\"; }\n    this.text = options.text || noop;\n    this.htmlTemplate = options.htmlString || \"\";\n    this.latex = options.latex || noop;\n    return this;\n  };\n  _.parser = function() {\n    var self = this;\n      string = Parser.string, regex = Parser.regex, succeed = Parser.succeed;\n    return string('{').then(regex(/^[a-z][a-z0-9]*/i)).skip(string('}'))\n      .then(function(name) {\n        // the chars allowed in the optional data block are arbitrary other than\n        // excluding curly braces and square brackets (which'd be too confusing)\n        return string('[').then(regex(/^[-\\w\\s]*/)).skip(string(']'))\n          .or(succeed()).map(function(data) {\n            return self.setOptions(EMBEDS[name](data));\n          })\n        ;\n      })\n    ;\n  };\n});\nvar MQ1 = getInterface(1);\nfor (var key in MQ1) (function(key, val) {\n  if (typeof val === 'function') {\n    MathQuill[key] = function() {\n      insistOnInterVer();\n      return val.apply(this, arguments);\n    };\n    MathQuill[key].prototype = val.prototype;\n  }\n  else MathQuill[key] = val;\n}(key, MQ1[key]));\n\n}());\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = window.MathQuill;\n//# sourceMappingURL=data:application/json;base64,");

/***/ },

/***/ 215:
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar store = __webpack_require__(216);\n\nmodule.exports = {\n    // naming convetion: verb + noun\n    // the noun should be one of the other properties in the object that's\n    // being dispatched\n\n    pressKey: function pressKey(key) {\n        var cmd = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];\n\n        store.dispatch({\n            type: 'PressKey',\n            key: key,\n            cmd: cmd\n        });\n    },\n\n    registerKeyHandler: function registerKeyHandler(keyHandler) {\n        store.dispatch({\n            type: 'RegisterKeyHandler',\n            keyHandler: keyHandler\n        });\n    }\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYWN0aW9ucy5qcz8wZTY5Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBTSxRQUFRLG9CQUFRLEdBQVIsQ0FBUjs7QUFFTixPQUFPLE9BQVAsR0FBaUI7Ozs7O0FBS2IsY0FBVSxrQkFBUyxHQUFULEVBQTJCO1lBQWIsNERBQU0scUJBQU87O0FBQ2pDLGNBQU0sUUFBTixDQUFlO0FBQ1gsa0JBQU0sVUFBTjtBQUNBLG9CQUZXO0FBR1gsb0JBSFc7U0FBZixFQURpQztLQUEzQjs7QUFRVix3QkFBb0IsNEJBQVMsVUFBVCxFQUFxQjtBQUNyQyxjQUFNLFFBQU4sQ0FBZTtBQUNYLGtCQUFNLG9CQUFOO0FBQ0Esa0NBRlc7U0FBZixFQURxQztLQUFyQjtDQWJ4QiIsImZpbGUiOiIyMTUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBzdG9yZSA9IHJlcXVpcmUoJy4vc3RvcmUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgLy8gbmFtaW5nIGNvbnZldGlvbjogdmVyYiArIG5vdW5cbiAgICAvLyB0aGUgbm91biBzaG91bGQgYmUgb25lIG9mIHRoZSBvdGhlciBwcm9wZXJ0aWVzIGluIHRoZSBvYmplY3QgdGhhdCdzXG4gICAgLy8gYmVpbmcgZGlzcGF0Y2hlZFxuXG4gICAgcHJlc3NLZXk6IGZ1bmN0aW9uKGtleSwgY21kID0gZmFsc2UpIHtcbiAgICAgICAgc3RvcmUuZGlzcGF0Y2goe1xuICAgICAgICAgICAgdHlwZTogJ1ByZXNzS2V5JyxcbiAgICAgICAgICAgIGtleSxcbiAgICAgICAgICAgIGNtZCxcbiAgICAgICAgfSk7XG4gICAgfSxcblxuICAgIHJlZ2lzdGVyS2V5SGFuZGxlcjogZnVuY3Rpb24oa2V5SGFuZGxlcikge1xuICAgICAgICBzdG9yZS5kaXNwYXRjaCh7XG4gICAgICAgICAgICB0eXBlOiAnUmVnaXN0ZXJLZXlIYW5kbGVyJyxcbiAgICAgICAgICAgIGtleUhhbmRsZXIsXG4gICAgICAgIH0pO1xuICAgIH0sXG59O1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvYWN0aW9ucy5qc1xuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },

/***/ 216:
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nvar Redux = __webpack_require__(174);\n\nvar initialState = {\n    currentValue: '',\n    keyHandlers: [] };\n\n// TODO(kevinb) keep track of the current handle\nvar reducer = function reducer() {\n    var state = arguments.length <= 0 || arguments[0] === undefined ? initialState : arguments[0];\n    var action = arguments[1];\n\n\n    switch (action.type) {\n        case 'RegisterKeyHandler':\n            return _extends({}, state, {\n                keyHandlers: [].concat(_toConsumableArray(state.keyHandlers), [action.keyHandler])\n            });\n\n        case 'PressKey':\n            // This is probably an anti-pattern but it works for the case where\n            // we don't actually control the state but we still want to\n            // communicate with the other object\n            state.keyHandlers.forEach(function (handler) {\n                handler(action.key, action.cmd);\n            });\n\n            // TODO(kevinb) have the handler return state from MathQuill and store it\n            return state;\n\n        case 'PressBackspace':\n            state.keyHandlers.forEach(function (handler) {\n                handler('backspace');\n            });\n\n        default:\n            return state;\n    }\n};\n\nvar store = Redux.createStore(reducer);\n\nmodule.exports = store;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvc3RvcmUuanM/YTI1OSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFNLFFBQVEsb0JBQVEsR0FBUixDQUFSOztBQUVOLElBQU0sZUFBZTtBQUNqQixrQkFBYyxFQUFkO0FBQ0EsaUJBQWEsRUFBYixFQUZFOzs7QUFLTixJQUFNLFVBQVUsU0FBVixPQUFVLEdBQXVDO1FBQTlCLDhEQUFRLDRCQUFzQjtRQUFSLHNCQUFROzs7QUFFbkQsWUFBTyxPQUFPLElBQVA7QUFDSCxhQUFLLG9CQUFMO0FBQ0ksZ0NBQ087QUFDSCwwREFBaUIsTUFBTSxXQUFOLElBQW1CLE9BQU8sVUFBUCxFQUFwQztjQUZKLENBREo7O0FBREosYUFPUyxVQUFMOzs7O0FBSUksa0JBQU0sV0FBTixDQUFrQixPQUFsQixDQUEwQixtQkFBVztBQUNqQyx3QkFBUSxPQUFPLEdBQVAsRUFBWSxPQUFPLEdBQVAsQ0FBcEIsQ0FEaUM7YUFBWCxDQUExQjs7O0FBSkosbUJBU1csS0FBUCxDQVRKOztBQVBKLGFBa0JTLGdCQUFMO0FBQ0ksa0JBQU0sV0FBTixDQUFrQixPQUFsQixDQUEwQixtQkFBVztBQUNqQyx3QkFBUSxXQUFSLEVBRGlDO2FBQVgsQ0FBMUIsQ0FESjs7QUFsQko7QUF3QlEsbUJBQU8sS0FBUCxDQURKO0FBdkJKLEtBRm1EO0NBQXZDOztBQStCaEIsSUFBTSxRQUFRLE1BQU0sV0FBTixDQUFrQixPQUFsQixDQUFSOztBQUVOLE9BQU8sT0FBUCxHQUFpQixLQUFqQiIsImZpbGUiOiIyMTYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBSZWR1eCA9IHJlcXVpcmUoJ3JlZHV4Jyk7XG5cbmNvbnN0IGluaXRpYWxTdGF0ZSA9IHtcbiAgICBjdXJyZW50VmFsdWU6ICcnLFxuICAgIGtleUhhbmRsZXJzOiBbXSwgICAgLy8gVE9ETyhrZXZpbmIpIGtlZXAgdHJhY2sgb2YgdGhlIGN1cnJlbnQgaGFuZGxlXG59O1xuXG5jb25zdCByZWR1Y2VyID0gZnVuY3Rpb24oc3RhdGUgPSBpbml0aWFsU3RhdGUsIGFjdGlvbikge1xuXG4gICAgc3dpdGNoKGFjdGlvbi50eXBlKSB7XG4gICAgICAgIGNhc2UgJ1JlZ2lzdGVyS2V5SGFuZGxlcic6XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIC4uLnN0YXRlLFxuICAgICAgICAgICAgICAgIGtleUhhbmRsZXJzOiBbLi4uc3RhdGUua2V5SGFuZGxlcnMsIGFjdGlvbi5rZXlIYW5kbGVyXSxcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgY2FzZSAnUHJlc3NLZXknOlxuICAgICAgICAgICAgLy8gVGhpcyBpcyBwcm9iYWJseSBhbiBhbnRpLXBhdHRlcm4gYnV0IGl0IHdvcmtzIGZvciB0aGUgY2FzZSB3aGVyZVxuICAgICAgICAgICAgLy8gd2UgZG9uJ3QgYWN0dWFsbHkgY29udHJvbCB0aGUgc3RhdGUgYnV0IHdlIHN0aWxsIHdhbnQgdG9cbiAgICAgICAgICAgIC8vIGNvbW11bmljYXRlIHdpdGggdGhlIG90aGVyIG9iamVjdFxuICAgICAgICAgICAgc3RhdGUua2V5SGFuZGxlcnMuZm9yRWFjaChoYW5kbGVyID0+IHtcbiAgICAgICAgICAgICAgICBoYW5kbGVyKGFjdGlvbi5rZXksIGFjdGlvbi5jbWQpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIFRPRE8oa2V2aW5iKSBoYXZlIHRoZSBoYW5kbGVyIHJldHVybiBzdGF0ZSBmcm9tIE1hdGhRdWlsbCBhbmQgc3RvcmUgaXRcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZTtcblxuICAgICAgICBjYXNlICdQcmVzc0JhY2tzcGFjZSc6XG4gICAgICAgICAgICBzdGF0ZS5rZXlIYW5kbGVycy5mb3JFYWNoKGhhbmRsZXIgPT4ge1xuICAgICAgICAgICAgICAgIGhhbmRsZXIoJ2JhY2tzcGFjZScpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZTtcbiAgICB9XG59O1xuXG5cbmNvbnN0IHN0b3JlID0gUmVkdXguY3JlYXRlU3RvcmUocmVkdWNlcik7XG5cbm1vZHVsZS5leHBvcnRzID0gc3RvcmU7XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy9zdG9yZS5qc1xuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },

/***/ 217:
/***/ function(module, exports) {

	eval("'use strict';\n\nvar Keys = {\n    BACKSPACE: 'Backspace',\n    LEFT: 'Left',\n    RIGHT: 'Right',\n    TAB: 'Tab',\n    ENTER: 'Enter'\n};\n\nmodule.exports = Keys;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMva2V5cy5qcz83MGVhIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBTSxPQUFPO0FBQ1QsZUFBVyxXQUFYO0FBQ0EsVUFBTSxNQUFOO0FBQ0EsV0FBTyxPQUFQO0FBQ0EsU0FBSyxLQUFMO0FBQ0EsV0FBTyxPQUFQO0NBTEU7O0FBUU4sT0FBTyxPQUFQLEdBQWlCLElBQWpCIiwiZmlsZSI6IjIxNy5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEtleXMgPSB7XG4gICAgQkFDS1NQQUNFOiAnQmFja3NwYWNlJyxcbiAgICBMRUZUOiAnTGVmdCcsXG4gICAgUklHSFQ6ICdSaWdodCcsXG4gICAgVEFCOiAnVGFiJyxcbiAgICBFTlRFUjogJ0VudGVyJyxcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gS2V5cztcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL2tleXMuanNcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9");

/***/ },

/***/ 218:
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar React = __webpack_require__(1);\n\nvar _require = __webpack_require__(190);\n\nvar StyleSheet = _require.StyleSheet;\n\nvar _require2 = __webpack_require__(211);\n\nvar View = _require2.View;\n\nvar KeypadButton = __webpack_require__(219);\nvar actions = __webpack_require__(215);\nvar Symbols = __webpack_require__(220);\nvar Keys = __webpack_require__(217);\n\nvar CMD = true;\n\nvar MathKeypad = React.createClass({\n    displayName: 'MathKeypad',\n    render: function render() {\n        return React.createElement(\n            View,\n            { style: styles.keypad },\n            React.createElement(\n                View,\n                { style: styles.row },\n                React.createElement(KeypadButton, { label: '7', onClick: function onClick() {\n                        return actions.pressKey(\"7\");\n                    }, style: styles.firstKey }),\n                React.createElement(KeypadButton, { label: '8', onClick: function onClick() {\n                        return actions.pressKey(\"8\");\n                    } }),\n                React.createElement(KeypadButton, { label: '9', onClick: function onClick() {\n                        return actions.pressKey(\"9\");\n                    } }),\n                React.createElement(KeypadButton, { label: '+', onClick: function onClick() {\n                        return actions.pressKey(\"+\");\n                    } }),\n                React.createElement(KeypadButton, { label: '^', onClick: function onClick() {\n                        return actions.pressKey(\"^\", CMD);\n                    } }),\n                React.createElement(KeypadButton, { label: Symbols.LEFT_ARROW, onClick: function onClick() {\n                        return actions.pressKey(Keys.LEFT);\n                    }, style: styles.lastKey })\n            ),\n            React.createElement(\n                View,\n                { style: styles.row },\n                React.createElement(KeypadButton, { label: '4', onClick: function onClick() {\n                        return actions.pressKey(\"4\");\n                    }, style: styles.firstKey }),\n                React.createElement(KeypadButton, { label: '5', onClick: function onClick() {\n                        return actions.pressKey(\"5\");\n                    } }),\n                React.createElement(KeypadButton, { label: '6', onClick: function onClick() {\n                        return actions.pressKey(\"6\");\n                    } }),\n                React.createElement(KeypadButton, { label: Symbols.MINUS, onClick: function onClick() {\n                        return actions.pressKey(\"-\");\n                    } }),\n                React.createElement(KeypadButton, { label: Symbols.SQRT, onClick: function onClick() {\n                        return actions.pressKey(\"sqrt\", CMD);\n                    } }),\n                React.createElement(KeypadButton, { label: Symbols.RIGHT_ARROW, onClick: function onClick() {\n                        return actions.pressKey(Keys.RIGHT);\n                    }, style: styles.lastKey })\n            ),\n            React.createElement(\n                View,\n                { style: styles.row },\n                React.createElement(KeypadButton, { label: '1', onClick: function onClick() {\n                        return actions.pressKey(\"1\");\n                    }, style: styles.firstKey }),\n                React.createElement(KeypadButton, { label: '2', onClick: function onClick() {\n                        return actions.pressKey(\"2\");\n                    } }),\n                React.createElement(KeypadButton, { label: '3', onClick: function onClick() {\n                        return actions.pressKey(\"3\");\n                    } }),\n                React.createElement(KeypadButton, { label: Symbols.TIMES, onClick: function onClick() {\n                        return actions.pressKey(\"\\\\times\");\n                    } }),\n                React.createElement(KeypadButton, { label: Symbols.CDOT, onClick: function onClick() {\n                        return actions.pressKey(\"\\\\cdot\");\n                    } }),\n                React.createElement(KeypadButton, { label: '=', onClick: function onClick() {\n                        return actions.pressKey(\"=\");\n                    }, style: styles.lastKey })\n            ),\n            React.createElement(\n                View,\n                { style: styles.row },\n                React.createElement(KeypadButton, { label: 'x', onClick: function onClick() {\n                        return actions.pressKey(\"x\");\n                    }, style: [styles.firstKey, styles.bottomKey] }),\n                React.createElement(KeypadButton, { label: '0', onClick: function onClick() {\n                        return actions.pressKey(\"0\");\n                    }, style: styles.bottomKey }),\n                React.createElement(KeypadButton, { label: '.', onClick: function onClick() {\n                        return actions.pressKey(\".\");\n                    }, style: styles.bottomKey }),\n                React.createElement(KeypadButton, { label: Symbols.DIVISION, onClick: function onClick() {\n                        return actions.pressKey(\"\\\\div\");\n                    }, style: styles.bottomKey }),\n                React.createElement(KeypadButton, { label: '/', onClick: function onClick() {\n                        return actions.pressKey(\"/\", CMD);\n                    }, style: styles.bottomKey }),\n                React.createElement(KeypadButton, { label: Symbols.BACKSPACE, onClick: function onClick() {\n                        return actions.pressKey(Keys.BACKSPACE);\n                    }, style: [styles.lastKey, styles.bottomKey] })\n            )\n        );\n    }\n});\n\nvar styles = StyleSheet.create({\n    row: {\n        flexDirection: 'row'\n    },\n    // TODO(kevinb): ask Emily about :last-child selector\n    firstKey: {\n        borderLeftWidth: 1\n    },\n    lastKey: {\n        borderRightWidth: 1\n    },\n    bottomKey: {\n        borderBottomWidth: 1\n    },\n    keypad: {\n        position: 'fixed',\n        bottom: 0,\n        width: '100%'\n    }\n});\n\nmodule.exports = MathKeypad;\n//# sourceMappingURL=data:application/json;base64,");

/***/ },

/***/ 219:
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nvar React = __webpack_require__(1);\n\nvar _require = __webpack_require__(190);\n\nvar StyleSheet = _require.StyleSheet;\n\nvar _require2 = __webpack_require__(211);\n\nvar Text = _require2.Text;\nvar View = _require2.View;\n\n\nvar KeypadButton = function KeypadButton(props) {\n    var style = [styles.button].concat(_toConsumableArray(Array.isArray(props.style) ? props.style : [props.style]));\n\n    return React.createElement(\n        View,\n        { style: style, onClick: props.onClick },\n        React.createElement(\n            Text,\n            { style: styles.text },\n            props.label\n        )\n    );\n};\n\nKeypadButton.propTypes = {\n    label: React.PropTypes.string.isRequired,\n    onClick: React.PropTypes.func.isRequired\n};\n\nvar styles = StyleSheet.create({\n    button: {\n        width: '100%',\n        height: 60,\n        borderColor: '#BBB',\n        borderStyle: 'solid',\n        borderTopWidth: 1,\n        borderRightWidth: 1,\n        lineHeight: '60px',\n        textAlign: 'center',\n        backgroundColor: '#EEE'\n    },\n    text: {\n        fontFamily: 'sans-serif',\n        fontSize: 32\n    }\n});\n\nmodule.exports = KeypadButton;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMva2V5cGFkLWJ1dHRvbi5qcz84NTEzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxJQUFNLFFBQVEsb0JBQVEsQ0FBUixDQUFSOztlQUNpQixvQkFBUSxHQUFSOztJQUFmOztnQkFDZSxvQkFBUSxHQUFSOztJQUFmO0lBQU07OztBQUdkLElBQU0sZUFBZSxTQUFmLFlBQWUsQ0FBQyxLQUFELEVBQVc7QUFDNUIsUUFBTSxTQUNGLE9BQU8sTUFBUCw0QkFHSSxNQUFNLE9BQU4sQ0FBYyxNQUFNLEtBQU4sQ0FBZCxHQUE2QixNQUFNLEtBQU4sR0FBYyxDQUFDLE1BQU0sS0FBTixDQUE1QyxFQUpGLENBRHNCOztBQVE1QixXQUFPO0FBQUMsWUFBRDtVQUFNLE9BQU8sS0FBUCxFQUFjLFNBQVMsTUFBTSxPQUFOLEVBQTdCO1FBQ0g7QUFBQyxnQkFBRDtjQUFNLE9BQU8sT0FBTyxJQUFQLEVBQWI7WUFDSyxNQUFNLEtBQU47U0FGRjtLQUFQLENBUjRCO0NBQVg7O0FBZXJCLGFBQWEsU0FBYixHQUF5QjtBQUNyQixXQUFPLE1BQU0sU0FBTixDQUFnQixNQUFoQixDQUF1QixVQUF2QjtBQUNQLGFBQVMsTUFBTSxTQUFOLENBQWdCLElBQWhCLENBQXFCLFVBQXJCO0NBRmI7O0FBS0EsSUFBTSxTQUFTLFdBQVcsTUFBWCxDQUFrQjtBQUM3QixZQUFRO0FBQ0osZUFBTyxNQUFQO0FBQ0EsZ0JBQVEsRUFBUjtBQUNBLHFCQUFhLE1BQWI7QUFDQSxxQkFBYSxPQUFiO0FBQ0Esd0JBQWdCLENBQWhCO0FBQ0EsMEJBQWtCLENBQWxCO0FBQ0Esb0JBQVksTUFBWjtBQUNBLG1CQUFXLFFBQVg7QUFDQSx5QkFBaUIsTUFBakI7S0FUSjtBQVdBLFVBQU07QUFDRixvQkFBWSxZQUFaO0FBQ0Esa0JBQVUsRUFBVjtLQUZKO0NBWlcsQ0FBVDs7QUFrQk4sT0FBTyxPQUFQLEdBQWlCLFlBQWpCIiwiZmlsZSI6IjIxOS5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbmNvbnN0IHsgU3R5bGVTaGVldCB9ID0gcmVxdWlyZSgnYXBocm9kaXRlJyk7XG5jb25zdCB7IFRleHQsIFZpZXcgfSA9IHJlcXVpcmUoJy4vcmVhY3QtbmF0aXZlJyk7XG5cblxuY29uc3QgS2V5cGFkQnV0dG9uID0gKHByb3BzKSA9PiB7XG4gICAgY29uc3Qgc3R5bGUgPSBbXG4gICAgICAgIHN0eWxlcy5idXR0b24sXG4gICAgICAgIC8vIFJlYWN0IE5hdGl2ZSBhbGxvd3MgeW91IHRvIHNldCB0aGUgJ3N0eWxlJyBwcm9wcyBvbiB1c2VyIGRlZmluZWRcbiAgICAgICAgLy8gY29tcG9uZW50cywgaHR0cHM6Ly9mYWNlYm9vay5naXRodWIuaW8vcmVhY3QtbmF0aXZlL2RvY3Mvc3R5bGUuaHRtbFxuICAgICAgICAuLi4oQXJyYXkuaXNBcnJheShwcm9wcy5zdHlsZSkgPyBwcm9wcy5zdHlsZSA6IFtwcm9wcy5zdHlsZV0pXG4gICAgXTtcblxuICAgIHJldHVybiA8VmlldyBzdHlsZT17c3R5bGV9IG9uQ2xpY2s9e3Byb3BzLm9uQ2xpY2t9PlxuICAgICAgICA8VGV4dCBzdHlsZT17c3R5bGVzLnRleHR9PlxuICAgICAgICAgICAge3Byb3BzLmxhYmVsfVxuICAgICAgICA8L1RleHQ+XG4gICAgPC9WaWV3Pjtcbn07XG5cbktleXBhZEJ1dHRvbi5wcm9wVHlwZXMgPSB7XG4gICAgbGFiZWw6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICBvbkNsaWNrOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxufTtcblxuY29uc3Qgc3R5bGVzID0gU3R5bGVTaGVldC5jcmVhdGUoe1xuICAgIGJ1dHRvbjoge1xuICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICBoZWlnaHQ6IDYwLFxuICAgICAgICBib3JkZXJDb2xvcjogJyNCQkInLFxuICAgICAgICBib3JkZXJTdHlsZTogJ3NvbGlkJyxcbiAgICAgICAgYm9yZGVyVG9wV2lkdGg6IDEsXG4gICAgICAgIGJvcmRlclJpZ2h0V2lkdGg6IDEsXG4gICAgICAgIGxpbmVIZWlnaHQ6ICc2MHB4JyxcbiAgICAgICAgdGV4dEFsaWduOiAnY2VudGVyJyxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnI0VFRScsXG4gICAgfSxcbiAgICB0ZXh0OiB7XG4gICAgICAgIGZvbnRGYW1pbHk6ICdzYW5zLXNlcmlmJyxcbiAgICAgICAgZm9udFNpemU6IDMyLFxuICAgIH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEtleXBhZEJ1dHRvbjtcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL2tleXBhZC1idXR0b24uanNcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9");

/***/ },

/***/ 220:
/***/ function(module, exports) {

	eval("\"use strict\";\n\nvar Symbols = {\n    MINUS: \"−\",\n    SQRT: \"√\",\n    TIMES: \"×\",\n    DIVISION: \"÷\",\n    CDOT: \"·\",\n    BACKSPACE: \"⌫\",\n\n    // Arrows\n    LEFT_ARROW: \"←\",\n    RIGHT_ARROW: \"→\"\n};\n\nmodule.exports = Symbols;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvc3ltYm9scy5qcz80MGIxIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBTSxVQUFVO0FBQ1osV0FBTyxHQUFQO0FBQ0EsVUFBTSxHQUFOO0FBQ0EsV0FBTyxHQUFQO0FBQ0EsY0FBVSxHQUFWO0FBQ0EsVUFBTSxHQUFOO0FBQ0EsZUFBVyxHQUFYOzs7QUFHQSxnQkFBWSxHQUFaO0FBQ0EsaUJBQWEsR0FBYjtDQVZFOztBQWFOLE9BQU8sT0FBUCxHQUFpQixPQUFqQiIsImZpbGUiOiIyMjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBTeW1ib2xzID0ge1xuICAgIE1JTlVTOiBcIlxcdTIyMTJcIixcbiAgICBTUVJUOiBcIlxcdTIyMUFcIixcbiAgICBUSU1FUzogXCJcXHUwMEQ3XCIsXG4gICAgRElWSVNJT046IFwiXFx1MDBGN1wiLFxuICAgIENET1Q6IFwiXFx1MDBCN1wiLFxuICAgIEJBQ0tTUEFDRTogXCJcXHUyMzJCXCIsXG5cbiAgICAvLyBBcnJvd3NcbiAgICBMRUZUX0FSUk9XOiBcIlxcdTIxOTBcIixcbiAgICBSSUdIVF9BUlJPVzogXCJcXHUyMTkyXCIsXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN5bWJvbHM7XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy9zeW1ib2xzLmpzXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ }

});